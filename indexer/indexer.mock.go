// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0xsequence/go-sequence/indexer (interfaces: Indexer)
//
// Generated by this command:
//
//	mockgen -destination indexer.mock.go -package indexer . Indexer
//

// Package indexer is a generated GoMock package.
package indexer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
	isgomock struct{}
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// AddWebhookListener mocks base method.
func (m *MockIndexer) AddWebhookListener(ctx context.Context, url string, filters *EventFilter, projectId *uint64) (bool, *WebhookListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWebhookListener", ctx, url, filters, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*WebhookListener)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddWebhookListener indicates an expected call of AddWebhookListener.
func (mr *MockIndexerMockRecorder) AddWebhookListener(ctx, url, filters, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWebhookListener", reflect.TypeOf((*MockIndexer)(nil).AddWebhookListener), ctx, url, filters, projectId)
}

// FetchTransactionReceipt mocks base method.
func (m *MockIndexer) FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTransactionReceipt", ctx, txnHash, maxBlockWait)
	ret0, _ := ret[0].(*TransactionReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTransactionReceipt indicates an expected call of FetchTransactionReceipt.
func (mr *MockIndexerMockRecorder) FetchTransactionReceipt(ctx, txnHash, maxBlockWait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTransactionReceipt", reflect.TypeOf((*MockIndexer)(nil).FetchTransactionReceipt), ctx, txnHash, maxBlockWait)
}

// FetchTransactionReceiptWithFilter mocks base method.
func (m *MockIndexer) FetchTransactionReceiptWithFilter(ctx context.Context, filter *TransactionFilter, maxBlockWait *int) (*TransactionReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTransactionReceiptWithFilter", ctx, filter, maxBlockWait)
	ret0, _ := ret[0].(*TransactionReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTransactionReceiptWithFilter indicates an expected call of FetchTransactionReceiptWithFilter.
func (mr *MockIndexerMockRecorder) FetchTransactionReceiptWithFilter(ctx, filter, maxBlockWait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTransactionReceiptWithFilter", reflect.TypeOf((*MockIndexer)(nil).FetchTransactionReceiptWithFilter), ctx, filter, maxBlockWait)
}

// GetAllWebhookListeners mocks base method.
func (m *MockIndexer) GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWebhookListeners", ctx, projectId)
	ret0, _ := ret[0].([]*WebhookListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWebhookListeners indicates an expected call of GetAllWebhookListeners.
func (mr *MockIndexerMockRecorder) GetAllWebhookListeners(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWebhookListeners", reflect.TypeOf((*MockIndexer)(nil).GetAllWebhookListeners), ctx, projectId)
}

// GetBalanceUpdates mocks base method.
func (m *MockIndexer) GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceUpdates", ctx, contractAddress, lastBlockNumber, lastBlockHash, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*TokenBalance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBalanceUpdates indicates an expected call of GetBalanceUpdates.
func (mr *MockIndexerMockRecorder) GetBalanceUpdates(ctx, contractAddress, lastBlockNumber, lastBlockHash, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceUpdates", reflect.TypeOf((*MockIndexer)(nil).GetBalanceUpdates), ctx, contractAddress, lastBlockNumber, lastBlockHash, page)
}

// GetChainID mocks base method.
func (m *MockIndexer) GetChainID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainID indicates an expected call of GetChainID.
func (mr *MockIndexerMockRecorder) GetChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockIndexer)(nil).GetChainID), ctx)
}

// GetEtherBalance mocks base method.
func (m *MockIndexer) GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtherBalance", ctx, accountAddress)
	ret0, _ := ret[0].(*EtherBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtherBalance indicates an expected call of GetEtherBalance.
func (mr *MockIndexerMockRecorder) GetEtherBalance(ctx, accountAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtherBalance", reflect.TypeOf((*MockIndexer)(nil).GetEtherBalance), ctx, accountAddress)
}

// GetNativeTokenBalance mocks base method.
func (m *MockIndexer) GetNativeTokenBalance(ctx context.Context, accountAddress *string) (*NativeTokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNativeTokenBalance", ctx, accountAddress)
	ret0, _ := ret[0].(*NativeTokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNativeTokenBalance indicates an expected call of GetNativeTokenBalance.
func (mr *MockIndexerMockRecorder) GetNativeTokenBalance(ctx, accountAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNativeTokenBalance", reflect.TypeOf((*MockIndexer)(nil).GetNativeTokenBalance), ctx, accountAddress)
}

// GetOrderbookOrders mocks base method.
func (m *MockIndexer) GetOrderbookOrders(ctx context.Context, page *Page, orderbookContractAddress, collectionAddress string, currencyAddresses []string, filter *OrderbookOrderFilter, orderStatuses []OrderStatus, filters []*OrderbookOrderFilter, beforeExpiryTimestamp, blockNumberAfter, createdAtAfter int64) (*Page, []*OrderbookOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderbookOrders", ctx, page, orderbookContractAddress, collectionAddress, currencyAddresses, filter, orderStatuses, filters, beforeExpiryTimestamp, blockNumberAfter, createdAtAfter)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*OrderbookOrder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderbookOrders indicates an expected call of GetOrderbookOrders.
func (mr *MockIndexerMockRecorder) GetOrderbookOrders(ctx, page, orderbookContractAddress, collectionAddress, currencyAddresses, filter, orderStatuses, filters, beforeExpiryTimestamp, blockNumberAfter, createdAtAfter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderbookOrders", reflect.TypeOf((*MockIndexer)(nil).GetOrderbookOrders), ctx, page, orderbookContractAddress, collectionAddress, currencyAddresses, filter, orderStatuses, filters, beforeExpiryTimestamp, blockNumberAfter, createdAtAfter)
}

// GetTokenBalances mocks base method.
func (m *MockIndexer) GetTokenBalances(ctx context.Context, accountAddress, contractAddress, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalances", ctx, accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*TokenBalance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenBalances indicates an expected call of GetTokenBalances.
func (mr *MockIndexerMockRecorder) GetTokenBalances(ctx, accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalances", reflect.TypeOf((*MockIndexer)(nil).GetTokenBalances), ctx, accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page)
}

// GetTokenBalancesByContract mocks base method.
func (m *MockIndexer) GetTokenBalancesByContract(ctx context.Context, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalancesByContract", ctx, filter, omitMetadata, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*TokenBalance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenBalancesByContract indicates an expected call of GetTokenBalancesByContract.
func (mr *MockIndexerMockRecorder) GetTokenBalancesByContract(ctx, filter, omitMetadata, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalancesByContract", reflect.TypeOf((*MockIndexer)(nil).GetTokenBalancesByContract), ctx, filter, omitMetadata, page)
}

// GetTokenBalancesDetails mocks base method.
func (m *MockIndexer) GetTokenBalancesDetails(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalancesDetails", ctx, filter, omitMetadata, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*NativeTokenBalance)
	ret2, _ := ret[2].([]*TokenBalance)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenBalancesDetails indicates an expected call of GetTokenBalancesDetails.
func (mr *MockIndexerMockRecorder) GetTokenBalancesDetails(ctx, filter, omitMetadata, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalancesDetails", reflect.TypeOf((*MockIndexer)(nil).GetTokenBalancesDetails), ctx, filter, omitMetadata, page)
}

// GetTokenBalancesSummary mocks base method.
func (m *MockIndexer) GetTokenBalancesSummary(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalancesSummary", ctx, filter, omitMetadata, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*NativeTokenBalance)
	ret2, _ := ret[2].([]*TokenBalance)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenBalancesSummary indicates an expected call of GetTokenBalancesSummary.
func (mr *MockIndexerMockRecorder) GetTokenBalancesSummary(ctx, filter, omitMetadata, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalancesSummary", reflect.TypeOf((*MockIndexer)(nil).GetTokenBalancesSummary), ctx, filter, omitMetadata, page)
}

// GetTokenIDRanges mocks base method.
func (m *MockIndexer) GetTokenIDRanges(ctx context.Context, contractAddress string) (ContractType, []*TokenIDRange, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenIDRanges", ctx, contractAddress)
	ret0, _ := ret[0].(ContractType)
	ret1, _ := ret[1].([]*TokenIDRange)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenIDRanges indicates an expected call of GetTokenIDRanges.
func (mr *MockIndexerMockRecorder) GetTokenIDRanges(ctx, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenIDRanges", reflect.TypeOf((*MockIndexer)(nil).GetTokenIDRanges), ctx, contractAddress)
}

// GetTokenIDs mocks base method.
func (m *MockIndexer) GetTokenIDs(ctx context.Context, contractAddress string, page *Page) (*Page, ContractType, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenIDs", ctx, contractAddress, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(ContractType)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenIDs indicates an expected call of GetTokenIDs.
func (mr *MockIndexerMockRecorder) GetTokenIDs(ctx, contractAddress, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenIDs", reflect.TypeOf((*MockIndexer)(nil).GetTokenIDs), ctx, contractAddress, page)
}

// GetTokenSupplies mocks base method.
func (m *MockIndexer) GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSupplies", ctx, contractAddress, includeMetadata, metadataOptions, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(ContractType)
	ret2, _ := ret[2].([]*TokenSupply)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenSupplies indicates an expected call of GetTokenSupplies.
func (mr *MockIndexerMockRecorder) GetTokenSupplies(ctx, contractAddress, includeMetadata, metadataOptions, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSupplies", reflect.TypeOf((*MockIndexer)(nil).GetTokenSupplies), ctx, contractAddress, includeMetadata, metadataOptions, page)
}

// GetTokenSuppliesMap mocks base method.
func (m *MockIndexer) GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSuppliesMap", ctx, tokenMap, includeMetadata, metadataOptions)
	ret0, _ := ret[0].(map[string][]*TokenSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenSuppliesMap indicates an expected call of GetTokenSuppliesMap.
func (mr *MockIndexerMockRecorder) GetTokenSuppliesMap(ctx, tokenMap, includeMetadata, metadataOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSuppliesMap", reflect.TypeOf((*MockIndexer)(nil).GetTokenSuppliesMap), ctx, tokenMap, includeMetadata, metadataOptions)
}

// GetTopOrders mocks base method.
func (m *MockIndexer) GetTopOrders(ctx context.Context, orderbookContractAddress, collectionAddress string, currencyAddresses, tokenIDs []string, isListing bool, priceSort SortOrder, excludeUser *string) ([]*OrderbookOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopOrders", ctx, orderbookContractAddress, collectionAddress, currencyAddresses, tokenIDs, isListing, priceSort, excludeUser)
	ret0, _ := ret[0].([]*OrderbookOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopOrders indicates an expected call of GetTopOrders.
func (mr *MockIndexerMockRecorder) GetTopOrders(ctx, orderbookContractAddress, collectionAddress, currencyAddresses, tokenIDs, isListing, priceSort, excludeUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopOrders", reflect.TypeOf((*MockIndexer)(nil).GetTopOrders), ctx, orderbookContractAddress, collectionAddress, currencyAddresses, tokenIDs, isListing, priceSort, excludeUser)
}

// GetTransactionHistory mocks base method.
func (m *MockIndexer) GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, filter, page, includeMetadata, metadataOptions)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*Transaction)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockIndexerMockRecorder) GetTransactionHistory(ctx, filter, page, includeMetadata, metadataOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockIndexer)(nil).GetTransactionHistory), ctx, filter, page, includeMetadata, metadataOptions)
}

// GetWebhookListener mocks base method.
func (m *MockIndexer) GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookListener", ctx, id, projectId)
	ret0, _ := ret[0].(*WebhookListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookListener indicates an expected call of GetWebhookListener.
func (mr *MockIndexerMockRecorder) GetWebhookListener(ctx, id, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookListener", reflect.TypeOf((*MockIndexer)(nil).GetWebhookListener), ctx, id, projectId)
}

// PauseAllWebhookListeners mocks base method.
func (m *MockIndexer) PauseAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseAllWebhookListeners", ctx, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseAllWebhookListeners indicates an expected call of PauseAllWebhookListeners.
func (mr *MockIndexerMockRecorder) PauseAllWebhookListeners(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAllWebhookListeners", reflect.TypeOf((*MockIndexer)(nil).PauseAllWebhookListeners), ctx, projectId)
}

// Ping mocks base method.
func (m *MockIndexer) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockIndexerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIndexer)(nil).Ping), ctx)
}

// RemoveAllWebhookListeners mocks base method.
func (m *MockIndexer) RemoveAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllWebhookListeners", ctx, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAllWebhookListeners indicates an expected call of RemoveAllWebhookListeners.
func (mr *MockIndexerMockRecorder) RemoveAllWebhookListeners(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllWebhookListeners", reflect.TypeOf((*MockIndexer)(nil).RemoveAllWebhookListeners), ctx, projectId)
}

// RemoveWebhookListener mocks base method.
func (m *MockIndexer) RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWebhookListener", ctx, id, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWebhookListener indicates an expected call of RemoveWebhookListener.
func (mr *MockIndexerMockRecorder) RemoveWebhookListener(ctx, id, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWebhookListener", reflect.TypeOf((*MockIndexer)(nil).RemoveWebhookListener), ctx, id, projectId)
}

// ResumeAllWebhookListeners mocks base method.
func (m *MockIndexer) ResumeAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeAllWebhookListeners", ctx, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeAllWebhookListeners indicates an expected call of ResumeAllWebhookListeners.
func (mr *MockIndexerMockRecorder) ResumeAllWebhookListeners(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAllWebhookListeners", reflect.TypeOf((*MockIndexer)(nil).ResumeAllWebhookListeners), ctx, projectId)
}

// RuntimeStatus mocks base method.
func (m *MockIndexer) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeStatus", ctx)
	ret0, _ := ret[0].(*RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeStatus indicates an expected call of RuntimeStatus.
func (mr *MockIndexerMockRecorder) RuntimeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeStatus", reflect.TypeOf((*MockIndexer)(nil).RuntimeStatus), ctx)
}

// SubscribeBalanceUpdates mocks base method.
func (m *MockIndexer) SubscribeBalanceUpdates(ctx context.Context, contractAddress string, stream SubscribeBalanceUpdatesStreamWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeBalanceUpdates", ctx, contractAddress, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeBalanceUpdates indicates an expected call of SubscribeBalanceUpdates.
func (mr *MockIndexerMockRecorder) SubscribeBalanceUpdates(ctx, contractAddress, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBalanceUpdates", reflect.TypeOf((*MockIndexer)(nil).SubscribeBalanceUpdates), ctx, contractAddress, stream)
}

// SubscribeEvents mocks base method.
func (m *MockIndexer) SubscribeEvents(ctx context.Context, filter *EventFilter, stream SubscribeEventsStreamWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", ctx, filter, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockIndexerMockRecorder) SubscribeEvents(ctx, filter, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockIndexer)(nil).SubscribeEvents), ctx, filter, stream)
}

// SubscribeReceipts mocks base method.
func (m *MockIndexer) SubscribeReceipts(ctx context.Context, filter *TransactionFilter, stream SubscribeReceiptsStreamWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeReceipts", ctx, filter, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeReceipts indicates an expected call of SubscribeReceipts.
func (mr *MockIndexerMockRecorder) SubscribeReceipts(ctx, filter, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeReceipts", reflect.TypeOf((*MockIndexer)(nil).SubscribeReceipts), ctx, filter, stream)
}

// SyncBalance mocks base method.
func (m *MockIndexer) SyncBalance(ctx context.Context, accountAddress, contractAddress string, tokenID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncBalance", ctx, accountAddress, contractAddress, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncBalance indicates an expected call of SyncBalance.
func (mr *MockIndexerMockRecorder) SyncBalance(ctx, accountAddress, contractAddress, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncBalance", reflect.TypeOf((*MockIndexer)(nil).SyncBalance), ctx, accountAddress, contractAddress, tokenID)
}

// ToggleWebhookListener mocks base method.
func (m *MockIndexer) ToggleWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleWebhookListener", ctx, id, projectId)
	ret0, _ := ret[0].(*WebhookListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleWebhookListener indicates an expected call of ToggleWebhookListener.
func (mr *MockIndexerMockRecorder) ToggleWebhookListener(ctx, id, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleWebhookListener", reflect.TypeOf((*MockIndexer)(nil).ToggleWebhookListener), ctx, id, projectId)
}

// UpdateWebhookListener mocks base method.
func (m *MockIndexer) UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookListener", ctx, listener, projectId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhookListener indicates an expected call of UpdateWebhookListener.
func (mr *MockIndexerMockRecorder) UpdateWebhookListener(ctx, listener, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookListener", reflect.TypeOf((*MockIndexer)(nil).UpdateWebhookListener), ctx, listener, projectId)
}

// Version mocks base method.
func (m *MockIndexer) Version(ctx context.Context) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockIndexerMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIndexer)(nil).Version), ctx)
}
