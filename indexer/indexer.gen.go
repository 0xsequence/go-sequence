// sequence-indexer v0.4.0 945bc862897c9fded75dba5ba75ceaad31efa116
// --
// Code generated by webrpc-gen@v0.16.0 with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=indexer.ridl -target=golang -pkg=proto -server -client -out=./indexer.gen.go
package indexer

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/0xsequence/go-sequence/lib/prototyp"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.4.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "945bc862897c9fded75dba5ba75ceaad31efa116"
}

//
// Common types
//

// ContractInfo is RPC type for responding to clients that represents
// the contract-level metadata.
type ContractInfo struct {
	ChainID      uint64                  `json:"chainId" cbor:"-"`
	Address      string                  `json:"address" cbor:"-"`
	Name         string                  `json:"name" cbor:"-"`
	Type         string                  `json:"type" cbor:"-"`
	Symbol       string                  `json:"symbol" cbor:"-"`
	Decimals     *uint64                 `json:"decimals,omitempty" cbor:"-"`
	LogoURI      string                  `json:"logoURI,omitempty" cbor:"-"`
	Deployed     bool                    `json:"deployed" cbor:"-"`
	BytecodeHash prototyp.Hash           `json:"bytecodeHash" cbor:"-"`
	Extensions   *ContractInfoExtensions `json:"extensions" cbor:"-"`
	ContentHash  uint64                  `json:"-" cbor:"-"`
	UpdatedAt    time.Time               `json:"updatedAt" cbor:"-"`
}

type ContractInfoExtensions struct {
	Link          string `json:"link" cbor:"-"`
	Description   string `json:"description" cbor:"-"`
	OgImage       string `json:"ogImage" cbor:"-"`
	OriginChainID uint64 `json:"originChainId" cbor:"-"`
	OriginAddress string `json:"originAddress" cbor:"-"`
	Blacklist     bool   `json:"blacklist,omitempty" cbor:"-"`
	Verified      bool   `json:"verified" cbor:"-"`
	VerifiedBy    string `json:"verifiedBy,omitempty" cbor:"-"`
}

// TokenMetadata based on 721/1155 standards , as well including some
// fields which are used by OpenSea.
// TokenMetadata is RPC type for responding to clients that represents
// the token-level metadata.
type TokenMetadata struct {
	TokenID string `json:"tokenId" cbor:"-"`
	// NOTE : we've removed the contractAddress from here , its not relevant , and its
	// more confusing then anything else.
	// - contractAddress : string
	// + go.field.type = prototyp.Hash
	// + go.tag.json = contractAddress , omitempty
	// + go.tag.cbor = -
	Name        string `json:"name" cbor:"-"`
	Description string `json:"description" cbor:"-"`
	// url
	Image string `json:"image" cbor:"-"`
	// non-standard fields we've added for Sequence. Others should adopt
	// these too and we should prompt , similar to how ` image` field works.
	// url
	Video string `json:"video,omitempty" cbor:"-"`
	// url
	Audio      string                 `json:"audio,omitempty" cbor:"-"`
	Properties map[string]interface{} `json:"properties" cbor:"-"`
	// OpenSea fields
	// see https : / / docs.opensea.io/docs/metadata-standards
	// NOTE : its a bit unfortunate OpenSea didn't use camelCase , and
	// also introduces ' attributes ' when ' properties ' is actually the correct property name.
	// TODO : we could smooth this out / normalize it , but we can leave it for now.
	Attributes      []map[string]interface{} `json:"attributes" cbor:"-"`
	ImageData       string                   `json:"image_data,omitempty" cbor:"-"`
	ExternalUrl     string                   `json:"external_url,omitempty" cbor:"-"`
	BackgroundColor string                   `json:"background_color,omitempty" cbor:"-"`
	AnimationUrl    string                   `json:"animation_url,omitempty" cbor:"-"`
	// Misc
	// decimals is deprecated , but still used by some
	Decimals  *uint64   `json:"decimals,omitempty" cbor:"-"`
	UpdatedAt time.Time `json:"updatedAt" cbor:"-"`
	// Assets associated to this token metadata
	Assets []*Asset `json:"assets,omitempty" cbor:"-"`
}

// Asset is a database type used by ' collections ' to record static assets for
// a particular ' token ' for the token metadata.
// db table : assets
type Asset struct {
	// asset id
	ID uint64 `json:"id" db:"id,omitempty"`
	// collection id associated to this asset
	CollectionID uint64 `json:"collectionId" db:"collection_id"`
	// token id associated to this collection
	TokenID prototyp.BigInt `json:"tokenId" db:"token_id"`
	// url where we can view the asset contents
	// ie. https : / / metadata.sequence.app/projects/1/collections/1/tokens/1/image
	URL string `json:"url" db:"-"`
	// metadata field related to TokenMetadata , some field names :
	// [ ' image ' , ' video ' , ' audio ' , ' animation_url ' , . . . ]
	MetadataField string `json:"metadataField,omitempty" db:"metadata_field"`
	// asset details
	Filename  string    `json:"filename,omitempty" db:"filename"`
	Filesize  uint32    `json:"filesize,omitempty" db:"filesize"`
	MimeType  string    `json:"mimeType,omitempty" db:"mime_type"`
	Width     *uint16   `json:"width,omitempty" db:"width"`
	Height    *uint16   `json:"height,omitempty" db:"height"`
	UpdatedAt time.Time `json:"updatedAt" db:"updated_at"`
}

type ContractType uint8

const (
	ContractType_UNKNOWN         ContractType = 0
	ContractType_NATIVE          ContractType = 1
	ContractType_ERC20           ContractType = 2
	ContractType_ERC721          ContractType = 3
	ContractType_ERC1155         ContractType = 4
	ContractType_SEQUENCE_WALLET ContractType = 5
	ContractType_ERC20_BRIDGE    ContractType = 6
	ContractType_ERC721_BRIDGE   ContractType = 7
	ContractType_ERC1155_BRIDGE  ContractType = 8
	ContractType_SEQ_MARKETPLACE ContractType = 9
)

var ContractType_name = map[uint8]string{
	0: "UNKNOWN",
	1: "NATIVE",
	2: "ERC20",
	3: "ERC721",
	4: "ERC1155",
	5: "SEQUENCE_WALLET",
	6: "ERC20_BRIDGE",
	7: "ERC721_BRIDGE",
	8: "ERC1155_BRIDGE",
	9: "SEQ_MARKETPLACE",
}

var ContractType_value = map[string]uint8{
	"UNKNOWN":         0,
	"NATIVE":          1,
	"ERC20":           2,
	"ERC721":          3,
	"ERC1155":         4,
	"SEQUENCE_WALLET": 5,
	"ERC20_BRIDGE":    6,
	"ERC721_BRIDGE":   7,
	"ERC1155_BRIDGE":  8,
	"SEQ_MARKETPLACE": 9,
}

func (x ContractType) String() string {
	return ContractType_name[uint8(x)]
}

func (x ContractType) MarshalText() ([]byte, error) {
	return []byte(ContractType_name[uint8(x)]), nil
}

func (x *ContractType) UnmarshalText(b []byte) error {
	*x = ContractType(ContractType_value[string(b)])
	return nil
}

func (x *ContractType) Is(values ...ContractType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type EventLogType uint8

const (
	EventLogType_UNKNOWN       EventLogType = 0
	EventLogType_BLOCK_ADDED   EventLogType = 1
	EventLogType_BLOCK_REMOVED EventLogType = 2
)

var EventLogType_name = map[uint8]string{
	0: "UNKNOWN",
	1: "BLOCK_ADDED",
	2: "BLOCK_REMOVED",
}

var EventLogType_value = map[string]uint8{
	"UNKNOWN":       0,
	"BLOCK_ADDED":   1,
	"BLOCK_REMOVED": 2,
}

func (x EventLogType) String() string {
	return EventLogType_name[uint8(x)]
}

func (x EventLogType) MarshalText() ([]byte, error) {
	return []byte(EventLogType_name[uint8(x)]), nil
}

func (x *EventLogType) UnmarshalText(b []byte) error {
	*x = EventLogType(EventLogType_value[string(b)])
	return nil
}

func (x *EventLogType) Is(values ...EventLogType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type EventLogDataType uint8

const (
	EventLogDataType_UNKNOWN               EventLogDataType = 0
	EventLogDataType_TOKEN_TRANSFER        EventLogDataType = 1
	EventLogDataType_NATIVE_TOKEN_TRANSFER EventLogDataType = 2
	EventLogDataType_SEQUENCE_TXN          EventLogDataType = 3
)

var EventLogDataType_name = map[uint8]string{
	0: "UNKNOWN",
	1: "TOKEN_TRANSFER",
	2: "NATIVE_TOKEN_TRANSFER",
	3: "SEQUENCE_TXN",
}

var EventLogDataType_value = map[string]uint8{
	"UNKNOWN":               0,
	"TOKEN_TRANSFER":        1,
	"NATIVE_TOKEN_TRANSFER": 2,
	"SEQUENCE_TXN":          3,
}

func (x EventLogDataType) String() string {
	return EventLogDataType_name[uint8(x)]
}

func (x EventLogDataType) MarshalText() ([]byte, error) {
	return []byte(EventLogDataType_name[uint8(x)]), nil
}

func (x *EventLogDataType) UnmarshalText(b []byte) error {
	*x = EventLogDataType(EventLogDataType_value[string(b)])
	return nil
}

func (x *EventLogDataType) Is(values ...EventLogDataType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type OrderStatus uint32

const (
	OrderStatus_OPEN      OrderStatus = 0
	OrderStatus_CLOSED    OrderStatus = 1
	OrderStatus_CANCELLED OrderStatus = 2
)

var OrderStatus_name = map[uint32]string{
	0: "OPEN",
	1: "CLOSED",
	2: "CANCELLED",
}

var OrderStatus_value = map[string]uint32{
	"OPEN":      0,
	"CLOSED":    1,
	"CANCELLED": 2,
}

func (x OrderStatus) String() string {
	return OrderStatus_name[uint32(x)]
}

func (x OrderStatus) MarshalText() ([]byte, error) {
	return []byte(OrderStatus_name[uint32(x)]), nil
}

func (x *OrderStatus) UnmarshalText(b []byte) error {
	*x = OrderStatus(OrderStatus_value[string(b)])
	return nil
}

func (x *OrderStatus) Is(values ...OrderStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type TxnTransferType uint32

const (
	TxnTransferType_UNKNOWN TxnTransferType = 0
	TxnTransferType_SEND    TxnTransferType = 1
	TxnTransferType_RECEIVE TxnTransferType = 2
)

var TxnTransferType_name = map[uint32]string{
	0: "UNKNOWN",
	1: "SEND",
	2: "RECEIVE",
}

var TxnTransferType_value = map[string]uint32{
	"UNKNOWN": 0,
	"SEND":    1,
	"RECEIVE": 2,
}

func (x TxnTransferType) String() string {
	return TxnTransferType_name[uint32(x)]
}

func (x TxnTransferType) MarshalText() ([]byte, error) {
	return []byte(TxnTransferType_name[uint32(x)]), nil
}

func (x *TxnTransferType) UnmarshalText(b []byte) error {
	*x = TxnTransferType(TxnTransferType_value[string(b)])
	return nil
}

func (x *TxnTransferType) Is(values ...TxnTransferType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type TransactionStatus uint32

const (
	TransactionStatus_FAILED     TransactionStatus = 0
	TransactionStatus_SUCCESSFUL TransactionStatus = 1
)

var TransactionStatus_name = map[uint32]string{
	0: "FAILED",
	1: "SUCCESSFUL",
}

var TransactionStatus_value = map[string]uint32{
	"FAILED":     0,
	"SUCCESSFUL": 1,
}

func (x TransactionStatus) String() string {
	return TransactionStatus_name[uint32(x)]
}

func (x TransactionStatus) MarshalText() ([]byte, error) {
	return []byte(TransactionStatus_name[uint32(x)]), nil
}

func (x *TransactionStatus) UnmarshalText(b []byte) error {
	*x = TransactionStatus(TransactionStatus_value[string(b)])
	return nil
}

func (x *TransactionStatus) Is(values ...TransactionStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type TransactionType uint32

const (
	TransactionType_LegacyTxnType     TransactionType = 0
	TransactionType_AccessListTxnType TransactionType = 1
	TransactionType_DynamicFeeTxnType TransactionType = 2
)

var TransactionType_name = map[uint32]string{
	0: "LegacyTxnType",
	1: "AccessListTxnType",
	2: "DynamicFeeTxnType",
}

var TransactionType_value = map[string]uint32{
	"LegacyTxnType":     0,
	"AccessListTxnType": 1,
	"DynamicFeeTxnType": 2,
}

func (x TransactionType) String() string {
	return TransactionType_name[uint32(x)]
}

func (x TransactionType) MarshalText() ([]byte, error) {
	return []byte(TransactionType_name[uint32(x)]), nil
}

func (x *TransactionType) UnmarshalText(b []byte) error {
	*x = TransactionType(TransactionType_value[string(b)])
	return nil
}

func (x *TransactionType) Is(values ...TransactionType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type SortOrder uint32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

var SortOrder_name = map[uint32]string{
	0: "DESC",
	1: "ASC",
}

var SortOrder_value = map[string]uint32{
	"DESC": 0,
	"ASC":  1,
}

func (x SortOrder) String() string {
	return SortOrder_name[uint32(x)]
}

func (x SortOrder) MarshalText() ([]byte, error) {
	return []byte(SortOrder_name[uint32(x)]), nil
}

func (x *SortOrder) UnmarshalText(b []byte) error {
	*x = SortOrder(SortOrder_value[string(b)])
	return nil
}

func (x *SortOrder) Is(values ...SortOrder) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type Version struct {
	WebrpcVersion string `json:"webrpcVersion"`
	SchemaVersion string `json:"schemaVersion"`
	SchemaHash    string `json:"schemaHash"`
	AppVersion    string `json:"appVersion"`
}

type RuntimeStatus struct {
	// overall status , true/false
	HealthOK       bool           `json:"healthOK"`
	IndexerEnabled bool           `json:"indexerEnabled"`
	StartTime      time.Time      `json:"startTime"`
	Uptime         uint64         `json:"uptime"`
	Ver            string         `json:"ver"`
	Branch         string         `json:"branch"`
	CommitHash     string         `json:"commitHash"`
	ChainID        uint64         `json:"chainID"`
	Checks         *RuntimeChecks `json:"checks"`
}

type WALWriterRuntimeStatus struct {
	HealthOK          bool      `json:"healthOK"`
	StartTime         time.Time `json:"startTime"`
	Uptime            uint64    `json:"uptime"`
	Ver               string    `json:"ver"`
	Branch            string    `json:"branch"`
	CommitHash        string    `json:"commitHash"`
	ChainID           uint64    `json:"chainID"`
	PercentWALWritten float64   `json:"percentWALWritten"`
}

type RuntimeChecks struct {
	Running               bool         `json:"running"`
	CgoEnabled            bool         `json:"cgoEnabled"`
	QuotaControlEnabled   bool         `json:"quotaControlEnabled"`
	SyncMode              string       `json:"syncMode"`
	PercentIndexed        float64      `json:"percentIndexed"`
	LastBlockNum          uint64       `json:"lastBlockNum"`
	LastBlockNumWithState uint64       `json:"lastBlockNumWithState"`
	BloomStatus           *BloomStatus `json:"bloomStatus"`
	Bond                  *Bond        `json:"bond"`
	DiskUsage             *DiskUsage   `json:"diskUsage"`
}

type DiskUsage struct {
	HumanReadable string            `json:"humanReadable"`
	Used          uint64            `json:"used"`
	Size          uint64            `json:"size"`
	Percent       float32           `json:"percent"`
	Dirs          map[string]string `json:"dirs"`
}

type Bond struct {
	Pebble                     *PebbleMetrics `json:"pebble"`
	EstimatedDiskUsagePerTable interface{}    `json:"estimatedDiskUsagePerTable"`
	EstimatedDiskUsageTotal    string         `json:"estimatedDiskUsageTotal"`
}

type PebbleMetrics struct {
	CompactionCount           int64  `json:"compactionCount"`
	CompactionEstimatedDebt   uint64 `json:"compactionEstimatedDebt"`
	CompactionInProgressBytes int64  `json:"compactionInProgressBytes"`
	CompactionNumInProgress   int64  `json:"compactionNumInProgress"`
	CompactionMarkedFiles     int    `json:"compactionMarkedFiles"`
}

type BloomStatus struct {
	Enabled              bool   `json:"enabled"`
	Initialized          bool   `json:"initialized"`
	BloomInitElapsedTime string `json:"bloomInitElapsedTime"`
}

type EtherBalance struct {
	AccountAddress prototyp.Hash `json:"accountAddress" cbor:"-"`
	// ETH balance in wei
	BalanceWei prototyp.BigInt `json:"balanceWei" cbor:"-"`
}

type IndexState struct {
	ChainID       prototyp.BigInt `json:"chainId" cbor:"chain_id,extension"`
	LastBlockNum  uint64          `json:"lastBlockNum" cbor:"last_block_num"`
	LastBlockHash prototyp.Hash   `json:"lastBlockHash" cbor:"last_block_hash,extension"`
}

type IndexedBlock struct {
	BlockNumber    uint64        `json:"blockNumber" cbor:"1"`
	BlockShortHash prototyp.Hash `json:"blockShortHash" cbor:"2,extension"`
}

type TxnData struct {
	From  prototyp.Hash   `json:"from" cbor:"from"`
	To    prototyp.Hash   `json:"to" cbor:"to"`
	Value prototyp.BigInt `json:"value" cbor:"value"`
}

type EventLog struct {
	ID              uint64           `json:"id" cbor:"id,omitempty"`
	Type            EventLogType     `json:"type" cbor:"type"`
	BlockNumber     uint64           `json:"blockNumber" cbor:"block_num"`
	BlockHash       prototyp.Hash    `json:"blockHash" cbor:"block_hash,extension"`
	ParentBlockHash prototyp.Hash    `json:"parentBlockHash" cbor:"parent_block_hash,extension" db:"parent_block_hash"`
	ContractAddress prototyp.Hash    `json:"contractAddress" cbor:"contract_address,extension"`
	ContractType    ContractType     `json:"contractType" cbor:"contract_type"`
	TxnHash         prototyp.Hash    `json:"txnHash" cbor:"txn_hash,extension"`
	TxnIndex        uint             `json:"txnIndex" cbor:"txn_index"`
	TxnData         TxnData          `json:"txnData" cbor:"txn_data"`
	TxnLogIndex     uint             `json:"txnLogIndex" cbor:"txn_log_index"`
	LogDataType     EventLogDataType `json:"logDataType" cbor:"log_data_type"`
	TS              time.Time        `json:"ts" cbor:"ts"`
	// - logData : map < string , any >
	// + go.field.type = json.RawMessage
	LogData string `json:"logData" cbor:"log_data"`
}

// Token Balances
type TokenBalance struct {
	ContractType    ContractType       `json:"contractType" cbor:"2,omitempty"`
	ContractAddress prototyp.Hash      `json:"contractAddress" cbor:"1,extension"`
	AccountAddress  prototyp.HashMaybe `json:"accountAddress,omitempty" cbor:"3,extension,omitempty"`
	TokenID         prototyp.BigInt    `json:"tokenID,omitempty" cbor:"4,extension"`
	Balance         prototyp.BigInt    `json:"balance" cbor:"5,extension"`
	BlockHash       prototyp.Hash      `json:"blockHash,omitempty" cbor:"6,extension"`
	BlockNumber     uint64             `json:"blockNumber,omitempty" cbor:"7"`
	// included to remind the receiver of network source
	ChainID      uint64 `json:"chainId" cbor:"-"`
	IsNFTSummary bool   `json:"-" cbor:"9"`
	// NOTE : this value is fetched + cached from the Sequence Metadata microservice.
	// we do not persist it in the indexer database.
	ContractInfo  *ContractInfo  `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata *TokenMetadata `json:"tokenMetadata,omitempty" cbor:"-"`
}

type OrderbookOrder struct {
	OrderID                  prototyp.BigInt `json:"orderId" cbor:"1,extension"`
	TokenContract            prototyp.Hash   `json:"tokenContract" cbor:"2,extension"`
	TokenID                  prototyp.BigInt `json:"tokenId" cbor:"3,extension"`
	IsListing                bool            `json:"isListing" cbor:"4,extension"`
	Quantity                 prototyp.BigInt `json:"quantity" cbor:"5,extension"`
	QuantityRemaining        prototyp.BigInt `json:"quantityRemaining" cbor:"6,extension"`
	CurrencyAddress          prototyp.Hash   `json:"currencyAddress" cbor:"7,extension"`
	PricePerToken            prototyp.BigInt `json:"pricePerToken" cbor:"8,extension"`
	Expiry                   prototyp.BigInt `json:"expiry" cbor:"9,extension"`
	OrderStatus              OrderStatus     `json:"orderStatus" cbor:"10,extension"`
	CreatedBy                prototyp.Hash   `json:"createdBy" cbor:"11,extension"`
	CreatedAt                uint64          `json:"createdAt" cbor:"12,extension"`
	OrderbookContractAddress prototyp.Hash   `json:"orderbookContractAddress" cbor:"13,extension"`
}

type OrderbookOrderFilter struct {
	IsListing          *bool    `json:"isListing" cbor:"1,extension"`
	UserAddress        *string  `json:"userAddress" cbor:"2,extension"`
	TokenIDs           []string `json:"tokenIds" cbor:"3,extension"`
	ExcludeUserAddress *string  `json:"excludeUserAddress" cbor:"4,extension"`
}

// Token History
type TokenHistory struct {
	BlockNumber     uint64        `json:"blockNumber" cbor:"1"`
	BlockHash       prototyp.Hash `json:"blockHash" cbor:"2,extension"`
	AccountAddress  prototyp.Hash `json:"accountAddress" cbor:"3,extension"`
	ContractAddress prototyp.Hash `json:"contractAddress" cbor:"4,extension"`
	ContractType    ContractType  `json:"contractType" cbor:"5"`
	FromAddress     prototyp.Hash `json:"fromAddress" cbor:"6,extension"`
	ToAddress       prototyp.Hash `json:"toAddress" cbor:"7,extension"`
	TxnHash         prototyp.Hash `json:"txnHash" cbor:"8,extension"`
	TxnIndex        uint          `json:"txnIndex" cbor:"9"`
	TxnLogIndex     uint          `json:"txnLogIndex" cbor:"a"`
	// deprecated in favour of TokenIDs and Amounts
	LogData  string            `json:"logData" cbor:"b"`
	TokenIDs []prototyp.BigInt `json:"tokenIDs" cbor:"d,extension"`
	Amounts  []prototyp.BigInt `json:"Amounts" cbor:"e,extension"`
	TS       time.Time         `json:"ts" cbor:"c"`
}

type TokenSupply struct {
	TokenID prototyp.BigInt `json:"tokenID,omitempty" cbor:"token_id,extension"`
	Supply  prototyp.BigInt `json:"supply" cbor:"supply,extension"`
	// included to remind the receiver of network source
	ChainID uint64 `json:"chainId" cbor:"-"`
	// NOTE : this value is fetched + cached from the Sequence Metadata microservice.
	// we do not persist it in the indexer database.
	ContractInfo  *ContractInfo  `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata *TokenMetadata `json:"tokenMetadata,omitempty" cbor:"-"`
}

// TODO : review this type , etc.. we might need a ' raw ' piece of data too..
type Transaction struct {
	TxnHash     prototyp.Hash  `json:"txnHash" cbor:"1,extension"`
	BlockNumber uint64         `json:"blockNumber" cbor:"2"`
	BlockHash   prototyp.Hash  `json:"blockHash" cbor:"3,extension"`
	ChainID     uint64         `json:"chainId" cbor:"4"`
	MetaTxnID   *string        `json:"metaTxnID" cbor:"5"`
	Transfers   []*TxnTransfer `json:"transfers" cbor:"6"`
	// TODO : below are related to above users ? and contracts ? but , we dont use these , as they're inside of TxnTransfer
	// - accounts : [ ] string
	// + go.field.type = [ ] prototyp.Hash
	// - contracts : [ ] string
	// + go.field.type = [ ] prototyp.Hash
	Timestamp *time.Time `json:"timestamp" cbor:"7" db:"ts,omitempty"`
}

// - BRIDGE_DEPOSIT
// - BRIDGE_WITHDRAW
// - BURN
type TxnTransfer struct {
	TransferType    TxnTransferType           `json:"transferType" cbor:"1"`
	ContractAddress prototyp.Hash             `json:"contractAddress" cbor:"2,extension"`
	ContractType    ContractType              `json:"contractType" cbor:"3"`
	From            prototyp.Hash             `json:"from" cbor:"4,extension"`
	To              prototyp.Hash             `json:"to" cbor:"5,extension"`
	TokenIds        []prototyp.BigInt         `json:"tokenIds,omitempty" cbor:"6,extension"`
	Amounts         []prototyp.BigInt         `json:"amounts" cbor:"7,extension"`
	LogIndex        uint                      `json:"logIndex" cbor:"8"`
	ContractInfo    *ContractInfo             `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata   map[string]*TokenMetadata `json:"tokenMetadata,omitempty" cbor:"-"`
}

// TODO : rename to TxnHistoryFilter
type TransactionHistoryFilter struct {
	// short-hand for accountAddresses [ ]
	AccountAddress *string `json:"accountAddress"`
	// short-hand for contractAddresses [ ]
	ContractAddress   *string  `json:"contractAddress"`
	AccountAddresses  []string `json:"accountAddresses"`
	ContractAddresses []string `json:"contractAddresses"`
	// TODO : rename to txnHashes
	TransactionHashes []string `json:"transactionHashes"`
	// TODO : rename to metaTxnIds
	MetaTransactionIDs []string         `json:"metaTransactionIDs"`
	FromBlock          *uint64          `json:"fromBlock"`
	ToBlock            *uint64          `json:"toBlock"`
	TokenID            *prototyp.BigInt `json:"tokenID"`
}

// TODO : rename to TransactionFilter
type Filter struct {
	TxnHash         *prototyp.Hash `json:"txnHash"`
	From            *prototyp.Hash `json:"from"`
	To              *prototyp.Hash `json:"to"`
	ContractAddress *prototyp.Hash `json:"contractAddress"`
	// TODO : rename to topicHash
	LogTopic *prototyp.Hash `json:"logTopic"`
}

type TransactionReceipt struct {
	TxnHash     prototyp.Hash     `json:"txnHash"`
	TxnStatus   TransactionStatus `json:"txnStatus"`
	TxnIndex    uint64            `json:"txnIndex"`
	TxnType     TransactionType   `json:"txnType"`
	BlockHash   prototyp.Hash     `json:"blockHash"`
	BlockNumber uint64            `json:"blockNumber"`
	GasUsed     uint64            `json:"gasUsed"`
	// number as string , since its BigInt . .
	EffectiveGasPrice prototyp.BigInt   `json:"effectiveGasPrice"`
	From              prototyp.Hash     `json:"from"`
	To                prototyp.Hash     `json:"to"`
	Logs              []*TransactionLog `json:"logs"`
	Final             bool              `json:"final"`
	Reorged           bool              `json:"reorged"`
}

type TransactionLog struct {
	ContractAddress prototyp.Hash   `json:"contractAddress"`
	Topics          []prototyp.Hash `json:"topics"`
	Data            string          `json:"data"`
	Index           uint64          `json:"index"`
}

// Page represents a results page. This can be used both to request a page and
// to store the state of a page.
type Page struct {
	// Numbered pages : Page number , this is multiplied by the value of the < pageSize > parameter.
	Page *uint32 `json:"page,omitempty"`
	// Cursor : column to compare before/after to
	Column *string `json:"column,omitempty"`
	// Cursor : return column < before - include to get previous page
	Before *interface{} `json:"before,omitempty"`
	// Cursor : return column > after - include to get next page
	After *interface{} `json:"after,omitempty"`
	// Sorting filter
	Sort []*SortBy `json:"sort,omitempty"`
	// Number of items per page
	PageSize *uint32 `json:"pageSize,omitempty"`
	// Indicates if there are more results available
	More *bool `json:"more,omitempty"`
}

type SortBy struct {
	Column string    `json:"column"`
	Order  SortOrder `json:"order"`
}

type WebhookListener struct {
	Id        uint64              `json:"id" db:"id"`
	ProjectID uint64              `json:"projectID" db:"project_id"`
	Url       string              `json:"url" db:"url"`
	Filters   *WebhookEventFilter `json:"filters" db:"filters"`
	UpdatedAt time.Time           `json:"updatedAt" db:"updated_at"`
}

type WebhookEventFilter struct {
	ContractAddresses []prototyp.Hash   `json:"contractAddresses"`
	TokenIDs          []prototyp.BigInt `json:"tokenIDs"`
	Accounts          []prototyp.Hash   `json:"accounts"`
}

type MetadataOptions struct {
	VerifiedOnly     bool            `json:"verifiedOnly"`
	UnverifiedOnly   bool            `json:"unverifiedOnly"`
	IncludeContracts []prototyp.Hash `json:"includeContracts"`
}

var WebRPCServices = map[string][]string{
	"Indexer": {
		"Ping",
		"Version",
		"RuntimeStatus",
		"GetChainID",
		"GetEtherBalance",
		"GetTokenBalances",
		"GetTokenSupplies",
		"GetTokenSuppliesMap",
		"GetBalanceUpdates",
		"GetTransactionHistory",
		"SyncBalance",
		"FetchTransactionReceipt",
		"GetOrderbookOrders",
		"GetTopOrders",
		"FetchTransactionReceiptWithFilter",
		"GetAllWebhookListeners",
		"GetWebhookListener",
		"AddWebhookListener",
		"UpdateWebhookListener",
		"RemoveWebhookListener",
	},
}

//
// Server types
//

type Indexer interface {
	Ping(ctx context.Context) (bool, error)
	Version(ctx context.Context) (*Version, error)
	RuntimeStatus(ctx context.Context) (*RuntimeStatus, error)
	GetChainID(ctx context.Context) (uint64, error)
	GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error)
	GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error)
	GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error)
	GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error)
	GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error)
	GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error)
	SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error
	FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error)
	GetOrderbookOrders(ctx context.Context, page *Page, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, filters []*OrderbookOrderFilter, orderStatuses []*OrderStatus, beforeExpiryTimestamp int64) (*Page, []*OrderbookOrder, error)
	GetTopOrders(ctx context.Context, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, tokenIDs []string, isListing bool, priceSort SortOrder, excludeUser *string) ([]*OrderbookOrder, error)
	FetchTransactionReceiptWithFilter(ctx context.Context, filter *Filter, maxBlockWait *int) (*TransactionReceipt, error)
	GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error)
	GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	AddWebhookListener(ctx context.Context, url string, filters *WebhookEventFilter, projectId *uint64) (bool, *WebhookListener, error)
	UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error)
	RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error)
}

//
// Client types
//

type IndexerClient interface {
	Ping(ctx context.Context) (bool, error)
	Version(ctx context.Context) (*Version, error)
	RuntimeStatus(ctx context.Context) (*RuntimeStatus, error)
	GetChainID(ctx context.Context) (uint64, error)
	GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error)
	GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error)
	GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error)
	GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error)
	GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error)
	GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error)
	SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error
	FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error)
	GetOrderbookOrders(ctx context.Context, page *Page, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, filters []*OrderbookOrderFilter, orderStatuses []*OrderStatus, beforeExpiryTimestamp int64) (*Page, []*OrderbookOrder, error)
	GetTopOrders(ctx context.Context, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, tokenIDs []string, isListing bool, priceSort SortOrder, excludeUser *string) ([]*OrderbookOrder, error)
	FetchTransactionReceiptWithFilter(ctx context.Context, filter *Filter, maxBlockWait *int) (*TransactionReceipt, error)
	GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error)
	GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	AddWebhookListener(ctx context.Context, url string, filters *WebhookEventFilter, projectId *uint64) (bool, *WebhookListener, error)
	UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error)
	RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error)
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type indexerServer struct {
	Indexer
	OnError func(r *http.Request, rpcErr *WebRPCError)
}

func NewIndexerServer(svc Indexer) *indexerServer {
	return &indexerServer{
		Indexer: svc,
	}
}

func (s *indexerServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCause(fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "Indexer")

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/Indexer/Ping":
		handler = s.servePingJSON
	case "/rpc/Indexer/Version":
		handler = s.serveVersionJSON
	case "/rpc/Indexer/RuntimeStatus":
		handler = s.serveRuntimeStatusJSON
	case "/rpc/Indexer/GetChainID":
		handler = s.serveGetChainIDJSON
	case "/rpc/Indexer/GetEtherBalance":
		handler = s.serveGetEtherBalanceJSON
	case "/rpc/Indexer/GetTokenBalances":
		handler = s.serveGetTokenBalancesJSON
	case "/rpc/Indexer/GetTokenSupplies":
		handler = s.serveGetTokenSuppliesJSON
	case "/rpc/Indexer/GetTokenSuppliesMap":
		handler = s.serveGetTokenSuppliesMapJSON
	case "/rpc/Indexer/GetBalanceUpdates":
		handler = s.serveGetBalanceUpdatesJSON
	case "/rpc/Indexer/GetTransactionHistory":
		handler = s.serveGetTransactionHistoryJSON
	case "/rpc/Indexer/SyncBalance":
		handler = s.serveSyncBalanceJSON
	case "/rpc/Indexer/FetchTransactionReceipt":
		handler = s.serveFetchTransactionReceiptJSON
	case "/rpc/Indexer/GetOrderbookOrders":
		handler = s.serveGetOrderbookOrdersJSON
	case "/rpc/Indexer/GetTopOrders":
		handler = s.serveGetTopOrdersJSON
	case "/rpc/Indexer/FetchTransactionReceiptWithFilter":
		handler = s.serveFetchTransactionReceiptWithFilterJSON
	case "/rpc/Indexer/GetAllWebhookListeners":
		handler = s.serveGetAllWebhookListenersJSON
	case "/rpc/Indexer/GetWebhookListener":
		handler = s.serveGetWebhookListenerJSON
	case "/rpc/Indexer/AddWebhookListener":
		handler = s.serveAddWebhookListenerJSON
	case "/rpc/Indexer/UpdateWebhookListener":
		handler = s.serveUpdateWebhookListenerJSON
	case "/rpc/Indexer/RemoveWebhookListener":
		handler = s.serveRemoveWebhookListenerJSON
	default:
		err := ErrWebrpcBadRoute.WithCause(fmt.Errorf("no handler for path %q", r.URL.Path))
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCause(fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCause(fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *indexerServer) servePingJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Ping")

	// Call service method implementation.
	ret0, err := s.Indexer.Ping(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveVersionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Version")

	// Call service method implementation.
	ret0, err := s.Indexer.Version(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Version `json:"version"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveRuntimeStatusJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RuntimeStatus")

	// Call service method implementation.
	ret0, err := s.Indexer.RuntimeStatus(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *RuntimeStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetChainIDJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetChainID")

	// Call service method implementation.
	ret0, err := s.Indexer.GetChainID(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 uint64 `json:"chainID"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetEtherBalanceJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetEtherBalance")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *string `json:"accountAddress"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.GetEtherBalance(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *EtherBalance `json:"balance"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetTokenBalancesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTokenBalances")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *string          `json:"accountAddress"`
		Arg1 *string          `json:"contractAddress"`
		Arg2 *string          `json:"tokenID"`
		Arg3 *bool            `json:"includeMetadata"`
		Arg4 *MetadataOptions `json:"metadataOptions"`
		Arg5 *bool            `json:"includeCollectionTokens"`
		Arg6 *Page            `json:"page"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.Indexer.GetTokenBalances(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3, reqPayload.Arg4, reqPayload.Arg5, reqPayload.Arg6)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetTokenSuppliesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTokenSupplies")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string           `json:"contractAddress"`
		Arg1 *bool            `json:"includeMetadata"`
		Arg2 *MetadataOptions `json:"metadataOptions"`
		Arg3 *Page            `json:"page"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, ret2, err := s.Indexer.GetTokenSupplies(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Page          `json:"page"`
		Ret1 ContractType   `json:"contractType"`
		Ret2 []*TokenSupply `json:"tokenIDs"`
	}{ret0, ret1, ret2}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetTokenSuppliesMapJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTokenSuppliesMap")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 map[string][]string `json:"tokenMap"`
		Arg1 *bool               `json:"includeMetadata"`
		Arg2 *MetadataOptions    `json:"metadataOptions"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.GetTokenSuppliesMap(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 map[string][]*TokenSupply `json:"supplies"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetBalanceUpdatesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetBalanceUpdates")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string  `json:"contractAddress"`
		Arg1 uint64  `json:"lastBlockNumber"`
		Arg2 *string `json:"lastBlockHash"`
		Arg3 *Page   `json:"page"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.Indexer.GetBalanceUpdates(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetTransactionHistoryJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTransactionHistory")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *TransactionHistoryFilter `json:"filter"`
		Arg1 *Page                     `json:"page"`
		Arg2 *bool                     `json:"includeMetadata"`
		Arg3 *MetadataOptions          `json:"metadataOptions"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.Indexer.GetTransactionHistory(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Page          `json:"page"`
		Ret1 []*Transaction `json:"transactions"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveSyncBalanceJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SyncBalance")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string  `json:"accountAddress"`
		Arg1 string  `json:"contractAddress"`
		Arg2 *string `json:"tokenID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	err = s.Indexer.SyncBalance(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *indexerServer) serveFetchTransactionReceiptJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "FetchTransactionReceipt")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"txnHash"`
		Arg1 *int   `json:"maxBlockWait"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.FetchTransactionReceipt(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetOrderbookOrdersJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetOrderbookOrders")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Page                   `json:"page"`
		Arg1 string                  `json:"orderbookContractAddress"`
		Arg2 string                  `json:"collectionAddress"`
		Arg3 []string                `json:"currencyAddresses"`
		Arg4 []*OrderbookOrderFilter `json:"filters"`
		Arg5 []*OrderStatus          `json:"orderStatuses"`
		Arg6 int64                   `json:"beforeExpiryTimestamp"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.Indexer.GetOrderbookOrders(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3, reqPayload.Arg4, reqPayload.Arg5, reqPayload.Arg6)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Page             `json:"page"`
		Ret1 []*OrderbookOrder `json:"orders"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetTopOrdersJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTopOrders")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string    `json:"orderbookContractAddress"`
		Arg1 string    `json:"collectionAddress"`
		Arg2 []string  `json:"currencyAddresses"`
		Arg3 []string  `json:"tokenIDs"`
		Arg4 bool      `json:"isListing"`
		Arg5 SortOrder `json:"priceSort"`
		Arg6 *string   `json:"excludeUser"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.GetTopOrders(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3, reqPayload.Arg4, reqPayload.Arg5, reqPayload.Arg6)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*OrderbookOrder `json:"orders"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveFetchTransactionReceiptWithFilterJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "FetchTransactionReceiptWithFilter")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Filter `json:"filter"`
		Arg1 *int    `json:"maxBlockWait"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.FetchTransactionReceiptWithFilter(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetAllWebhookListenersJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAllWebhookListeners")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *uint64 `json:"projectId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.GetAllWebhookListeners(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*WebhookListener `json:"listeners"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveGetWebhookListenerJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetWebhookListener")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.GetWebhookListener(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *WebhookListener `json:"listener"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveAddWebhookListenerJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "AddWebhookListener")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string              `json:"url"`
		Arg1 *WebhookEventFilter `json:"filters"`
		Arg2 *uint64             `json:"projectId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.Indexer.AddWebhookListener(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool             `json:"status"`
		Ret1 *WebhookListener `json:"listener"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveUpdateWebhookListenerJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateWebhookListener")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *WebhookListener `json:"listener"`
		Arg1 *uint64          `json:"projectId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.UpdateWebhookListener(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) serveRemoveWebhookListenerJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RemoveWebhookListener")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.Indexer.RemoveWebhookListener(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *indexerServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(WebRPCError)
	if !ok {
		rpcErr = ErrWebrpcEndpoint.WithCause(err)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Client
//

const IndexerPathPrefix = "/rpc/Indexer/"

type indexerClient struct {
	client HTTPClient
	urls   [20]string
}

func NewIndexerClient(addr string, client HTTPClient) IndexerClient {
	prefix := urlBase(addr) + IndexerPathPrefix
	urls := [20]string{
		prefix + "Ping",
		prefix + "Version",
		prefix + "RuntimeStatus",
		prefix + "GetChainID",
		prefix + "GetEtherBalance",
		prefix + "GetTokenBalances",
		prefix + "GetTokenSupplies",
		prefix + "GetTokenSuppliesMap",
		prefix + "GetBalanceUpdates",
		prefix + "GetTransactionHistory",
		prefix + "SyncBalance",
		prefix + "FetchTransactionReceipt",
		prefix + "GetOrderbookOrders",
		prefix + "GetTopOrders",
		prefix + "FetchTransactionReceiptWithFilter",
		prefix + "GetAllWebhookListeners",
		prefix + "GetWebhookListener",
		prefix + "AddWebhookListener",
		prefix + "UpdateWebhookListener",
		prefix + "RemoveWebhookListener",
	}
	return &indexerClient{
		client: client,
		urls:   urls,
	}
}

func (c *indexerClient) Ping(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) Version(ctx context.Context) (*Version, error) {
	out := struct {
		Ret0 *Version `json:"version"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	out := struct {
		Ret0 *RuntimeStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetChainID(ctx context.Context) (uint64, error) {
	out := struct {
		Ret0 uint64 `json:"chainID"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error) {
	in := struct {
		Arg0 *string `json:"accountAddress"`
	}{accountAddress}
	out := struct {
		Ret0 *EtherBalance `json:"balance"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error) {
	in := struct {
		Arg0 *string          `json:"accountAddress"`
		Arg1 *string          `json:"contractAddress"`
		Arg2 *string          `json:"tokenID"`
		Arg3 *bool            `json:"includeMetadata"`
		Arg4 *MetadataOptions `json:"metadataOptions"`
		Arg5 *bool            `json:"includeCollectionTokens"`
		Arg6 *Page            `json:"page"`
	}{accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page}
	out := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error) {
	in := struct {
		Arg0 string           `json:"contractAddress"`
		Arg1 *bool            `json:"includeMetadata"`
		Arg2 *MetadataOptions `json:"metadataOptions"`
		Arg3 *Page            `json:"page"`
	}{contractAddress, includeMetadata, metadataOptions, page}
	out := struct {
		Ret0 *Page          `json:"page"`
		Ret1 ContractType   `json:"contractType"`
		Ret2 []*TokenSupply `json:"tokenIDs"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error) {
	in := struct {
		Arg0 map[string][]string `json:"tokenMap"`
		Arg1 *bool               `json:"includeMetadata"`
		Arg2 *MetadataOptions    `json:"metadataOptions"`
	}{tokenMap, includeMetadata, metadataOptions}
	out := struct {
		Ret0 map[string][]*TokenSupply `json:"supplies"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error) {
	in := struct {
		Arg0 string  `json:"contractAddress"`
		Arg1 uint64  `json:"lastBlockNumber"`
		Arg2 *string `json:"lastBlockHash"`
		Arg3 *Page   `json:"page"`
	}{contractAddress, lastBlockNumber, lastBlockHash, page}
	out := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error) {
	in := struct {
		Arg0 *TransactionHistoryFilter `json:"filter"`
		Arg1 *Page                     `json:"page"`
		Arg2 *bool                     `json:"includeMetadata"`
		Arg3 *MetadataOptions          `json:"metadataOptions"`
	}{filter, page, includeMetadata, metadataOptions}
	out := struct {
		Ret0 *Page          `json:"page"`
		Ret1 []*Transaction `json:"transactions"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[9], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error {
	in := struct {
		Arg0 string  `json:"accountAddress"`
		Arg1 string  `json:"contractAddress"`
		Arg2 *string `json:"tokenID"`
	}{accountAddress, contractAddress, tokenID}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[10], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return err
}

func (c *indexerClient) FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error) {
	in := struct {
		Arg0 string `json:"txnHash"`
		Arg1 *int   `json:"maxBlockWait"`
	}{txnHash, maxBlockWait}
	out := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[11], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetOrderbookOrders(ctx context.Context, page *Page, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, filters []*OrderbookOrderFilter, orderStatuses []*OrderStatus, beforeExpiryTimestamp int64) (*Page, []*OrderbookOrder, error) {
	in := struct {
		Arg0 *Page                   `json:"page"`
		Arg1 string                  `json:"orderbookContractAddress"`
		Arg2 string                  `json:"collectionAddress"`
		Arg3 []string                `json:"currencyAddresses"`
		Arg4 []*OrderbookOrderFilter `json:"filters"`
		Arg5 []*OrderStatus          `json:"orderStatuses"`
		Arg6 int64                   `json:"beforeExpiryTimestamp"`
	}{page, orderbookContractAddress, collectionAddress, currencyAddresses, filters, orderStatuses, beforeExpiryTimestamp}
	out := struct {
		Ret0 *Page             `json:"page"`
		Ret1 []*OrderbookOrder `json:"orders"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[12], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTopOrders(ctx context.Context, orderbookContractAddress string, collectionAddress string, currencyAddresses []string, tokenIDs []string, isListing bool, priceSort SortOrder, excludeUser *string) ([]*OrderbookOrder, error) {
	in := struct {
		Arg0 string    `json:"orderbookContractAddress"`
		Arg1 string    `json:"collectionAddress"`
		Arg2 []string  `json:"currencyAddresses"`
		Arg3 []string  `json:"tokenIDs"`
		Arg4 bool      `json:"isListing"`
		Arg5 SortOrder `json:"priceSort"`
		Arg6 *string   `json:"excludeUser"`
	}{orderbookContractAddress, collectionAddress, currencyAddresses, tokenIDs, isListing, priceSort, excludeUser}
	out := struct {
		Ret0 []*OrderbookOrder `json:"orders"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[13], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) FetchTransactionReceiptWithFilter(ctx context.Context, filter *Filter, maxBlockWait *int) (*TransactionReceipt, error) {
	in := struct {
		Arg0 *Filter `json:"filter"`
		Arg1 *int    `json:"maxBlockWait"`
	}{filter, maxBlockWait}
	out := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[14], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error) {
	in := struct {
		Arg0 *uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 []*WebhookListener `json:"listeners"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[15], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error) {
	in := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{id, projectId}
	out := struct {
		Ret0 *WebhookListener `json:"listener"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[16], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) AddWebhookListener(ctx context.Context, url string, filters *WebhookEventFilter, projectId *uint64) (bool, *WebhookListener, error) {
	in := struct {
		Arg0 string              `json:"url"`
		Arg1 *WebhookEventFilter `json:"filters"`
		Arg2 *uint64             `json:"projectId"`
	}{url, filters, projectId}
	out := struct {
		Ret0 bool             `json:"status"`
		Ret1 *WebhookListener `json:"listener"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[17], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 *WebhookListener `json:"listener"`
		Arg1 *uint64          `json:"projectId"`
	}{listener, projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[18], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{id, projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[19], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequestWithContext(ctx, "POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doHTTPRequest is common code to make a request to the remote service.
func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to marshal JSON body: %w", err))
	}
	if err = ctx.Err(); err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("aborted because context was done: %w", err))
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("could not build request: %w", err))
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(err)
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read server error response body: %w", err))
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal server error: %w", err))
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return nil, rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read response body: %w", err))
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal JSON response body: %w", err))
		}
	}

	return resp, nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPResponseWriterCtxKey       = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}
func ResponseWriterFromContext(ctx context.Context) http.ResponseWriter {
	w, _ := ctx.Value(HTTPResponseWriterCtxKey).(http.ResponseWriter)
	return w
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint           = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed      = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute           = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod          = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest         = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse        = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic        = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError      = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
	ErrWebrpcClientDisconnected = WebRPCError{Code: -8, Name: "WebrpcClientDisconnected", Message: "client disconnected", HTTPStatus: 400}
	ErrWebrpcStreamLost         = WebRPCError{Code: -9, Name: "WebrpcStreamLost", Message: "stream lost", HTTPStatus: 400}
	ErrWebrpcStreamFinished     = WebRPCError{Code: -10, Name: "WebrpcStreamFinished", Message: "stream finished", HTTPStatus: 200}
)

// Schema errors
var (
	ErrUnauthorized       = WebRPCError{Code: 1000, Name: "Unauthorized", Message: "Unauthorized access", HTTPStatus: 401}
	ErrPermissionDenied   = WebRPCError{Code: 1001, Name: "PermissionDenied", Message: "Permission denied", HTTPStatus: 403}
	ErrSessionExpired     = WebRPCError{Code: 1002, Name: "SessionExpired", Message: "Session expired", HTTPStatus: 403}
	ErrMethodNotFound     = WebRPCError{Code: 1003, Name: "MethodNotFound", Message: "Method not found", HTTPStatus: 404}
	ErrRequestConflict    = WebRPCError{Code: 1004, Name: "RequestConflict", Message: "Conflict with target resource", HTTPStatus: 409}
	ErrAborted            = WebRPCError{Code: 1005, Name: "Aborted", Message: "Request aborted", HTTPStatus: 400}
	ErrTimeout            = WebRPCError{Code: 2000, Name: "Timeout", Message: "Request timed out", HTTPStatus: 408}
	ErrInvalidArgument    = WebRPCError{Code: 2001, Name: "InvalidArgument", Message: "Invalid argument", HTTPStatus: 400}
	ErrUnavailable        = WebRPCError{Code: 2002, Name: "Unavailable", Message: "Unavailable resource", HTTPStatus: 400}
	ErrQueryFailed        = WebRPCError{Code: 2003, Name: "QueryFailed", Message: "Query failed", HTTPStatus: 400}
	ErrNotFound           = WebRPCError{Code: 3000, Name: "NotFound", Message: "Resource not found", HTTPStatus: 400}
	ErrProjectNotFound    = WebRPCError{Code: 3002, Name: "ProjectNotFound", Message: "Project not found", HTTPStatus: 400}
	ErrMetadataCallFailed = WebRPCError{Code: 3003, Name: "MetadataCallFailed", Message: "Metadata service call failed", HTTPStatus: 400}
)