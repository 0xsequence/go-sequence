// Code generated by MockGen. DO NOT EDIT.
// Source: ../metadata (interfaces: Metadata)
//
// Generated by this command:
//
//	mockgen -imports proto=../metadata -destination metadata.mock.go -package mock -mock_names Metadata=Metadata ../metadata Metadata
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	metadata "github.com/0xsequence/go-sequence/metadata"
	gomock "go.uber.org/mock/gomock"
)

// Metadata is a mock of Metadata interface.
type Metadata struct {
	ctrl     *gomock.Controller
	recorder *MetadataMockRecorder
	isgomock struct{}
}

// MetadataMockRecorder is the mock recorder for Metadata.
type MetadataMockRecorder struct {
	mock *Metadata
}

// NewMetadata creates a new mock instance.
func NewMetadata(ctrl *gomock.Controller) *Metadata {
	mock := &Metadata{ctrl: ctrl}
	mock.recorder = &MetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Metadata) EXPECT() *MetadataMockRecorder {
	return m.recorder
}

// AbortContractSync mocks base method.
func (m *Metadata) AbortContractSync(ctx context.Context, taskID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortContractSync", ctx, taskID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortContractSync indicates an expected call of AbortContractSync.
func (mr *MetadataMockRecorder) AbortContractSync(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortContractSync", reflect.TypeOf((*Metadata)(nil).AbortContractSync), ctx, taskID)
}

// AddContractToMintMonitor mocks base method.
func (m *Metadata) AddContractToMintMonitor(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContractToMintMonitor", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContractToMintMonitor indicates an expected call of AddContractToMintMonitor.
func (mr *MetadataMockRecorder) AddContractToMintMonitor(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContractToMintMonitor", reflect.TypeOf((*Metadata)(nil).AddContractToMintMonitor), ctx, chainID, contractAddress)
}

// CancelRefreshJob mocks base method.
func (m *Metadata) CancelRefreshJob(ctx context.Context, taskId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRefreshJob", ctx, taskId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRefreshJob indicates an expected call of CancelRefreshJob.
func (mr *MetadataMockRecorder) CancelRefreshJob(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRefreshJob", reflect.TypeOf((*Metadata)(nil).CancelRefreshJob), ctx, taskId)
}

// ContractSyncJobStatus mocks base method.
func (m *Metadata) ContractSyncJobStatus(ctx context.Context, taskID uint64) (*metadata.Task, *metadata.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractSyncJobStatus", ctx, taskID)
	ret0, _ := ret[0].(*metadata.Task)
	ret1, _ := ret[1].(*metadata.Task)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContractSyncJobStatus indicates an expected call of ContractSyncJobStatus.
func (mr *MetadataMockRecorder) ContractSyncJobStatus(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractSyncJobStatus", reflect.TypeOf((*Metadata)(nil).ContractSyncJobStatus), ctx, taskID)
}

// DirectoryGetCollections mocks base method.
func (m *Metadata) DirectoryGetCollections(ctx context.Context, chainId *uint64, includeTestnets, onlyFeatured *bool, page *metadata.Page) ([]*metadata.ContractInfo, *metadata.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectoryGetCollections", ctx, chainId, includeTestnets, onlyFeatured, page)
	ret0, _ := ret[0].([]*metadata.ContractInfo)
	ret1, _ := ret[1].(*metadata.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DirectoryGetCollections indicates an expected call of DirectoryGetCollections.
func (mr *MetadataMockRecorder) DirectoryGetCollections(ctx, chainId, includeTestnets, onlyFeatured, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryGetCollections", reflect.TypeOf((*Metadata)(nil).DirectoryGetCollections), ctx, chainId, includeTestnets, onlyFeatured, page)
}

// DirectoryGetNetworks mocks base method.
func (m *Metadata) DirectoryGetNetworks(ctx context.Context, includeTestnets, onlyFeatured *bool) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectoryGetNetworks", ctx, includeTestnets, onlyFeatured)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirectoryGetNetworks indicates an expected call of DirectoryGetNetworks.
func (mr *MetadataMockRecorder) DirectoryGetNetworks(ctx, includeTestnets, onlyFeatured any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryGetNetworks", reflect.TypeOf((*Metadata)(nil).DirectoryGetNetworks), ctx, includeTestnets, onlyFeatured)
}

// DirectorySearchCollections mocks base method.
func (m *Metadata) DirectorySearchCollections(ctx context.Context, query string, chainId *uint64, includeTestnets, onlyFeatured *bool, page *metadata.Page) ([]*metadata.ContractInfo, *metadata.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectorySearchCollections", ctx, query, chainId, includeTestnets, onlyFeatured, page)
	ret0, _ := ret[0].([]*metadata.ContractInfo)
	ret1, _ := ret[1].(*metadata.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DirectorySearchCollections indicates an expected call of DirectorySearchCollections.
func (mr *MetadataMockRecorder) DirectorySearchCollections(ctx, query, chainId, includeTestnets, onlyFeatured, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectorySearchCollections", reflect.TypeOf((*Metadata)(nil).DirectorySearchCollections), ctx, query, chainId, includeTestnets, onlyFeatured, page)
}

// EnqueueTokensForRefresh mocks base method.
func (m *Metadata) EnqueueTokensForRefresh(ctx context.Context, chainID, contractAddress string, tokenIDs []string, refreshAll *bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTokensForRefresh", ctx, chainID, contractAddress, tokenIDs, refreshAll)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueTokensForRefresh indicates an expected call of EnqueueTokensForRefresh.
func (mr *MetadataMockRecorder) EnqueueTokensForRefresh(ctx, chainID, contractAddress, tokenIDs, refreshAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTokensForRefresh", reflect.TypeOf((*Metadata)(nil).EnqueueTokensForRefresh), ctx, chainID, contractAddress, tokenIDs, refreshAll)
}

// GetContractInfo mocks base method.
func (m *Metadata) GetContractInfo(ctx context.Context, chainID, contractAddress string) (*metadata.ContractInfo, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfo", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(*metadata.ContractInfo)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractInfo indicates an expected call of GetContractInfo.
func (mr *MetadataMockRecorder) GetContractInfo(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfo", reflect.TypeOf((*Metadata)(nil).GetContractInfo), ctx, chainID, contractAddress)
}

// GetContractInfoBatch mocks base method.
func (m *Metadata) GetContractInfoBatch(ctx context.Context, chainID string, contractAddresses []string) (map[string]*metadata.ContractInfo, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfoBatch", ctx, chainID, contractAddresses)
	ret0, _ := ret[0].(map[string]*metadata.ContractInfo)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractInfoBatch indicates an expected call of GetContractInfoBatch.
func (mr *MetadataMockRecorder) GetContractInfoBatch(ctx, chainID, contractAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfoBatch", reflect.TypeOf((*Metadata)(nil).GetContractInfoBatch), ctx, chainID, contractAddresses)
}

// GetNiftyswapTokenQuantity mocks base method.
func (m *Metadata) GetNiftyswapTokenQuantity(ctx context.Context, chainID, contractAddress string, tokenIDs []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapTokenQuantity", ctx, chainID, contractAddress, tokenIDs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapTokenQuantity indicates an expected call of GetNiftyswapTokenQuantity.
func (mr *MetadataMockRecorder) GetNiftyswapTokenQuantity(ctx, chainID, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapTokenQuantity", reflect.TypeOf((*Metadata)(nil).GetNiftyswapTokenQuantity), ctx, chainID, contractAddress, tokenIDs)
}

// GetNiftyswapUnitPrices mocks base method.
func (m *Metadata) GetNiftyswapUnitPrices(ctx context.Context, chainID, contractAddress string, req *metadata.GetNiftyswapUnitPricesRequest, fresh bool) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapUnitPrices", ctx, chainID, contractAddress, req, fresh)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapUnitPrices indicates an expected call of GetNiftyswapUnitPrices.
func (mr *MetadataMockRecorder) GetNiftyswapUnitPrices(ctx, chainID, contractAddress, req, fresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapUnitPrices", reflect.TypeOf((*Metadata)(nil).GetNiftyswapUnitPrices), ctx, chainID, contractAddress, req, fresh)
}

// GetNiftyswapUnitPricesWithQuantities mocks base method.
func (m *Metadata) GetNiftyswapUnitPricesWithQuantities(ctx context.Context, chainID, contractAddress string, req *metadata.GetNiftyswapUnitPricesRequest, fresh bool) (map[string]*metadata.GetNiftyswapUnitPricesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapUnitPricesWithQuantities", ctx, chainID, contractAddress, req, fresh)
	ret0, _ := ret[0].(map[string]*metadata.GetNiftyswapUnitPricesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapUnitPricesWithQuantities indicates an expected call of GetNiftyswapUnitPricesWithQuantities.
func (mr *MetadataMockRecorder) GetNiftyswapUnitPricesWithQuantities(ctx, chainID, contractAddress, req, fresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapUnitPricesWithQuantities", reflect.TypeOf((*Metadata)(nil).GetNiftyswapUnitPricesWithQuantities), ctx, chainID, contractAddress, req, fresh)
}

// GetTask mocks base method.
func (m *Metadata) GetTask(ctx context.Context, taskId uint64) (*metadata.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskId)
	ret0, _ := ret[0].(*metadata.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MetadataMockRecorder) GetTask(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*Metadata)(nil).GetTask), ctx, taskId)
}

// GetTaskStatus mocks base method.
func (m *Metadata) GetTaskStatus(ctx context.Context, taskId uint64) (*metadata.TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, taskId)
	ret0, _ := ret[0].(*metadata.TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MetadataMockRecorder) GetTaskStatus(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*Metadata)(nil).GetTaskStatus), ctx, taskId)
}

// GetTokenMetadata mocks base method.
func (m *Metadata) GetTokenMetadata(ctx context.Context, chainID, contractAddress string, tokenIDs []string) ([]*metadata.TokenMetadata, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadata", ctx, chainID, contractAddress, tokenIDs)
	ret0, _ := ret[0].([]*metadata.TokenMetadata)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenMetadata indicates an expected call of GetTokenMetadata.
func (mr *MetadataMockRecorder) GetTokenMetadata(ctx, chainID, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadata", reflect.TypeOf((*Metadata)(nil).GetTokenMetadata), ctx, chainID, contractAddress, tokenIDs)
}

// GetTokenMetadataBatch mocks base method.
func (m *Metadata) GetTokenMetadataBatch(ctx context.Context, chainID string, contractTokenMap map[string][]string) (map[string][]*metadata.TokenMetadata, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadataBatch", ctx, chainID, contractTokenMap)
	ret0, _ := ret[0].(map[string][]*metadata.TokenMetadata)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenMetadataBatch indicates an expected call of GetTokenMetadataBatch.
func (mr *MetadataMockRecorder) GetTokenMetadataBatch(ctx, chainID, contractTokenMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadataBatch", reflect.TypeOf((*Metadata)(nil).GetTokenMetadataBatch), ctx, chainID, contractTokenMap)
}

// GetTokenRefreshResult mocks base method.
func (m *Metadata) GetTokenRefreshResult(ctx context.Context, taskId uint64) (*metadata.TaskStatus, map[string]bool, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRefreshResult", ctx, taskId)
	ret0, _ := ret[0].(*metadata.TaskStatus)
	ret1, _ := ret[1].(map[string]bool)
	ret2, _ := ret[2].(map[string]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenRefreshResult indicates an expected call of GetTokenRefreshResult.
func (mr *MetadataMockRecorder) GetTokenRefreshResult(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRefreshResult", reflect.TypeOf((*Metadata)(nil).GetTokenRefreshResult), ctx, taskId)
}

// GetTokenRefreshStatus mocks base method.
func (m *Metadata) GetTokenRefreshStatus(ctx context.Context, taskId uint64) (*metadata.TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRefreshStatus", ctx, taskId)
	ret0, _ := ret[0].(*metadata.TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenRefreshStatus indicates an expected call of GetTokenRefreshStatus.
func (mr *MetadataMockRecorder) GetTokenRefreshStatus(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRefreshStatus", reflect.TypeOf((*Metadata)(nil).GetTokenRefreshStatus), ctx, taskId)
}

// MintMonitorJobStatus mocks base method.
func (m *Metadata) MintMonitorJobStatus(ctx context.Context, chainID, contractAddress string) (*metadata.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintMonitorJobStatus", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(*metadata.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintMonitorJobStatus indicates an expected call of MintMonitorJobStatus.
func (mr *MetadataMockRecorder) MintMonitorJobStatus(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintMonitorJobStatus", reflect.TypeOf((*Metadata)(nil).MintMonitorJobStatus), ctx, chainID, contractAddress)
}

// MintMonitorTriggerJob mocks base method.
func (m *Metadata) MintMonitorTriggerJob(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintMonitorTriggerJob", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintMonitorTriggerJob indicates an expected call of MintMonitorTriggerJob.
func (mr *MetadataMockRecorder) MintMonitorTriggerJob(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintMonitorTriggerJob", reflect.TypeOf((*Metadata)(nil).MintMonitorTriggerJob), ctx, chainID, contractAddress)
}

// Ping mocks base method.
func (m *Metadata) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MetadataMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Metadata)(nil).Ping), ctx)
}

// RefreshAllContractTokens mocks base method.
func (m *Metadata) RefreshAllContractTokens(ctx context.Context, chainHandle, contractAddress string) (*uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAllContractTokens", ctx, chainHandle, contractAddress)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshAllContractTokens indicates an expected call of RefreshAllContractTokens.
func (mr *MetadataMockRecorder) RefreshAllContractTokens(ctx, chainHandle, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAllContractTokens", reflect.TypeOf((*Metadata)(nil).RefreshAllContractTokens), ctx, chainHandle, contractAddress)
}

// RefreshContractInfo mocks base method.
func (m *Metadata) RefreshContractInfo(ctx context.Context, chainHandle, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshContractInfo", ctx, chainHandle, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshContractInfo indicates an expected call of RefreshContractInfo.
func (mr *MetadataMockRecorder) RefreshContractInfo(ctx, chainHandle, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshContractInfo", reflect.TypeOf((*Metadata)(nil).RefreshContractInfo), ctx, chainHandle, contractAddress)
}

// RefreshContractTokens mocks base method.
func (m *Metadata) RefreshContractTokens(ctx context.Context, chainHandle, contractAddress string, tokenIDs []string) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshContractTokens", ctx, chainHandle, contractAddress, tokenIDs)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshContractTokens indicates an expected call of RefreshContractTokens.
func (mr *MetadataMockRecorder) RefreshContractTokens(ctx, chainHandle, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshContractTokens", reflect.TypeOf((*Metadata)(nil).RefreshContractTokens), ctx, chainHandle, contractAddress, tokenIDs)
}

// RefreshTokenMetadata mocks base method.
func (m *Metadata) RefreshTokenMetadata(ctx context.Context, chainID, contractAddress string, tokenIDs []string, refreshAll *bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenMetadata", ctx, chainID, contractAddress, tokenIDs, refreshAll)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenMetadata indicates an expected call of RefreshTokenMetadata.
func (mr *MetadataMockRecorder) RefreshTokenMetadata(ctx, chainID, contractAddress, tokenIDs, refreshAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenMetadata", reflect.TypeOf((*Metadata)(nil).RefreshTokenMetadata), ctx, chainID, contractAddress, tokenIDs, refreshAll)
}

// RemoveContractFromMintMonitor mocks base method.
func (m *Metadata) RemoveContractFromMintMonitor(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContractFromMintMonitor", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContractFromMintMonitor indicates an expected call of RemoveContractFromMintMonitor.
func (mr *MetadataMockRecorder) RemoveContractFromMintMonitor(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContractFromMintMonitor", reflect.TypeOf((*Metadata)(nil).RemoveContractFromMintMonitor), ctx, chainID, contractAddress)
}

// RuntimeStatus mocks base method.
func (m *Metadata) RuntimeStatus(ctx context.Context) (*metadata.RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeStatus", ctx)
	ret0, _ := ret[0].(*metadata.RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeStatus indicates an expected call of RuntimeStatus.
func (mr *MetadataMockRecorder) RuntimeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeStatus", reflect.TypeOf((*Metadata)(nil).RuntimeStatus), ctx)
}

// SearchContractInfo mocks base method.
func (m *Metadata) SearchContractInfo(ctx context.Context, contractAddress string) ([]*metadata.ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContractInfo", ctx, contractAddress)
	ret0, _ := ret[0].([]*metadata.ContractInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContractInfo indicates an expected call of SearchContractInfo.
func (mr *MetadataMockRecorder) SearchContractInfo(ctx, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContractInfo", reflect.TypeOf((*Metadata)(nil).SearchContractInfo), ctx, contractAddress)
}

// SearchContractInfoBatch mocks base method.
func (m *Metadata) SearchContractInfoBatch(ctx context.Context, contractAddresses []string) (map[string][]*metadata.ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContractInfoBatch", ctx, contractAddresses)
	ret0, _ := ret[0].(map[string][]*metadata.ContractInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContractInfoBatch indicates an expected call of SearchContractInfoBatch.
func (mr *MetadataMockRecorder) SearchContractInfoBatch(ctx, contractAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContractInfoBatch", reflect.TypeOf((*Metadata)(nil).SearchContractInfoBatch), ctx, contractAddresses)
}

// SearchContracts mocks base method.
func (m *Metadata) SearchContracts(ctx context.Context, q string, chainID *string, chainIDs []string, types []metadata.ContractType, page *metadata.Page) ([]*metadata.ContractInfo, *metadata.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContracts", ctx, q, chainID, chainIDs, types, page)
	ret0, _ := ret[0].([]*metadata.ContractInfo)
	ret1, _ := ret[1].(*metadata.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchContracts indicates an expected call of SearchContracts.
func (mr *MetadataMockRecorder) SearchContracts(ctx, q, chainID, chainIDs, types, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContracts", reflect.TypeOf((*Metadata)(nil).SearchContracts), ctx, q, chainID, chainIDs, types, page)
}

// SearchMetadata mocks base method.
func (m *Metadata) SearchMetadata(ctx context.Context, filter string, chainID *string, types []metadata.ContractType, excludeTokenMetadata *bool) ([]*metadata.TokenMetadata, []*metadata.ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMetadata", ctx, filter, chainID, types, excludeTokenMetadata)
	ret0, _ := ret[0].([]*metadata.TokenMetadata)
	ret1, _ := ret[1].([]*metadata.ContractInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMetadata indicates an expected call of SearchMetadata.
func (mr *MetadataMockRecorder) SearchMetadata(ctx, filter, chainID, types, excludeTokenMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMetadata", reflect.TypeOf((*Metadata)(nil).SearchMetadata), ctx, filter, chainID, types, excludeTokenMetadata)
}

// SearchTokenIDs mocks base method.
func (m *Metadata) SearchTokenIDs(ctx context.Context, chainID, contractAddress string, filter *metadata.Filter, page *metadata.Page) (*metadata.Page, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokenIDs", ctx, chainID, contractAddress, filter, page)
	ret0, _ := ret[0].(*metadata.Page)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokenIDs indicates an expected call of SearchTokenIDs.
func (mr *MetadataMockRecorder) SearchTokenIDs(ctx, chainID, contractAddress, filter, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokenIDs", reflect.TypeOf((*Metadata)(nil).SearchTokenIDs), ctx, chainID, contractAddress, filter, page)
}

// SearchTokenMetadata mocks base method.
func (m *Metadata) SearchTokenMetadata(ctx context.Context, chainID, contractAddress string, filter *metadata.Filter, page *metadata.Page) (*metadata.Page, []*metadata.TokenMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokenMetadata", ctx, chainID, contractAddress, filter, page)
	ret0, _ := ret[0].(*metadata.Page)
	ret1, _ := ret[1].([]*metadata.TokenMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokenMetadata indicates an expected call of SearchTokenMetadata.
func (mr *MetadataMockRecorder) SearchTokenMetadata(ctx, chainID, contractAddress, filter, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokenMetadata", reflect.TypeOf((*Metadata)(nil).SearchTokenMetadata), ctx, chainID, contractAddress, filter, page)
}

// SearchTokens mocks base method.
func (m *Metadata) SearchTokens(ctx context.Context, q string, chainID *string, page *metadata.Page) ([]*metadata.TokenMetadata, *metadata.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokens", ctx, q, chainID, page)
	ret0, _ := ret[0].([]*metadata.TokenMetadata)
	ret1, _ := ret[1].(*metadata.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokens indicates an expected call of SearchTokens.
func (mr *MetadataMockRecorder) SearchTokens(ctx, q, chainID, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokens", reflect.TypeOf((*Metadata)(nil).SearchTokens), ctx, q, chainID, page)
}

// SyncContractTokens mocks base method.
func (m *Metadata) SyncContractTokens(ctx context.Context, chainID, contractAddress string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncContractTokens", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncContractTokens indicates an expected call of SyncContractTokens.
func (mr *MetadataMockRecorder) SyncContractTokens(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncContractTokens", reflect.TypeOf((*Metadata)(nil).SyncContractTokens), ctx, chainID, contractAddress)
}

// TokenCollectionFilters mocks base method.
func (m *Metadata) TokenCollectionFilters(ctx context.Context, chainID, contractAddress string) ([]*metadata.PropertyFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenCollectionFilters", ctx, chainID, contractAddress)
	ret0, _ := ret[0].([]*metadata.PropertyFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenCollectionFilters indicates an expected call of TokenCollectionFilters.
func (mr *MetadataMockRecorder) TokenCollectionFilters(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenCollectionFilters", reflect.TypeOf((*Metadata)(nil).TokenCollectionFilters), ctx, chainID, contractAddress)
}

// Version mocks base method.
func (m *Metadata) Version(ctx context.Context) (*metadata.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(*metadata.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MetadataMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*Metadata)(nil).Version), ctx)
}
