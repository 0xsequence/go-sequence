// Code generated by MockGen. DO NOT EDIT.
// Source: ../api (interfaces: API)
//
// Generated by this command:
//
//	mockgen -destination api.mock.go -package mock -mock_names API=API ../api API
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/0xsequence/go-sequence/api"
	gomock "go.uber.org/mock/gomock"
)

// API is a mock of API interface.
type API struct {
	ctrl     *gomock.Controller
	recorder *APIMockRecorder
	isgomock struct{}
}

// APIMockRecorder is the mock recorder for API.
type APIMockRecorder struct {
	mock *API
}

// NewAPI creates a new mock instance.
func NewAPI(ctrl *gomock.Controller) *API {
	mock := &API{ctrl: ctrl}
	mock.recorder = &APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *API) EXPECT() *APIMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *API) AddFriend(ctx context.Context, friendAddress string, optionalNickname *string) (bool, *api.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", ctx, friendAddress, optionalNickname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddFriend indicates an expected call of AddFriend.
func (mr *APIMockRecorder) AddFriend(ctx, friendAddress, optionalNickname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*API)(nil).AddFriend), ctx, friendAddress, optionalNickname)
}

// AddOffchainInventory mocks base method.
func (m *API) AddOffchainInventory(ctx context.Context, inventory *api.OffchainInventory) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffchainInventory", ctx, inventory)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOffchainInventory indicates an expected call of AddOffchainInventory.
func (mr *APIMockRecorder) AddOffchainInventory(ctx, inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffchainInventory", reflect.TypeOf((*API)(nil).AddOffchainInventory), ctx, inventory)
}

// BlockNumberAtTime mocks base method.
func (m *API) BlockNumberAtTime(ctx context.Context, chainId uint64, timestamps []uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumberAtTime", ctx, chainId, timestamps)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumberAtTime indicates an expected call of BlockNumberAtTime.
func (mr *APIMockRecorder) BlockNumberAtTime(ctx, chainId, timestamps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumberAtTime", reflect.TypeOf((*API)(nil).BlockNumberAtTime), ctx, chainId, timestamps)
}

// CheckoutOptionsGetTransakContractID mocks base method.
func (m *API) CheckoutOptionsGetTransakContractID(ctx context.Context, chainId uint64, contractAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutOptionsGetTransakContractID", ctx, chainId, contractAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutOptionsGetTransakContractID indicates an expected call of CheckoutOptionsGetTransakContractID.
func (mr *APIMockRecorder) CheckoutOptionsGetTransakContractID(ctx, chainId, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutOptionsGetTransakContractID", reflect.TypeOf((*API)(nil).CheckoutOptionsGetTransakContractID), ctx, chainId, contractAddress)
}

// CheckoutOptionsSecondary mocks base method.
func (m *API) CheckoutOptionsSecondary(ctx context.Context, chainId uint64, wallet string, params []*api.SecondaryCheckoutOptionsParams) (*api.CheckoutOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutOptionsSecondary", ctx, chainId, wallet, params)
	ret0, _ := ret[0].(*api.CheckoutOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutOptionsSecondary indicates an expected call of CheckoutOptionsSecondary.
func (mr *APIMockRecorder) CheckoutOptionsSecondary(ctx, chainId, wallet, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutOptionsSecondary", reflect.TypeOf((*API)(nil).CheckoutOptionsSecondary), ctx, chainId, wallet, params)
}

// Clock mocks base method.
func (m *API) Clock(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clock", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clock indicates an expected call of Clock.
func (mr *APIMockRecorder) Clock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*API)(nil).Clock), ctx)
}

// ContractCall mocks base method.
func (m *API) ContractCall(ctx context.Context, chainID, contract, inputExpr, outputExpr string, args []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCall", ctx, chainID, contract, inputExpr, outputExpr, args)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractCall indicates an expected call of ContractCall.
func (mr *APIMockRecorder) ContractCall(ctx, chainID, contract, inputExpr, outputExpr, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCall", reflect.TypeOf((*API)(nil).ContractCall), ctx, chainID, contract, inputExpr, outputExpr, args)
}

// DecodeContractCall mocks base method.
func (m *API) DecodeContractCall(ctx context.Context, callData string) (*api.ContractCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeContractCall", ctx, callData)
	ret0, _ := ret[0].(*api.ContractCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeContractCall indicates an expected call of DecodeContractCall.
func (mr *APIMockRecorder) DecodeContractCall(ctx, callData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeContractCall", reflect.TypeOf((*API)(nil).DecodeContractCall), ctx, callData)
}

// DeleteOffchainInventory mocks base method.
func (m *API) DeleteOffchainInventory(ctx context.Context, inventoryId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffchainInventory", ctx, inventoryId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOffchainInventory indicates an expected call of DeleteOffchainInventory.
func (mr *APIMockRecorder) DeleteOffchainInventory(ctx, inventoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffchainInventory", reflect.TypeOf((*API)(nil).DeleteOffchainInventory), ctx, inventoryId)
}

// DeletePack mocks base method.
func (m *API) DeletePack(ctx context.Context, contractAddress string, chainId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePack", ctx, contractAddress, chainId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePack indicates an expected call of DeletePack.
func (mr *APIMockRecorder) DeletePack(ctx, contractAddress, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePack", reflect.TypeOf((*API)(nil).DeletePack), ctx, contractAddress, chainId)
}

// FriendList mocks base method.
func (m *API) FriendList(ctx context.Context, nickname *string, page *api.Page) (*api.Page, []*api.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendList", ctx, nickname, page)
	ret0, _ := ret[0].(*api.Page)
	ret1, _ := ret[1].([]*api.Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FriendList indicates an expected call of FriendList.
func (mr *APIMockRecorder) FriendList(ctx, nickname, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendList", reflect.TypeOf((*API)(nil).FriendList), ctx, nickname, page)
}

// GenerateWaaSVerificationURL mocks base method.
func (m *API) GenerateWaaSVerificationURL(ctx context.Context, walletAddress string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWaaSVerificationURL", ctx, walletAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateWaaSVerificationURL indicates an expected call of GenerateWaaSVerificationURL.
func (mr *APIMockRecorder) GenerateWaaSVerificationURL(ctx, walletAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWaaSVerificationURL", reflect.TypeOf((*API)(nil).GenerateWaaSVerificationURL), ctx, walletAddress)
}

// GetAuthToken mocks base method.
func (m *API) GetAuthToken(ctx context.Context, ewtString string, testnetMode *bool) (bool, string, string, *api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", ctx, ewtString, testnetMode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(*api.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *APIMockRecorder) GetAuthToken(ctx, ewtString, testnetMode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*API)(nil).GetAuthToken), ctx, ewtString, testnetMode)
}

// GetAuthToken2 mocks base method.
func (m *API) GetAuthToken2(ctx context.Context, ewtString, chainID string) (bool, string, string, *api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken2", ctx, ewtString, chainID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(*api.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthToken2 indicates an expected call of GetAuthToken2.
func (mr *APIMockRecorder) GetAuthToken2(ctx, ewtString, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken2", reflect.TypeOf((*API)(nil).GetAuthToken2), ctx, ewtString, chainID)
}

// GetCoinPrices mocks base method.
func (m *API) GetCoinPrices(ctx context.Context, tokens []*api.Token) ([]*api.TokenPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinPrices", ctx, tokens)
	ret0, _ := ret[0].([]*api.TokenPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinPrices indicates an expected call of GetCoinPrices.
func (mr *APIMockRecorder) GetCoinPrices(ctx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinPrices", reflect.TypeOf((*API)(nil).GetCoinPrices), ctx, tokens)
}

// GetCollectiblePrices mocks base method.
func (m *API) GetCollectiblePrices(ctx context.Context, tokens []*api.Token) ([]*api.TokenPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectiblePrices", ctx, tokens)
	ret0, _ := ret[0].([]*api.TokenPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectiblePrices indicates an expected call of GetCollectiblePrices.
func (mr *APIMockRecorder) GetCollectiblePrices(ctx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectiblePrices", reflect.TypeOf((*API)(nil).GetCollectiblePrices), ctx, tokens)
}

// GetExchangeRate mocks base method.
func (m *API) GetExchangeRate(ctx context.Context, toCurrency string) (*api.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, toCurrency)
	ret0, _ := ret[0].(*api.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *APIMockRecorder) GetExchangeRate(ctx, toCurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*API)(nil).GetExchangeRate), ctx, toCurrency)
}

// GetFriendByAddress mocks base method.
func (m *API) GetFriendByAddress(ctx context.Context, friendAddress string) (bool, *api.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendByAddress", ctx, friendAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendByAddress indicates an expected call of GetFriendByAddress.
func (mr *APIMockRecorder) GetFriendByAddress(ctx, friendAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendByAddress", reflect.TypeOf((*API)(nil).GetFriendByAddress), ctx, friendAddress)
}

// GetInviteInfo mocks base method.
func (m *API) GetInviteInfo(ctx context.Context) (*api.InviteInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteInfo", ctx)
	ret0, _ := ret[0].(*api.InviteInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteInfo indicates an expected call of GetInviteInfo.
func (mr *APIMockRecorder) GetInviteInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteInfo", reflect.TypeOf((*API)(nil).GetInviteInfo), ctx)
}

// GetLifiChains mocks base method.
func (m *API) GetLifiChains(ctx context.Context) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifiChains", ctx)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifiChains indicates an expected call of GetLifiChains.
func (mr *APIMockRecorder) GetLifiChains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifiChains", reflect.TypeOf((*API)(nil).GetLifiChains), ctx)
}

// GetLifiSwapQuote mocks base method.
func (m *API) GetLifiSwapQuote(ctx context.Context, params *api.GetLifiSwapQuoteParams) (*api.LifiSwapQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifiSwapQuote", ctx, params)
	ret0, _ := ret[0].(*api.LifiSwapQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifiSwapQuote indicates an expected call of GetLifiSwapQuote.
func (mr *APIMockRecorder) GetLifiSwapQuote(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifiSwapQuote", reflect.TypeOf((*API)(nil).GetLifiSwapQuote), ctx, params)
}

// GetLifiSwapRoutes mocks base method.
func (m *API) GetLifiSwapRoutes(ctx context.Context, chainId uint64, toTokenAddress string) ([]*api.LifiSwapRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifiSwapRoutes", ctx, chainId, toTokenAddress)
	ret0, _ := ret[0].([]*api.LifiSwapRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifiSwapRoutes indicates an expected call of GetLifiSwapRoutes.
func (mr *APIMockRecorder) GetLifiSwapRoutes(ctx, chainId, toTokenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifiSwapRoutes", reflect.TypeOf((*API)(nil).GetLifiSwapRoutes), ctx, chainId, toTokenAddress)
}

// GetLifiTokens mocks base method.
func (m *API) GetLifiTokens(ctx context.Context, chainIds []uint64) ([]*api.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifiTokens", ctx, chainIds)
	ret0, _ := ret[0].([]*api.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifiTokens indicates an expected call of GetLifiTokens.
func (mr *APIMockRecorder) GetLifiTokens(ctx, chainIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifiTokens", reflect.TypeOf((*API)(nil).GetLifiTokens), ctx, chainIds)
}

// GetLinkedWallets mocks base method.
func (m *API) GetLinkedWallets(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId string) ([]*api.LinkedWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedWallets", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId)
	ret0, _ := ret[0].([]*api.LinkedWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedWallets indicates an expected call of GetLinkedWallets.
func (mr *APIMockRecorder) GetLinkedWallets(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedWallets", reflect.TypeOf((*API)(nil).GetLinkedWallets), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId)
}

// GetMoonpayLink mocks base method.
func (m *API) GetMoonpayLink(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoonpayLink", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoonpayLink indicates an expected call of GetMoonpayLink.
func (mr *APIMockRecorder) GetMoonpayLink(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoonpayLink", reflect.TypeOf((*API)(nil).GetMoonpayLink), ctx, url)
}

// GetOffchainInventory mocks base method.
func (m *API) GetOffchainInventory(ctx context.Context, inventoryId uint64) (*api.OffchainInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffchainInventory", ctx, inventoryId)
	ret0, _ := ret[0].(*api.OffchainInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffchainInventory indicates an expected call of GetOffchainInventory.
func (mr *APIMockRecorder) GetOffchainInventory(ctx, inventoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffchainInventory", reflect.TypeOf((*API)(nil).GetOffchainInventory), ctx, inventoryId)
}

// GetPack mocks base method.
func (m *API) GetPack(ctx context.Context, contractAddress string, chainId uint64) (*api.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPack", ctx, contractAddress, chainId)
	ret0, _ := ret[0].(*api.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPack indicates an expected call of GetPack.
func (mr *APIMockRecorder) GetPack(ctx, contractAddress, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPack", reflect.TypeOf((*API)(nil).GetPack), ctx, contractAddress, chainId)
}

// GetPublicKey mocks base method.
func (m *API) GetPublicKey(ctx context.Context, id string) (*api.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, id)
	ret0, _ := ret[0].(*api.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *APIMockRecorder) GetPublicKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*API)(nil).GetPublicKey), ctx, id)
}

// GetSardineClientToken mocks base method.
func (m *API) GetSardineClientToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineClientToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineClientToken indicates an expected call of GetSardineClientToken.
func (mr *APIMockRecorder) GetSardineClientToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineClientToken", reflect.TypeOf((*API)(nil).GetSardineClientToken), ctx)
}

// GetSardineNFTCheckoutOrderStatus mocks base method.
func (m *API) GetSardineNFTCheckoutOrderStatus(ctx context.Context, orderId string) (*api.SardineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineNFTCheckoutOrderStatus", ctx, orderId)
	ret0, _ := ret[0].(*api.SardineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineNFTCheckoutOrderStatus indicates an expected call of GetSardineNFTCheckoutOrderStatus.
func (mr *APIMockRecorder) GetSardineNFTCheckoutOrderStatus(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineNFTCheckoutOrderStatus", reflect.TypeOf((*API)(nil).GetSardineNFTCheckoutOrderStatus), ctx, orderId)
}

// GetSardineNFTCheckoutToken mocks base method.
func (m *API) GetSardineNFTCheckoutToken(ctx context.Context, params *api.SardineNFTCheckoutParams) (*api.SardineNFTCheckout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineNFTCheckoutToken", ctx, params)
	ret0, _ := ret[0].(*api.SardineNFTCheckout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineNFTCheckoutToken indicates an expected call of GetSardineNFTCheckoutToken.
func (mr *APIMockRecorder) GetSardineNFTCheckoutToken(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineNFTCheckoutToken", reflect.TypeOf((*API)(nil).GetSardineNFTCheckoutToken), ctx, params)
}

// GetSequenceContext mocks base method.
func (m *API) GetSequenceContext(ctx context.Context) (*api.SequenceContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceContext", ctx)
	ret0, _ := ret[0].(*api.SequenceContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequenceContext indicates an expected call of GetSequenceContext.
func (mr *APIMockRecorder) GetSequenceContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceContext", reflect.TypeOf((*API)(nil).GetSequenceContext), ctx)
}

// InternalClaimAccessCode mocks base method.
func (m *API) InternalClaimAccessCode(ctx context.Context, address, accessCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalClaimAccessCode", ctx, address, accessCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalClaimAccessCode indicates an expected call of InternalClaimAccessCode.
func (mr *APIMockRecorder) InternalClaimAccessCode(ctx, address, accessCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalClaimAccessCode", reflect.TypeOf((*API)(nil).InternalClaimAccessCode), ctx, address, accessCode)
}

// IsValidAccessCode mocks base method.
func (m *API) IsValidAccessCode(ctx context.Context, accessCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidAccessCode", ctx, accessCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidAccessCode indicates an expected call of IsValidAccessCode.
func (mr *APIMockRecorder) IsValidAccessCode(ctx, accessCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidAccessCode", reflect.TypeOf((*API)(nil).IsValidAccessCode), ctx, accessCode)
}

// IsValidETHAuthProof mocks base method.
func (m *API) IsValidETHAuthProof(ctx context.Context, chainId, walletAddress, ethAuthProofString string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidETHAuthProof", ctx, chainId, walletAddress, ethAuthProofString)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidETHAuthProof indicates an expected call of IsValidETHAuthProof.
func (mr *APIMockRecorder) IsValidETHAuthProof(ctx, chainId, walletAddress, ethAuthProofString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidETHAuthProof", reflect.TypeOf((*API)(nil).IsValidETHAuthProof), ctx, chainId, walletAddress, ethAuthProofString)
}

// IsValidMessageSignature mocks base method.
func (m *API) IsValidMessageSignature(ctx context.Context, chainId, walletAddress, message, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidMessageSignature", ctx, chainId, walletAddress, message, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidMessageSignature indicates an expected call of IsValidMessageSignature.
func (mr *APIMockRecorder) IsValidMessageSignature(ctx, chainId, walletAddress, message, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidMessageSignature", reflect.TypeOf((*API)(nil).IsValidMessageSignature), ctx, chainId, walletAddress, message, signature)
}

// IsValidSignature mocks base method.
func (m *API) IsValidSignature(ctx context.Context, chainId, walletAddress, digest, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidSignature", ctx, chainId, walletAddress, digest, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidSignature indicates an expected call of IsValidSignature.
func (mr *APIMockRecorder) IsValidSignature(ctx, chainId, walletAddress, digest, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidSignature", reflect.TypeOf((*API)(nil).IsValidSignature), ctx, chainId, walletAddress, digest, signature)
}

// IsValidTypedDataSignature mocks base method.
func (m *API) IsValidTypedDataSignature(ctx context.Context, chainId, walletAddress string, typedData any, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidTypedDataSignature", ctx, chainId, walletAddress, typedData, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidTypedDataSignature indicates an expected call of IsValidTypedDataSignature.
func (mr *APIMockRecorder) IsValidTypedDataSignature(ctx, chainId, walletAddress, typedData, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidTypedDataSignature", reflect.TypeOf((*API)(nil).IsValidTypedDataSignature), ctx, chainId, walletAddress, typedData, signature)
}

// LinkWallet mocks base method.
func (m *API) LinkWallet(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId string, linkedWalletType *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkWallet", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkWallet indicates an expected call of LinkWallet.
func (mr *APIMockRecorder) LinkWallet(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkWallet", reflect.TypeOf((*API)(nil).LinkWallet), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType)
}

// ListAdoptedWallets mocks base method.
func (m *API) ListAdoptedWallets(ctx context.Context, page *api.Page) (*api.Page, []*api.AdoptedChildWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdoptedWallets", ctx, page)
	ret0, _ := ret[0].(*api.Page)
	ret1, _ := ret[1].([]*api.AdoptedChildWallet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAdoptedWallets indicates an expected call of ListAdoptedWallets.
func (mr *APIMockRecorder) ListAdoptedWallets(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdoptedWallets", reflect.TypeOf((*API)(nil).ListAdoptedWallets), ctx, page)
}

// ListCurrencyGroups mocks base method.
func (m *API) ListCurrencyGroups(ctx context.Context) ([]*api.CurrencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencyGroups", ctx)
	ret0, _ := ret[0].([]*api.CurrencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrencyGroups indicates an expected call of ListCurrencyGroups.
func (mr *APIMockRecorder) ListCurrencyGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencyGroups", reflect.TypeOf((*API)(nil).ListCurrencyGroups), ctx)
}

// ListOffchainInventories mocks base method.
func (m *API) ListOffchainInventories(ctx context.Context, projectId uint64) ([]*api.OffchainInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffchainInventories", ctx, projectId)
	ret0, _ := ret[0].([]*api.OffchainInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffchainInventories indicates an expected call of ListOffchainInventories.
func (mr *APIMockRecorder) ListOffchainInventories(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffchainInventories", reflect.TypeOf((*API)(nil).ListOffchainInventories), ctx, projectId)
}

// ListOffchainPayments mocks base method.
func (m *API) ListOffchainPayments(ctx context.Context, inventoryId uint64, page *api.Page) (*api.Page, []*api.OffchainPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffchainPayments", ctx, inventoryId, page)
	ret0, _ := ret[0].(*api.Page)
	ret1, _ := ret[1].([]*api.OffchainPayment)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOffchainPayments indicates an expected call of ListOffchainPayments.
func (mr *APIMockRecorder) ListOffchainPayments(ctx, inventoryId, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffchainPayments", reflect.TypeOf((*API)(nil).ListOffchainPayments), ctx, inventoryId, page)
}

// LookupContractCallSelectors mocks base method.
func (m *API) LookupContractCallSelectors(ctx context.Context, selectors []string) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupContractCallSelectors", ctx, selectors)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupContractCallSelectors indicates an expected call of LookupContractCallSelectors.
func (mr *APIMockRecorder) LookupContractCallSelectors(ctx, selectors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupContractCallSelectors", reflect.TypeOf((*API)(nil).LookupContractCallSelectors), ctx, selectors)
}

// MemoryLoad mocks base method.
func (m *API) MemoryLoad(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryLoad", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryLoad indicates an expected call of MemoryLoad.
func (mr *APIMockRecorder) MemoryLoad(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryLoad", reflect.TypeOf((*API)(nil).MemoryLoad), ctx, key)
}

// MemoryStore mocks base method.
func (m *API) MemoryStore(ctx context.Context, key, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryStore", ctx, key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryStore indicates an expected call of MemoryStore.
func (mr *APIMockRecorder) MemoryStore(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryStore", reflect.TypeOf((*API)(nil).MemoryStore), ctx, key, value)
}

// PaperSessionSecret mocks base method.
func (m *API) PaperSessionSecret(ctx context.Context, chainName, contractAddress, paramsJson, contractType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaperSessionSecret", ctx, chainName, contractAddress, paramsJson, contractType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaperSessionSecret indicates an expected call of PaperSessionSecret.
func (mr *APIMockRecorder) PaperSessionSecret(ctx, chainName, contractAddress, paramsJson, contractType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaperSessionSecret", reflect.TypeOf((*API)(nil).PaperSessionSecret), ctx, chainName, contractAddress, paramsJson, contractType)
}

// PaperSessionSecret2 mocks base method.
func (m *API) PaperSessionSecret2(ctx context.Context, chainName, contractAddress, paramsJson, abi string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaperSessionSecret2", ctx, chainName, contractAddress, paramsJson, abi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaperSessionSecret2 indicates an expected call of PaperSessionSecret2.
func (mr *APIMockRecorder) PaperSessionSecret2(ctx, chainName, contractAddress, paramsJson, abi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaperSessionSecret2", reflect.TypeOf((*API)(nil).PaperSessionSecret2), ctx, chainName, contractAddress, paramsJson, abi)
}

// Ping mocks base method.
func (m *API) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *APIMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*API)(nil).Ping), ctx)
}

// RegisterPublicKey mocks base method.
func (m *API) RegisterPublicKey(ctx context.Context, publicKey *api.PublicKey) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPublicKey", ctx, publicKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPublicKey indicates an expected call of RegisterPublicKey.
func (mr *APIMockRecorder) RegisterPublicKey(ctx, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublicKey", reflect.TypeOf((*API)(nil).RegisterPublicKey), ctx, publicKey)
}

// RemoveFriend mocks base method.
func (m *API) RemoveFriend(ctx context.Context, friendAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriend", ctx, friendAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFriend indicates an expected call of RemoveFriend.
func (mr *APIMockRecorder) RemoveFriend(ctx, friendAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriend", reflect.TypeOf((*API)(nil).RemoveFriend), ctx, friendAddress)
}

// RemoveLinkedWallet mocks base method.
func (m *API) RemoveLinkedWallet(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLinkedWallet", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLinkedWallet indicates an expected call of RemoveLinkedWallet.
func (mr *APIMockRecorder) RemoveLinkedWallet(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLinkedWallet", reflect.TypeOf((*API)(nil).RemoveLinkedWallet), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId)
}

// RequestOffchainPayment mocks base method.
func (m *API) RequestOffchainPayment(ctx context.Context, inventoryId uint64, recipient string, chainId *uint64, tokenAddress *string) (*api.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOffchainPayment", ctx, inventoryId, recipient, chainId, tokenAddress)
	ret0, _ := ret[0].(*api.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOffchainPayment indicates an expected call of RequestOffchainPayment.
func (mr *APIMockRecorder) RequestOffchainPayment(ctx, inventoryId, recipient, chainId, tokenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOffchainPayment", reflect.TypeOf((*API)(nil).RequestOffchainPayment), ctx, inventoryId, recipient, chainId, tokenAddress)
}

// ResolveENSAddress mocks base method.
func (m *API) ResolveENSAddress(ctx context.Context, ens string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveENSAddress", ctx, ens)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveENSAddress indicates an expected call of ResolveENSAddress.
func (mr *APIMockRecorder) ResolveENSAddress(ctx, ens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveENSAddress", reflect.TypeOf((*API)(nil).ResolveENSAddress), ctx, ens)
}

// RuntimeStatus mocks base method.
func (m *API) RuntimeStatus(ctx context.Context) (*api.RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeStatus", ctx)
	ret0, _ := ret[0].(*api.RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeStatus indicates an expected call of RuntimeStatus.
func (mr *APIMockRecorder) RuntimeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeStatus", reflect.TypeOf((*API)(nil).RuntimeStatus), ctx)
}

// SardineGetClientToken mocks base method.
func (m *API) SardineGetClientToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetClientToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetClientToken indicates an expected call of SardineGetClientToken.
func (mr *APIMockRecorder) SardineGetClientToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetClientToken", reflect.TypeOf((*API)(nil).SardineGetClientToken), ctx)
}

// SardineGetEnabledTokens mocks base method.
func (m *API) SardineGetEnabledTokens(ctx context.Context) ([]*api.SardineEnabledToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetEnabledTokens", ctx)
	ret0, _ := ret[0].([]*api.SardineEnabledToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetEnabledTokens indicates an expected call of SardineGetEnabledTokens.
func (mr *APIMockRecorder) SardineGetEnabledTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetEnabledTokens", reflect.TypeOf((*API)(nil).SardineGetEnabledTokens), ctx)
}

// SardineGetNFTCheckoutOrderStatus mocks base method.
func (m *API) SardineGetNFTCheckoutOrderStatus(ctx context.Context, orderId string) (*api.SardineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetNFTCheckoutOrderStatus", ctx, orderId)
	ret0, _ := ret[0].(*api.SardineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetNFTCheckoutOrderStatus indicates an expected call of SardineGetNFTCheckoutOrderStatus.
func (mr *APIMockRecorder) SardineGetNFTCheckoutOrderStatus(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetNFTCheckoutOrderStatus", reflect.TypeOf((*API)(nil).SardineGetNFTCheckoutOrderStatus), ctx, orderId)
}

// SardineGetNFTCheckoutToken mocks base method.
func (m *API) SardineGetNFTCheckoutToken(ctx context.Context, params *api.SardineNFTCheckoutParams) (*api.SardineNFTCheckout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetNFTCheckoutToken", ctx, params)
	ret0, _ := ret[0].(*api.SardineNFTCheckout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetNFTCheckoutToken indicates an expected call of SardineGetNFTCheckoutToken.
func (mr *APIMockRecorder) SardineGetNFTCheckoutToken(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetNFTCheckoutToken", reflect.TypeOf((*API)(nil).SardineGetNFTCheckoutToken), ctx, params)
}

// SardineGetQuote mocks base method.
func (m *API) SardineGetQuote(ctx context.Context, params *api.SardineGetQuoteParams) (*api.SardineQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetQuote", ctx, params)
	ret0, _ := ret[0].(*api.SardineQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetQuote indicates an expected call of SardineGetQuote.
func (mr *APIMockRecorder) SardineGetQuote(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetQuote", reflect.TypeOf((*API)(nil).SardineGetQuote), ctx, params)
}

// SardineGetSupportedFiatCurrencies mocks base method.
func (m *API) SardineGetSupportedFiatCurrencies(ctx context.Context) ([]*api.SardineFiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedFiatCurrencies", ctx)
	ret0, _ := ret[0].([]*api.SardineFiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedFiatCurrencies indicates an expected call of SardineGetSupportedFiatCurrencies.
func (mr *APIMockRecorder) SardineGetSupportedFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedFiatCurrencies", reflect.TypeOf((*API)(nil).SardineGetSupportedFiatCurrencies), ctx)
}

// SardineGetSupportedRegions mocks base method.
func (m *API) SardineGetSupportedRegions(ctx context.Context) ([]*api.SardineRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedRegions", ctx)
	ret0, _ := ret[0].([]*api.SardineRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedRegions indicates an expected call of SardineGetSupportedRegions.
func (mr *APIMockRecorder) SardineGetSupportedRegions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedRegions", reflect.TypeOf((*API)(nil).SardineGetSupportedRegions), ctx)
}

// SardineGetSupportedTokenForSwap mocks base method.
func (m *API) SardineGetSupportedTokenForSwap(ctx context.Context, network, tokenAddress string) (*api.SardineSupportedTokenForSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedTokenForSwap", ctx, network, tokenAddress)
	ret0, _ := ret[0].(*api.SardineSupportedTokenForSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedTokenForSwap indicates an expected call of SardineGetSupportedTokenForSwap.
func (mr *APIMockRecorder) SardineGetSupportedTokenForSwap(ctx, network, tokenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedTokenForSwap", reflect.TypeOf((*API)(nil).SardineGetSupportedTokenForSwap), ctx, network, tokenAddress)
}

// SardineGetSupportedTokens mocks base method.
func (m *API) SardineGetSupportedTokens(ctx context.Context) ([]*api.SardineSupportedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedTokens", ctx)
	ret0, _ := ret[0].([]*api.SardineSupportedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedTokens indicates an expected call of SardineGetSupportedTokens.
func (mr *APIMockRecorder) SardineGetSupportedTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedTokens", reflect.TypeOf((*API)(nil).SardineGetSupportedTokens), ctx)
}

// SavePack mocks base method.
func (m *API) SavePack(ctx context.Context, pack *api.Pack) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePack", ctx, pack)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePack indicates an expected call of SavePack.
func (mr *APIMockRecorder) SavePack(ctx, pack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePack", reflect.TypeOf((*API)(nil).SavePack), ctx, pack)
}

// SearchFriends mocks base method.
func (m *API) SearchFriends(ctx context.Context, filterUsername string, page *api.Page) ([]*api.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFriends", ctx, filterUsername, page)
	ret0, _ := ret[0].([]*api.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFriends indicates an expected call of SearchFriends.
func (mr *APIMockRecorder) SearchFriends(ctx, filterUsername, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFriends", reflect.TypeOf((*API)(nil).SearchFriends), ctx, filterUsername, page)
}

// SendPasswordlessLink mocks base method.
func (m *API) SendPasswordlessLink(ctx context.Context, email, redirectUri, intent string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordlessLink", ctx, email, redirectUri, intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordlessLink indicates an expected call of SendPasswordlessLink.
func (mr *APIMockRecorder) SendPasswordlessLink(ctx, email, redirectUri, intent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordlessLink", reflect.TypeOf((*API)(nil).SendPasswordlessLink), ctx, email, redirectUri, intent)
}

// TransakGetCountries mocks base method.
func (m *API) TransakGetCountries(ctx context.Context) ([]*api.TransakCountry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetCountries", ctx)
	ret0, _ := ret[0].([]*api.TransakCountry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetCountries indicates an expected call of TransakGetCountries.
func (mr *APIMockRecorder) TransakGetCountries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetCountries", reflect.TypeOf((*API)(nil).TransakGetCountries), ctx)
}

// TransakGetCryptoCurrencies mocks base method.
func (m *API) TransakGetCryptoCurrencies(ctx context.Context) ([]*api.TransakCryptoCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetCryptoCurrencies", ctx)
	ret0, _ := ret[0].([]*api.TransakCryptoCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetCryptoCurrencies indicates an expected call of TransakGetCryptoCurrencies.
func (mr *APIMockRecorder) TransakGetCryptoCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetCryptoCurrencies", reflect.TypeOf((*API)(nil).TransakGetCryptoCurrencies), ctx)
}

// TransakGetFiatCurrencies mocks base method.
func (m *API) TransakGetFiatCurrencies(ctx context.Context) ([]*api.TransakFiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetFiatCurrencies", ctx)
	ret0, _ := ret[0].([]*api.TransakFiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetFiatCurrencies indicates an expected call of TransakGetFiatCurrencies.
func (mr *APIMockRecorder) TransakGetFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetFiatCurrencies", reflect.TypeOf((*API)(nil).TransakGetFiatCurrencies), ctx)
}

// TransakGetPrice mocks base method.
func (m *API) TransakGetPrice(ctx context.Context, params *api.TransakGetPriceParams) (*api.TransakPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetPrice", ctx, params)
	ret0, _ := ret[0].(*api.TransakPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetPrice indicates an expected call of TransakGetPrice.
func (mr *APIMockRecorder) TransakGetPrice(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetPrice", reflect.TypeOf((*API)(nil).TransakGetPrice), ctx, params)
}

// TransakGetSupportedNFTCheckoutChains mocks base method.
func (m *API) TransakGetSupportedNFTCheckoutChains(ctx context.Context) ([]*api.TransakChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetSupportedNFTCheckoutChains", ctx)
	ret0, _ := ret[0].([]*api.TransakChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetSupportedNFTCheckoutChains indicates an expected call of TransakGetSupportedNFTCheckoutChains.
func (mr *APIMockRecorder) TransakGetSupportedNFTCheckoutChains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetSupportedNFTCheckoutChains", reflect.TypeOf((*API)(nil).TransakGetSupportedNFTCheckoutChains), ctx)
}

// UpdateFriendNickname mocks base method.
func (m *API) UpdateFriendNickname(ctx context.Context, friendAddress, nickname string) (bool, *api.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendNickname", ctx, friendAddress, nickname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFriendNickname indicates an expected call of UpdateFriendNickname.
func (mr *APIMockRecorder) UpdateFriendNickname(ctx, friendAddress, nickname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendNickname", reflect.TypeOf((*API)(nil).UpdateFriendNickname), ctx, friendAddress, nickname)
}

// UpdateOffchainInventory mocks base method.
func (m *API) UpdateOffchainInventory(ctx context.Context, inventory *api.OffchainInventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffchainInventory", ctx, inventory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffchainInventory indicates an expected call of UpdateOffchainInventory.
func (mr *APIMockRecorder) UpdateOffchainInventory(ctx, inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffchainInventory", reflect.TypeOf((*API)(nil).UpdateOffchainInventory), ctx, inventory)
}

// UpdatePackContent mocks base method.
func (m *API) UpdatePackContent(ctx context.Context, pack *api.Pack) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackContent", ctx, pack)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackContent indicates an expected call of UpdatePackContent.
func (mr *APIMockRecorder) UpdatePackContent(ctx, pack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackContent", reflect.TypeOf((*API)(nil).UpdatePackContent), ctx, pack)
}

// UserStorageDelete mocks base method.
func (m *API) UserStorageDelete(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageDelete", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageDelete indicates an expected call of UserStorageDelete.
func (mr *APIMockRecorder) UserStorageDelete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageDelete", reflect.TypeOf((*API)(nil).UserStorageDelete), ctx, key)
}

// UserStorageFetch mocks base method.
func (m *API) UserStorageFetch(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageFetch", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageFetch indicates an expected call of UserStorageFetch.
func (mr *APIMockRecorder) UserStorageFetch(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageFetch", reflect.TypeOf((*API)(nil).UserStorageFetch), ctx, key)
}

// UserStorageFetchAll mocks base method.
func (m *API) UserStorageFetchAll(ctx context.Context, keys []string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageFetchAll", ctx, keys)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageFetchAll indicates an expected call of UserStorageFetchAll.
func (mr *APIMockRecorder) UserStorageFetchAll(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageFetchAll", reflect.TypeOf((*API)(nil).UserStorageFetchAll), ctx, keys)
}

// UserStorageSave mocks base method.
func (m *API) UserStorageSave(ctx context.Context, key string, object any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageSave", ctx, key, object)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageSave indicates an expected call of UserStorageSave.
func (mr *APIMockRecorder) UserStorageSave(ctx, key, object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageSave", reflect.TypeOf((*API)(nil).UserStorageSave), ctx, key, object)
}

// ValidateWaaSVerificationNonce mocks base method.
func (m *API) ValidateWaaSVerificationNonce(ctx context.Context, nonce, signature, sessionId, chainId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWaaSVerificationNonce", ctx, nonce, signature, sessionId, chainId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateWaaSVerificationNonce indicates an expected call of ValidateWaaSVerificationNonce.
func (mr *APIMockRecorder) ValidateWaaSVerificationNonce(ctx, nonce, signature, sessionId, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWaaSVerificationNonce", reflect.TypeOf((*API)(nil).ValidateWaaSVerificationNonce), ctx, nonce, signature, sessionId, chainId)
}

// Version mocks base method.
func (m *API) Version(ctx context.Context) (*api.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(*api.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *APIMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*API)(nil).Version), ctx)
}
