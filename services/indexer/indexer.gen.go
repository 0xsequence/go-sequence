// sequence-indexer v0.4.0 d7e56f73f36069cb214e44d975e2b5edca1e69ad
// --
// Code generated by webrpc-gen@v0.25.3 with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=merged.gen.json -target=golang -pkg=indexer -client -out=./clients/indexer.gen.go
package indexer

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"sync"
	"time"

	"github.com/0xsequence/go-sequence/lib/prototyp"
)

const WebrpcHeader = "Webrpc"

const WebrpcHeaderValue = "webrpc@v0.25.3;gen-golang@v0.18.4;sequence-indexer@v0.4.0"

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.4.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "d7e56f73f36069cb214e44d975e2b5edca1e69ad"
}

type WebrpcGenVersions struct {
	WebrpcGenVersion string
	CodeGenName      string
	CodeGenVersion   string
	SchemaName       string
	SchemaVersion    string
}

func VersionFromHeader(h http.Header) (*WebrpcGenVersions, error) {
	if h.Get(WebrpcHeader) == "" {
		return nil, fmt.Errorf("header is empty or missing")
	}

	versions, err := parseWebrpcGenVersions(h.Get(WebrpcHeader))
	if err != nil {
		return nil, fmt.Errorf("webrpc header is invalid: %w", err)
	}

	return versions, nil
}

func parseWebrpcGenVersions(header string) (*WebrpcGenVersions, error) {
	versions := strings.Split(header, ";")
	if len(versions) < 3 {
		return nil, fmt.Errorf("expected at least 3 parts while parsing webrpc header: %v", header)
	}

	_, webrpcGenVersion, ok := strings.Cut(versions[0], "@")
	if !ok {
		return nil, fmt.Errorf("webrpc gen version could not be parsed from: %s", versions[0])
	}

	tmplTarget, tmplVersion, ok := strings.Cut(versions[1], "@")
	if !ok {
		return nil, fmt.Errorf("tmplTarget and tmplVersion could not be parsed from: %s", versions[1])
	}

	schemaName, schemaVersion, ok := strings.Cut(versions[2], "@")
	if !ok {
		return nil, fmt.Errorf("schema name and schema version could not be parsed from: %s", versions[2])
	}

	return &WebrpcGenVersions{
		WebrpcGenVersion: webrpcGenVersion,
		CodeGenName:      tmplTarget,
		CodeGenVersion:   tmplVersion,
		SchemaName:       schemaName,
		SchemaVersion:    schemaVersion,
	}, nil
}

//
// Common types
//

// Asset is a database type used by 'collections' to record static assets for
// a particular 'token' for the token metadata.
type Asset struct {
	ID            uint64           `json:"id" db:"id,omitempty"`
	CollectionID  uint64           `json:"collectionId" db:"collection_id"`
	TokenID       *prototyp.BigInt `json:"tokenId" db:"token_id,omitempty"`
	URL           string           `json:"url" db:"-"`
	MetadataField string           `json:"metadataField,omitempty" db:"metadata_field"`
	Filename      string           `json:"filename,omitempty" db:"filename"`
	Filesize      uint32           `json:"filesize,omitempty" db:"filesize"`
	MimeType      string           `json:"mimeType,omitempty" db:"mime_type"`
	Width         *uint16          `json:"width,omitempty" db:"width"`
	Height        *uint16          `json:"height,omitempty" db:"height"`
	UpdatedAt     time.Time        `json:"updatedAt" db:"updated_at"`
}

type BloomStats struct {
	HitRatio              string `json:"hitRatio"`
	FalsePositivesPercent string `json:"falsePositivesPercent"`
	HitCount              uint64 `json:"hitCount"`
	MissCount             uint64 `json:"missCount"`
	FalsePositives        uint64 `json:"falsePositives"`
}

type BloomStatus struct {
	Enabled              bool        `json:"enabled"`
	Initialized          bool        `json:"initialized"`
	BloomInitElapsedTime string      `json:"bloomInitElapsedTime"`
	Stats                *BloomStats `json:"stats"`
}

type Bond struct {
	Pebble                     *PebbleMetrics `json:"pebble"`
	EstimatedDiskUsagePerTable interface{}    `json:"estimatedDiskUsagePerTable"`
	EstimatedDiskUsageTotal    string         `json:"estimatedDiskUsageTotal"`
}

// ContractInfo is RPC type for responding to clients that represents
// the contract-level metadata.
type ContractInfo struct {
	ChainID      uint64                  `json:"chainId" cbor:"-"`
	Address      string                  `json:"address" cbor:"-"`
	Source       string                  `json:"source" cbor:"-"`
	Name         string                  `json:"name" cbor:"-"`
	Type         string                  `json:"type" cbor:"-"`
	Symbol       string                  `json:"symbol" cbor:"-"`
	Decimals     *uint64                 `json:"decimals,omitempty" cbor:"-"`
	LogoURI      string                  `json:"logoURI,omitempty" cbor:"-"`
	Deployed     bool                    `json:"deployed" cbor:"-"`
	BytecodeHash prototyp.Hash           `json:"bytecodeHash" cbor:"-"`
	Extensions   *ContractInfoExtensions `json:"extensions" cbor:"-"`
	ContentHash  uint64                  `json:"-" cbor:"-"`
	UpdatedAt    time.Time               `json:"updatedAt" cbor:"-"`
	QueuedAt     *time.Time              `json:"queuedAt"`
	Status       ResourceStatus          `json:"status"`
}

type ContractInfoExtensions struct {
	Link          string   `json:"link" cbor:"-"`
	Description   string   `json:"description" cbor:"-"`
	Categories    []string `json:"categories,omitempty" cbor:"-"`
	OgImage       string   `json:"ogImage" cbor:"-"`
	OgName        string   `json:"ogName" cbor:"-"`
	OriginChainID uint64   `json:"originChainId" cbor:"-"`
	OriginAddress string   `json:"originAddress" cbor:"-"`
	Blacklist     bool     `json:"blacklist,omitempty" cbor:"-"`
	Verified      bool     `json:"verified" cbor:"-"`
	VerifiedBy    string   `json:"verifiedBy,omitempty" cbor:"-"`
	Featured      bool     `json:"featured,omitempty" cbor:"-"`
	FeatureIndex  uint8    `json:"featureIndex,omitempty"`
}

type ContractType uint8

const (
	ContractType_UNKNOWN         ContractType = 0
	ContractType_NATIVE          ContractType = 1
	ContractType_ERC20           ContractType = 2
	ContractType_ERC721          ContractType = 3
	ContractType_ERC1155         ContractType = 4
	ContractType_SEQUENCE_WALLET ContractType = 5
	ContractType_ERC20_BRIDGE    ContractType = 6
	ContractType_ERC721_BRIDGE   ContractType = 7
	ContractType_ERC1155_BRIDGE  ContractType = 8
	ContractType_SEQ_MARKETPLACE ContractType = 9
	ContractType_ERC6909         ContractType = 10
)

var ContractType_name = map[uint8]string{
	0:  "UNKNOWN",
	1:  "NATIVE",
	2:  "ERC20",
	3:  "ERC721",
	4:  "ERC1155",
	5:  "SEQUENCE_WALLET",
	6:  "ERC20_BRIDGE",
	7:  "ERC721_BRIDGE",
	8:  "ERC1155_BRIDGE",
	9:  "SEQ_MARKETPLACE",
	10: "ERC6909",
}

var ContractType_value = map[string]uint8{
	"UNKNOWN":         0,
	"NATIVE":          1,
	"ERC20":           2,
	"ERC721":          3,
	"ERC1155":         4,
	"SEQUENCE_WALLET": 5,
	"ERC20_BRIDGE":    6,
	"ERC721_BRIDGE":   7,
	"ERC1155_BRIDGE":  8,
	"SEQ_MARKETPLACE": 9,
	"ERC6909":         10,
}

func (x ContractType) String() string {
	return ContractType_name[uint8(x)]
}

func (x ContractType) MarshalText() ([]byte, error) {
	return []byte(ContractType_name[uint8(x)]), nil
}

func (x *ContractType) UnmarshalText(b []byte) error {
	*x = ContractType(ContractType_value[string(b)])
	return nil
}

func (x *ContractType) Is(values ...ContractType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type ContractVerificationStatus string

const (
	ContractVerificationStatus_VERIFIED   ContractVerificationStatus = "VERIFIED"
	ContractVerificationStatus_UNVERIFIED ContractVerificationStatus = "UNVERIFIED"
	ContractVerificationStatus_ALL        ContractVerificationStatus = "ALL"
)

func (x ContractVerificationStatus) MarshalText() ([]byte, error) {
	return []byte(x), nil
}

func (x *ContractVerificationStatus) UnmarshalText(b []byte) error {
	*x = ContractVerificationStatus(string(b))
	return nil
}

func (x *ContractVerificationStatus) Is(values ...ContractVerificationStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type DiskUsage struct {
	HumanReadable string            `json:"humanReadable"`
	Used          uint64            `json:"used"`
	Size          uint64            `json:"size"`
	Percent       float32           `json:"percent"`
	Dirs          map[string]string `json:"dirs"`
}

type EtherBalance struct {
	AccountAddress prototyp.Hash   `json:"accountAddress" cbor:"-"`
	BalanceWei     prototyp.BigInt `json:"balanceWei" cbor:"-"`
}

type EventDecoded struct {
	TopicHash string   `json:"topicHash"`
	EventSig  string   `json:"eventSig,omitempty"`
	Types     []string `json:"types,omitempty"`
	Names     []string `json:"names,omitempty"`
	Values    []string `json:"values,omitempty"`
}

type EventFilter struct {
	Events            []string          `json:"events"`
	ContractAddresses []prototyp.Hash   `json:"contractAddresses"`
	Accounts          []prototyp.Hash   `json:"accounts"`
	TokenIDs          []prototyp.BigInt `json:"tokenIDs"`
}

type EventLog struct {
	ID              uint64                 `json:"id,omitempty" cbor:"id,omitempty"`
	UID             prototyp.Hash          `json:"uid,omitempty" cbor:"uid,omitempty"`
	Type            EventLogType           `json:"type" cbor:"type"`
	BlockNumber     uint64                 `json:"blockNumber" cbor:"block_num"`
	BlockHash       prototyp.Hash          `json:"blockHash" cbor:"block_hash"`
	ParentBlockHash prototyp.Hash          `json:"parentBlockHash,omitempty" cbor:"parent_block_hash"`
	ContractAddress prototyp.Hash          `json:"contractAddress" cbor:"contract_address"`
	ContractType    ContractType           `json:"contractType" cbor:"contract_type"`
	TxnHash         prototyp.Hash          `json:"txnHash" cbor:"txn_hash"`
	TxnIndex        uint                   `json:"txnIndex" cbor:"txn_index"`
	TxnLogIndex     uint                   `json:"txnLogIndex" cbor:"txn_log_index"`
	LogDataType     EventLogDataType       `json:"logDataType" cbor:"log_data_type"`
	TS              time.Time              `json:"ts" cbor:"ts"`
	TxnInfo         *TxnInfo               `json:"txnInfo,omitempty" cbor:"txn_info"`
	RawLog          map[string]interface{} `json:"rawLog,omitempty" cbor:"-"`
	Event           *EventDecoded          `json:"event,omitempty" cbor:"-"`
}

type EventLogDataType uint8

const (
	EventLogDataType_EVENT                 EventLogDataType = 0
	EventLogDataType_TOKEN_TRANSFER        EventLogDataType = 1
	EventLogDataType_NATIVE_TOKEN_TRANSFER EventLogDataType = 2
	EventLogDataType_SEQUENCE_TXN          EventLogDataType = 3
)

var EventLogDataType_name = map[uint8]string{
	0: "EVENT",
	1: "TOKEN_TRANSFER",
	2: "NATIVE_TOKEN_TRANSFER",
	3: "SEQUENCE_TXN",
}

var EventLogDataType_value = map[string]uint8{
	"EVENT":                 0,
	"TOKEN_TRANSFER":        1,
	"NATIVE_TOKEN_TRANSFER": 2,
	"SEQUENCE_TXN":          3,
}

func (x EventLogDataType) String() string {
	return EventLogDataType_name[uint8(x)]
}

func (x EventLogDataType) MarshalText() ([]byte, error) {
	return []byte(EventLogDataType_name[uint8(x)]), nil
}

func (x *EventLogDataType) UnmarshalText(b []byte) error {
	*x = EventLogDataType(EventLogDataType_value[string(b)])
	return nil
}

func (x *EventLogDataType) Is(values ...EventLogDataType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type EventLogType uint8

const (
	EventLogType_UNKNOWN       EventLogType = 0
	EventLogType_BLOCK_ADDED   EventLogType = 1
	EventLogType_BLOCK_REMOVED EventLogType = 2
)

var EventLogType_name = map[uint8]string{
	0: "UNKNOWN",
	1: "BLOCK_ADDED",
	2: "BLOCK_REMOVED",
}

var EventLogType_value = map[string]uint8{
	"UNKNOWN":       0,
	"BLOCK_ADDED":   1,
	"BLOCK_REMOVED": 2,
}

func (x EventLogType) String() string {
	return EventLogType_name[uint8(x)]
}

func (x EventLogType) MarshalText() ([]byte, error) {
	return []byte(EventLogType_name[uint8(x)]), nil
}

func (x *EventLogType) UnmarshalText(b []byte) error {
	*x = EventLogType(EventLogType_value[string(b)])
	return nil
}

func (x *EventLogType) Is(values ...EventLogType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type GatewayBackendResponseTime struct {
	Percentiles map[string]float64 `json:"percentiles"`
	Average     float64            `json:"average"`
}

type GatewayBackendRuntimeStatus struct {
	Name         string                      `json:"name"`
	ChainID      uint64                      `json:"chainId"`
	ResponseTime *GatewayBackendResponseTime `json:"responseTime"`
}

type GatewayEtherBalance struct {
	ChainID uint64        `json:"chainId"`
	Error   error         `json:"error,omitempty"`
	Result  *EtherBalance `json:"result"`
}

type GatewayNativeTokenBalance struct {
	ChainID uint64              `json:"chainId"`
	Error   error               `json:"error,omitempty"`
	Result  *NativeTokenBalance `json:"result"`
}

type GatewayNativeTokenBalances struct {
	ChainId uint64                `json:"chainId"`
	Error   error                 `json:"error,omitempty"`
	Results []*NativeTokenBalance `json:"results"`
}

type GatewayRuntimeStatus struct {
	HealthOK   bool                           `json:"healthOK"`
	StartTime  time.Time                      `json:"startTime"`
	Uptime     uint64                         `json:"uptime"`
	Ver        string                         `json:"ver"`
	Branch     string                         `json:"branch"`
	CommitHash string                         `json:"commitHash"`
	Backends   []*GatewayBackendRuntimeStatus `json:"backends"`
}

type GatewayTokenBalance struct {
	ChainID uint64          `json:"chainId"`
	Error   error           `json:"error,omitempty"`
	Results []*TokenBalance `json:"results"`
}

type IndexState struct {
	ChainID       prototyp.BigInt `json:"chainId" cbor:"chain_id"`
	LastBlockNum  uint64          `json:"lastBlockNum" cbor:"last_block_num"`
	LastBlockHash prototyp.Hash   `json:"lastBlockHash" cbor:"last_block_hash"`
}

type IndexedBlock struct {
	BlockNumber    uint64        `json:"blockNumber" cbor:"1"`
	BlockShortHash prototyp.Hash `json:"blockShortHash" cbor:"2"`
}

type IndexerMetrics struct {
	BlocksPerSecond float64 `json:"blocksPerSecond"`
	EventsPerSecond float64 `json:"eventsPerSecond"`
}

type MarketplaceOrder struct {
	OrderID                  prototyp.BigInt `json:"orderId" cbor:"1"`
	TokenContract            prototyp.Hash   `json:"tokenContract" cbor:"2"`
	TokenID                  prototyp.BigInt `json:"tokenId" cbor:"3"`
	IsListing                bool            `json:"isListing" cbor:"4"`
	Quantity                 prototyp.BigInt `json:"quantity" cbor:"5"`
	QuantityRemaining        prototyp.BigInt `json:"quantityRemaining" cbor:"6"`
	CurrencyAddress          prototyp.Hash   `json:"currencyAddress" cbor:"7"`
	PricePerToken            prototyp.BigInt `json:"pricePerToken" cbor:"8"`
	Expiry                   prototyp.BigInt `json:"expiry" cbor:"9"`
	OrderStatus              OrderStatus     `json:"orderStatus" cbor:"10"`
	CreatedBy                prototyp.Hash   `json:"createdBy" cbor:"11"`
	BlockNumber              uint64          `json:"blockNumber" cbor:"12"`
	OrderbookContractAddress prototyp.Hash   `json:"orderbookContractAddress" cbor:"13"`
	CreatedAt                uint64          `json:"createdAt" cbor:"14"`
}

type MarketplaceOrderFilter struct {
	IsListing            *bool         `json:"isListing"`
	UserAddresses        []string      `json:"userAddresses"`
	CurrencyAddresses    []string      `json:"currencyAddresses"`
	OrderIDs             []string      `json:"orderIds"`
	TokenIDs             []string      `json:"tokenIds"`
	ExcludeUserAddresses []string      `json:"excludeUserAddresses"`
	BlockNumberGt        uint64        `json:"blockNumberGt"`
	CreatedAtAfter       int64         `json:"createdAtAfter"`
	OrderStatuses        []OrderStatus `json:"orderStatuses"`
	ReturnExpired        bool          `json:"returnExpired"`
}

type MarketplaceTopOrdersFilter struct {
	CurrencyAddresses []string  `json:"currencyAddresses"`
	TokenIDs          []string  `json:"tokenIds"`
	IsListing         bool      `json:"isListing"`
	PriceSort         SortOrder `json:"priceSort"`
	ExcludeUser       *string   `json:"excludeUser"`
}

type MetadataOptions struct {
	VerifiedOnly     bool            `json:"verifiedOnly"`
	UnverifiedOnly   bool            `json:"unverifiedOnly"`
	IncludeContracts []prototyp.Hash `json:"includeContracts"`
}

type NativeTokenBalance struct {
	AccountAddress prototyp.Hash   `json:"accountAddress" cbor:"-"`
	ChainID        uint64          `json:"chainId" cbor:"-"`
	Balance        prototyp.BigInt `json:"balance" cbor:"-"`
	BalanceUSD     string          `json:"balanceUSD,omitempty" cbor:"-"`
	PriceUSD       string          `json:"priceUSD,omitempty" cbor:"-"`
	Error          string          `json:"error,omitempty" cbor:"-"`
}

type OrderStatus uint32

const (
	OrderStatus_OPEN      OrderStatus = 0
	OrderStatus_CLOSED    OrderStatus = 1
	OrderStatus_CANCELLED OrderStatus = 2
)

var OrderStatus_name = map[uint32]string{
	0: "OPEN",
	1: "CLOSED",
	2: "CANCELLED",
}

var OrderStatus_value = map[string]uint32{
	"OPEN":      0,
	"CLOSED":    1,
	"CANCELLED": 2,
}

func (x OrderStatus) String() string {
	return OrderStatus_name[uint32(x)]
}

func (x OrderStatus) MarshalText() ([]byte, error) {
	return []byte(OrderStatus_name[uint32(x)]), nil
}

func (x *OrderStatus) UnmarshalText(b []byte) error {
	*x = OrderStatus(OrderStatus_value[string(b)])
	return nil
}

func (x *OrderStatus) Is(values ...OrderStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

// Page represents a results page. This can be used both to request a page and
// to store the state of a page.
type Page struct {
	Page     *uint32      `json:"page,omitempty"`
	Column   *string      `json:"column,omitempty"`
	Before   *interface{} `json:"before,omitempty"`
	After    *interface{} `json:"after,omitempty"`
	Sort     []*SortBy    `json:"sort,omitempty"`
	PageSize *uint32      `json:"pageSize,omitempty"`
	More     *bool        `json:"more,omitempty"`
}

type PebbleMetrics struct {
	CompactionCount           int64  `json:"compactionCount"`
	CompactionEstimatedDebt   uint64 `json:"compactionEstimatedDebt"`
	CompactionInProgressBytes int64  `json:"compactionInProgressBytes"`
	CompactionNumInProgress   int64  `json:"compactionNumInProgress"`
	CompactionMarkedFiles     int    `json:"compactionMarkedFiles"`
}

type Price struct {
	ContractAddress prototyp.Hash    `json:"contractAddress"`
	TokenID         *prototyp.BigInt `json:"tokenID,omitempty"`
	PriceUSD        string           `json:"priceUSD"`
}

type ResourceStatus uint32

const (
	ResourceStatus_NOT_AVAILABLE ResourceStatus = 0
	ResourceStatus_REFRESHING    ResourceStatus = 1
	ResourceStatus_AVAILABLE     ResourceStatus = 2
)

var ResourceStatus_name = map[uint32]string{
	0: "NOT_AVAILABLE",
	1: "REFRESHING",
	2: "AVAILABLE",
}

var ResourceStatus_value = map[string]uint32{
	"NOT_AVAILABLE": 0,
	"REFRESHING":    1,
	"AVAILABLE":     2,
}

func (x ResourceStatus) String() string {
	return ResourceStatus_name[uint32(x)]
}

func (x ResourceStatus) MarshalText() ([]byte, error) {
	return []byte(ResourceStatus_name[uint32(x)]), nil
}

func (x *ResourceStatus) UnmarshalText(b []byte) error {
	*x = ResourceStatus(ResourceStatus_value[string(b)])
	return nil
}

func (x *ResourceStatus) Is(values ...ResourceStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type RuntimeChecks struct {
	Running               bool            `json:"running"`
	Runnables             interface{}     `json:"runnables"`
	CgoEnabled            bool            `json:"cgoEnabled"`
	QuotaControlEnabled   bool            `json:"quotaControlEnabled"`
	SyncMode              string          `json:"syncMode"`
	PercentIndexed        float64         `json:"percentIndexed"`
	LastBlockNum          uint64          `json:"lastBlockNum"`
	LastBlockNumWithState uint64          `json:"lastBlockNumWithState"`
	BloomStatus           *BloomStatus    `json:"bloomStatus"`
	Bond                  *Bond           `json:"bond"`
	DiskUsage             *DiskUsage      `json:"diskUsage"`
	Metrics               *IndexerMetrics `json:"metrics"`
}

type RuntimeStatus struct {
	HealthOK       bool           `json:"healthOK"`
	IndexerEnabled bool           `json:"indexerEnabled"`
	StartTime      time.Time      `json:"startTime"`
	Uptime         uint64         `json:"uptime"`
	Ver            string         `json:"ver"`
	Branch         string         `json:"branch"`
	CommitHash     string         `json:"commitHash"`
	ChainID        uint64         `json:"chainID"`
	Checks         *RuntimeChecks `json:"checks"`
}

type SortBy struct {
	Column string    `json:"column"`
	Order  SortOrder `json:"order"`
}

type SortOrder uint32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

var SortOrder_name = map[uint32]string{
	0: "DESC",
	1: "ASC",
}

var SortOrder_value = map[string]uint32{
	"DESC": 0,
	"ASC":  1,
}

func (x SortOrder) String() string {
	return SortOrder_name[uint32(x)]
}

func (x SortOrder) MarshalText() ([]byte, error) {
	return []byte(SortOrder_name[uint32(x)]), nil
}

func (x *SortOrder) UnmarshalText(b []byte) error {
	*x = SortOrder(SortOrder_value[string(b)])
	return nil
}

func (x *SortOrder) Is(values ...SortOrder) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

// Token Balances
type TokenBalance struct {
	ContractType       ContractType       `json:"contractType" cbor:"1,omitempty"`
	ContractAddress    prototyp.Hash      `json:"contractAddress" cbor:"2"`
	AccountAddress     prototyp.HashMaybe `json:"accountAddress,omitempty" cbor:"3,omitempty"`
	TokenID            *prototyp.BigInt   `json:"tokenID,omitempty" cbor:"4"`
	Balance            prototyp.BigInt    `json:"balance" cbor:"5"`
	BalanceUSD         string             `json:"balanceUSD,omitempty" cbor:"-"`
	PriceUSD           string             `json:"priceUSD,omitempty" cbor:"-"`
	BlockHash          prototyp.Hash      `json:"blockHash,omitempty" cbor:"6"`
	BlockNumber        uint64             `json:"blockNumber,omitempty" cbor:"7"`
	ChainID            uint64             `json:"chainId" cbor:"-"`
	UniqueCollectibles *prototyp.BigInt   `json:"uniqueCollectibles,omitempty" cbor:"-"`
	IsSummary          bool               `json:"isSummary,omitempty" cbor:"9"`
	ContractInfo       *ContractInfo      `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata      *TokenMetadata     `json:"tokenMetadata,omitempty" cbor:"-"`
}

type TokenBalanceFilter struct {
	ContractAddress  prototyp.Hash `json:"contractAddress"`
	SinceBlockNumber uint64        `json:"sinceBlockNumber"`
}

type TokenBalancesByContractFilter struct {
	ContractAddresses []prototyp.Hash            `json:"contractAddresses"`
	AccountAddresses  []prototyp.Hash            `json:"accountAddresses"`
	ContractStatus    ContractVerificationStatus `json:"contractStatus"`
}

type TokenBalancesFilter struct {
	AccountAddresses   []prototyp.Hash            `json:"accountAddresses"`
	ContractStatus     ContractVerificationStatus `json:"contractStatus"`
	ContractWhitelist  []prototyp.Hash            `json:"contractWhitelist"`
	ContractBlacklist  []prototyp.Hash            `json:"contractBlacklist"`
	OmitNativeBalances bool                       `json:"omitNativeBalances,omitempty"`
	OmitPrices         bool                       `json:"omitPrices,omitempty"`
}

// Token History
type TokenHistory struct {
	BlockNumber     uint64            `json:"blockNumber" cbor:"1"`
	BlockHash       prototyp.Hash     `json:"blockHash" cbor:"2"`
	ContractAddress prototyp.Hash     `json:"contractAddress" cbor:"4"`
	ContractType    ContractType      `json:"contractType" cbor:"5"`
	FromAddress     prototyp.Hash     `json:"fromAddress" cbor:"6"`
	ToAddress       prototyp.Hash     `json:"toAddress" cbor:"7"`
	TxnHash         prototyp.Hash     `json:"txnHash" cbor:"8"`
	TxnIndex        uint              `json:"txnIndex" cbor:"9"`
	TxnLogIndex     uint              `json:"txnLogIndex" cbor:"a"`
	TokenIDs        []prototyp.BigInt `json:"tokenIDs" cbor:"b"`
	Amounts         []prototyp.BigInt `json:"amounts" cbor:"c"`
	TS              time.Time         `json:"ts" cbor:"d"`
}

type TokenIDRange struct {
	Start prototyp.BigInt `json:"start"`
	End   prototyp.BigInt `json:"end"`
}

// TokenMetadata based on 721/1155 standards, as well including some
// fields which are used by OpenSea.
//
// TokenMetadata is RPC type for responding to clients that represents
// the token-level metadata.
type TokenMetadata struct {
	ContractAddress prototyp.Hash            `json:"contractAddress,omitempty" cbor:"-"`
	TokenID         string                   `json:"tokenId" cbor:"-"`
	Source          string                   `json:"source" cbor:"-"`
	Name            string                   `json:"name" cbor:"-"`
	Description     string                   `json:"description" cbor:"-"`
	Image           string                   `json:"image" cbor:"-"`
	Video           string                   `json:"video,omitempty" cbor:"-"`
	Audio           string                   `json:"audio,omitempty" cbor:"-"`
	Properties      map[string]interface{}   `json:"properties" cbor:"-"`
	Attributes      []map[string]interface{} `json:"attributes" cbor:"-"`
	ImageData       string                   `json:"image_data,omitempty" cbor:"-"`
	ExternalUrl     string                   `json:"external_url,omitempty" cbor:"-"`
	BackgroundColor string                   `json:"background_color,omitempty" cbor:"-"`
	AnimationUrl    string                   `json:"animation_url,omitempty" cbor:"-"`
	Decimals        *uint64                  `json:"decimals,omitempty" cbor:"-"`
	UpdatedAt       time.Time                `json:"updatedAt" cbor:"-"`
	Assets          []*Asset                 `json:"assets,omitempty" cbor:"-"`
	Status          ResourceStatus           `json:"status"`
	QueuedAt        *time.Time               `json:"queuedAt"`
	LastFetched     *time.Time               `json:"lastFetched,omitempty"`
}

type TokenSupply struct {
	TokenID       prototyp.BigInt `json:"tokenID,omitempty" cbor:"token_id"`
	Supply        prototyp.BigInt `json:"supply" cbor:"supply"`
	ChainID       uint64          `json:"chainId" cbor:"-"`
	ContractInfo  *ContractInfo   `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata *TokenMetadata  `json:"tokenMetadata,omitempty" cbor:"-"`
}

type Transaction struct {
	TxnHash     prototyp.Hash  `json:"txnHash" cbor:"1"`
	BlockNumber uint64         `json:"blockNumber" cbor:"2"`
	BlockHash   prototyp.Hash  `json:"blockHash" cbor:"3"`
	ChainID     uint64         `json:"chainId" cbor:"4"`
	MetaTxnID   *string        `json:"metaTxnID" cbor:"5"`
	Transfers   []*TxnTransfer `json:"transfers" cbor:"6"`
	Timestamp   *time.Time     `json:"timestamp" cbor:"7"`
}

type TransactionFilter struct {
	TxnHash         *prototyp.Hash `json:"txnHash"`
	From            *prototyp.Hash `json:"from"`
	To              *prototyp.Hash `json:"to"`
	ContractAddress *prototyp.Hash `json:"contractAddress"`
	Event           *string        `json:"event"`
}

// TODO: rename to TxnHistoryFilter
type TransactionHistoryFilter struct {
	AccountAddress     *string          `json:"accountAddress"`
	ContractAddress    *string          `json:"contractAddress"`
	AccountAddresses   []string         `json:"accountAddresses"`
	ContractAddresses  []string         `json:"contractAddresses"`
	TransactionHashes  []string         `json:"transactionHashes"`
	MetaTransactionIDs []string         `json:"metaTransactionIDs"`
	FromBlock          *uint64          `json:"fromBlock"`
	ToBlock            *uint64          `json:"toBlock"`
	TokenID            *prototyp.BigInt `json:"tokenID"`
	OmitPrices         *bool            `json:"omitPrices"`
}

type TransactionLog struct {
	ContractAddress prototyp.Hash   `json:"contractAddress"`
	Topics          []prototyp.Hash `json:"topics"`
	Data            string          `json:"data"`
	Index           uint64          `json:"index"`
}

type TransactionReceipt struct {
	TxnHash           prototyp.Hash     `json:"txnHash"`
	TxnStatus         TransactionStatus `json:"txnStatus"`
	TxnIndex          uint64            `json:"txnIndex"`
	TxnType           TransactionType   `json:"txnType"`
	BlockHash         prototyp.Hash     `json:"blockHash"`
	BlockNumber       uint64            `json:"blockNumber"`
	GasUsed           uint64            `json:"gasUsed"`
	EffectiveGasPrice prototyp.BigInt   `json:"effectiveGasPrice"`
	From              prototyp.Hash     `json:"from"`
	To                prototyp.Hash     `json:"to"`
	Logs              []*TransactionLog `json:"logs"`
	Final             bool              `json:"final"`
	Reorged           bool              `json:"reorged"`
}

type TransactionStatus uint32

const (
	TransactionStatus_FAILED     TransactionStatus = 0
	TransactionStatus_SUCCESSFUL TransactionStatus = 1
)

var TransactionStatus_name = map[uint32]string{
	0: "FAILED",
	1: "SUCCESSFUL",
}

var TransactionStatus_value = map[string]uint32{
	"FAILED":     0,
	"SUCCESSFUL": 1,
}

func (x TransactionStatus) String() string {
	return TransactionStatus_name[uint32(x)]
}

func (x TransactionStatus) MarshalText() ([]byte, error) {
	return []byte(TransactionStatus_name[uint32(x)]), nil
}

func (x *TransactionStatus) UnmarshalText(b []byte) error {
	*x = TransactionStatus(TransactionStatus_value[string(b)])
	return nil
}

func (x *TransactionStatus) Is(values ...TransactionStatus) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type TransactionType uint32

const (
	TransactionType_LegacyTxnType     TransactionType = 0
	TransactionType_AccessListTxnType TransactionType = 1
	TransactionType_DynamicFeeTxnType TransactionType = 2
)

var TransactionType_name = map[uint32]string{
	0: "LegacyTxnType",
	1: "AccessListTxnType",
	2: "DynamicFeeTxnType",
}

var TransactionType_value = map[string]uint32{
	"LegacyTxnType":     0,
	"AccessListTxnType": 1,
	"DynamicFeeTxnType": 2,
}

func (x TransactionType) String() string {
	return TransactionType_name[uint32(x)]
}

func (x TransactionType) MarshalText() ([]byte, error) {
	return []byte(TransactionType_name[uint32(x)]), nil
}

func (x *TransactionType) UnmarshalText(b []byte) error {
	*x = TransactionType(TransactionType_value[string(b)])
	return nil
}

func (x *TransactionType) Is(values ...TransactionType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type TxnInfo struct {
	From  prototyp.Hash   `json:"from" cbor:"from"`
	To    prototyp.Hash   `json:"to" cbor:"to"`
	Value prototyp.BigInt `json:"value" cbor:"value"`
}

type TxnTransfer struct {
	TransferType    TxnTransferType           `json:"transferType" cbor:"1"`
	ContractAddress prototyp.Hash             `json:"contractAddress" cbor:"2"`
	ContractType    ContractType              `json:"contractType" cbor:"3"`
	From            prototyp.Hash             `json:"from" cbor:"4"`
	To              prototyp.Hash             `json:"to" cbor:"5"`
	TokenIds        []prototyp.BigInt         `json:"tokenIds,omitempty" cbor:"6"`
	Amounts         []prototyp.BigInt         `json:"amounts" cbor:"7"`
	LogIndex        uint                      `json:"logIndex" cbor:"8"`
	AmountsUSD      []string                  `json:"amountsUSD,omitempty" cbor:"-"`
	PricesUSD       []string                  `json:"pricesUSD,omitempty" cbor:"-"`
	ContractInfo    *ContractInfo             `json:"contractInfo,omitempty" cbor:"-"`
	TokenMetadata   map[string]*TokenMetadata `json:"tokenMetadata,omitempty" cbor:"-"`
}

type TxnTransferType uint32

const (
	TxnTransferType_UNKNOWN TxnTransferType = 0
	TxnTransferType_SEND    TxnTransferType = 1
	TxnTransferType_RECEIVE TxnTransferType = 2
)

var TxnTransferType_name = map[uint32]string{
	0: "UNKNOWN",
	1: "SEND",
	2: "RECEIVE",
}

var TxnTransferType_value = map[string]uint32{
	"UNKNOWN": 0,
	"SEND":    1,
	"RECEIVE": 2,
}

func (x TxnTransferType) String() string {
	return TxnTransferType_name[uint32(x)]
}

func (x TxnTransferType) MarshalText() ([]byte, error) {
	return []byte(TxnTransferType_name[uint32(x)]), nil
}

func (x *TxnTransferType) UnmarshalText(b []byte) error {
	*x = TxnTransferType(TxnTransferType_value[string(b)])
	return nil
}

func (x *TxnTransferType) Is(values ...TxnTransferType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type Version struct {
	WebrpcVersion string `json:"webrpcVersion"`
	SchemaVersion string `json:"schemaVersion"`
	SchemaHash    string `json:"schemaHash"`
	AppVersion    string `json:"appVersion"`
}

type WALWriterRuntimeStatus struct {
	HealthOK          bool      `json:"healthOK"`
	StartTime         time.Time `json:"startTime"`
	Uptime            uint64    `json:"uptime"`
	Ver               string    `json:"ver"`
	Branch            string    `json:"branch"`
	CommitHash        string    `json:"commitHash"`
	ChainID           uint64    `json:"chainID"`
	PercentWALWritten float64   `json:"percentWALWritten"`
}

type WebhookListener struct {
	ID        uint64       `json:"id" db:"id"`
	ProjectID uint64       `json:"projectID" db:"project_id"`
	Url       string       `json:"url" db:"url"`
	Filters   *EventFilter `json:"filters" db:"filters"`
	Name      string       `json:"name" db:"name"`
	UpdatedAt time.Time    `json:"updatedAt" db:"updated_at"`
	Active    bool         `json:"active" db:"active"`
}

var methods = map[string]method{
	"/rpc/Indexer/AddWebhookListener": {
		Name:        "AddWebhookListener",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/FetchTransactionReceipt": {
		Name:        "FetchTransactionReceipt",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/FetchTransactionReceiptWithFilter": {
		Name:        "FetchTransactionReceiptWithFilter",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetAllWebhookListeners": {
		Name:        "GetAllWebhookListeners",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetBalanceUpdates": {
		Name:        "GetBalanceUpdates",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetChainID": {
		Name:        "GetChainID",
		Service:     "Indexer",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/Indexer/GetEtherBalance": {
		Name:        "GetEtherBalance",
		Service:     "Indexer",
		Annotations: map[string]string{"deprecated": "GetNativeTokenBalance"},
	},
	"/rpc/Indexer/GetMarketplaceOrders": {
		Name:        "GetMarketplaceOrders",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetMarketplaceTopOrders": {
		Name:        "GetMarketplaceTopOrders",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetNativeTokenBalance": {
		Name:        "GetNativeTokenBalance",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetPrices": {
		Name:        "GetPrices",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenBalances": {
		Name:        "GetTokenBalances",
		Service:     "Indexer",
		Annotations: map[string]string{"deprecated": "GetTokenBalancesSummary"},
	},
	"/rpc/Indexer/GetTokenBalancesByContract": {
		Name:        "GetTokenBalancesByContract",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenBalancesDetails": {
		Name:        "GetTokenBalancesDetails",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenBalancesSummary": {
		Name:        "GetTokenBalancesSummary",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenIDRanges": {
		Name:        "GetTokenIDRanges",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenIDs": {
		Name:        "GetTokenIDs",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenSupplies": {
		Name:        "GetTokenSupplies",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTokenSuppliesMap": {
		Name:        "GetTokenSuppliesMap",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetTransactionHistory": {
		Name:        "GetTransactionHistory",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/GetWebhookListener": {
		Name:        "GetWebhookListener",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/PauseAllWebhookListeners": {
		Name:        "PauseAllWebhookListeners",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/Ping": {
		Name:        "Ping",
		Service:     "Indexer",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/Indexer/RemoveAllWebhookListeners": {
		Name:        "RemoveAllWebhookListeners",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/RemoveWebhookListener": {
		Name:        "RemoveWebhookListener",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/ResumeAllWebhookListeners": {
		Name:        "ResumeAllWebhookListeners",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/RuntimeStatus": {
		Name:        "RuntimeStatus",
		Service:     "Indexer",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/Indexer/SubscribeBalanceUpdates": {
		Name:        "SubscribeBalanceUpdates",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/SubscribeEvents": {
		Name:        "SubscribeEvents",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/SubscribeReceipts": {
		Name:        "SubscribeReceipts",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/SyncBalance": {
		Name:        "SyncBalance",
		Service:     "Indexer",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/Indexer/ToggleWebhookListener": {
		Name:        "ToggleWebhookListener",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/UpdateWebhookListener": {
		Name:        "UpdateWebhookListener",
		Service:     "Indexer",
		Annotations: map[string]string{},
	},
	"/rpc/Indexer/Version": {
		Name:        "Version",
		Service:     "Indexer",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/IndexerGateway/GetBalanceUpdates": {
		Name:        "GetBalanceUpdates",
		Service:     "IndexerGateway",
		Annotations: map[string]string{},
	},
	"/rpc/IndexerGateway/GetNativeTokenBalance": {
		Name:        "GetNativeTokenBalance",
		Service:     "IndexerGateway",
		Annotations: map[string]string{},
	},
	"/rpc/IndexerGateway/GetTokenBalances": {
		Name:        "GetTokenBalances",
		Service:     "IndexerGateway",
		Annotations: map[string]string{"deprecated": "Use GetTokenBalancesSummary or GetTokenBalancesDetails instead."},
	},
	"/rpc/IndexerGateway/GetTokenBalancesByContract": {
		Name:        "GetTokenBalancesByContract",
		Service:     "IndexerGateway",
		Annotations: map[string]string{},
	},
	"/rpc/IndexerGateway/GetTokenBalancesDetails": {
		Name:        "GetTokenBalancesDetails",
		Service:     "IndexerGateway",
		Annotations: map[string]string{},
	},
	"/rpc/IndexerGateway/GetTokenBalancesSummary": {
		Name:        "GetTokenBalancesSummary",
		Service:     "IndexerGateway",
		Annotations: map[string]string{},
	},
	"/rpc/IndexerGateway/Ping": {
		Name:        "Ping",
		Service:     "IndexerGateway",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/IndexerGateway/RuntimeStatus": {
		Name:        "RuntimeStatus",
		Service:     "IndexerGateway",
		Annotations: map[string]string{"internal": ""},
	},
	"/rpc/IndexerGateway/Version": {
		Name:        "Version",
		Service:     "IndexerGateway",
		Annotations: map[string]string{"internal": ""},
	},
}

func WebrpcMethods() map[string]method {
	res := make(map[string]method, len(methods))
	for k, v := range methods {
		res[k] = v
	}

	return res
}

var WebRPCServices = map[string][]string{
	"Indexer": {
		"AddWebhookListener",
		"FetchTransactionReceipt",
		"FetchTransactionReceiptWithFilter",
		"GetAllWebhookListeners",
		"GetBalanceUpdates",
		"GetChainID",
		"GetEtherBalance",
		"GetMarketplaceOrders",
		"GetMarketplaceTopOrders",
		"GetNativeTokenBalance",
		"GetPrices",
		"GetTokenBalances",
		"GetTokenBalancesByContract",
		"GetTokenBalancesDetails",
		"GetTokenBalancesSummary",
		"GetTokenIDRanges",
		"GetTokenIDs",
		"GetTokenSupplies",
		"GetTokenSuppliesMap",
		"GetTransactionHistory",
		"GetWebhookListener",
		"PauseAllWebhookListeners",
		"Ping",
		"RemoveAllWebhookListeners",
		"RemoveWebhookListener",
		"ResumeAllWebhookListeners",
		"RuntimeStatus",
		"SubscribeBalanceUpdates",
		"SubscribeEvents",
		"SubscribeReceipts",
		"SyncBalance",
		"ToggleWebhookListener",
		"UpdateWebhookListener",
		"Version",
	},
	"IndexerGateway": {
		"GetBalanceUpdates",
		"GetNativeTokenBalance",
		"GetTokenBalances",
		"GetTokenBalancesByContract",
		"GetTokenBalancesDetails",
		"GetTokenBalancesSummary",
		"Ping",
		"RuntimeStatus",
		"Version",
	},
}

//
// Server types
//

type Indexer interface {
	AddWebhookListener(ctx context.Context, url string, filters *EventFilter, projectId *uint64) (bool, *WebhookListener, error)
	// Fetches a single receipt and then will stop the subscription
	FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error)
	// Fetches a single receipt with filter and then will stop the subscription
	FetchTransactionReceiptWithFilter(ctx context.Context, filter *TransactionFilter, maxBlockWait *int) (*TransactionReceipt, error)
	// Webhooks
	GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error)
	// Get balance update aggregate values -- useful for syncing balance details of a contract, ie. from Skyweaver.
	// Also consider using SubscribeBalanceUpdates or SubscribeEvents as other alternatives.
	GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error)
	// Get the chain ID of the indexer
	GetChainID(ctx context.Context) (uint64, error)
	// Queries an ethereum node for the latest and confirm ETH balances
	// DEPRECATED: use GetNativeTokenBalance instead
	//
	// Deprecated: GetNativeTokenBalance
	GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error)
	// GetMarketplaceOrders queries marketplace orders with filtering and pagination.
	//
	// Retrieves buy orders (offers) and sell orders (listings) from a specific marketplace
	// and collection with comprehensive filtering options.
	//
	// Parameters:
	// marketplaceContractAddress: Target marketplace contract (required)
	// collectionAddress: NFT collection contract (required)
	// filter: MarketplaceOrderFilter with options:
	// - isListing: true=listings, false=offers, omit=both
	// - userAddresses: Include specific users
	// - currencyAddresses: Filter by currencies (empty=all)
	// - orderIds: Filter by specific order ids (empty=all)
	// - tokenIds: Filter by specific tokens (empty=all)
	// - excludeUserAddresses: Exclude specific users
	// - blockNumberGt: Orders greater than block number
	// - createdAtAfter: Orders after timestamp
	// - orderStatuses: Filter by status (OPEN, CLOSED, CANCELLED)
	// - returnExpired: Include expired orders
	// page: Pagination control (optional)
	//
	// Returns: Updated pagination info and array of matching orders
	GetMarketplaceOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceOrderFilter, page *Page) (*Page, []*MarketplaceOrder, error)
	// GetMarketplaceTopOrders finds the most competitive orders for specific tokens.
	//
	// Optimized for price discovery, returns the best available orders for each token.
	// Useful for displaying current market prices and finding trading opportunities.
	//
	// Parameters:
	// marketplaceContractAddress: Target marketplace contract (required)
	// collectionAddress: NFT collection contract (required)
	// filter: MarketplaceTopOrdersFilter with options:
	// - currencyAddresses: Consider specific currencies (empty=all)
	// - tokenIds: Target token IDs (required, non-empty)
	// - isListing: true=listings/sell orders, false=offers/buy orders
	// - priceSort: ASC=lowest first, DESC=highest first
	// - excludeUser: Hide orders from specific user
	//
	// Returns: Array of top-priced active orders, sorted by priceSort preference
	GetMarketplaceTopOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceTopOrdersFilter) ([]*MarketplaceOrder, error)
	// GetNativeTokenBalance queries an ethereum node for the latest native token account balance.
	// The native token is the token of the chain the indexer is connected to, for example, ETH on Ethereum
	// and POL on Polygon.
	GetNativeTokenBalance(ctx context.Context, accountAddress *string, omitPrices *bool) (*NativeTokenBalance, error)
	GetPrices(ctx context.Context, page *Page) (*Page, []*Price, error)
	// GetTokenBalances returns a balance summary/details for a specific account. By default
	// if accountAddress is left empty, it will use the account from the jwt session.
	//
	// Also, if contractAddress is undefined, then it will list all current user coins/collectibles.
	// But, if contractAddress is provided, then it will return the token balances for the contract, this is
	// only useful for 1155, but for other tokens, it can act as a filter for the single balance.
	//
	// DEPRECATED: use GetTokenBalancesSummary / GetTokenBalancesDetails
	//
	// Deprecated: GetTokenBalancesSummary
	GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error)
	// GetTokenBalancesByContract returns a balances for a specific accounts and
	// contracts. The collection ERC721 & ERC1155 tokens are represented as
	// individual balances.
	//
	// If `filter` is not provided, it will error out as it requires at least
	// contract address.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesByContract(ctx context.Context, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*TokenBalance, error)
	// GetTokenBalancesDetails returns a detailed balance summary for a specific
	// accounts. The collection ERC721 & ERC1155 tokens are represented as
	// individual balances.
	//
	// If `filter` is not provided, it will use the filter with account from the
	// jwt session.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesDetails(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error)
	// GetTokenBalancesSummary returns a summary of token balances for a specific
	// accounts. The collection ERC721 & ERC1155 tokens are represented as a
	// single aggregated balance.
	//
	// If `filter` is not provided, it will use the filter with account from the
	// jwt session.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesSummary(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error)
	// GetTokenIDRanges returns the range of tokenIDs for a token collection contract.
	// This is useful for ERC-721 and ERC-1155 contracts to get the range of valid tokenIDs. It is similar to
	// GetTokenIDs, but returns the range of tokenIDs instead of the list of tokenIDs, which is more efficient
	// for large collections and very easy to the caller to expand the range into a list of tokenIDs.
	//
	// NOTE: this method will only return up to 15,000 ranges, if there are more ranges, it will return
	// a boolean to indicate there are more ranges beyond the first 15,000. Therefore, if `moreRanges` is
	// false then you have all the ranges, but if true, you need to make a follow up call to fetch the next
	// page of ranges.
	//
	// As an example, if a NFT collection of 100,000 tokens uses ids from 1,2,3,...,100_000 then this endpoint
	// will return just a single range from [1,100_000], but if there are gaps between the sequence, then
	// those will be broken into separate range entries.
	GetTokenIDRanges(ctx context.Context, contractAddress string, lastTokenID *string) (ContractType, []*TokenIDRange, bool, error)
	// GetTokenIDs returns the list of each individual token id for a token collection contract.
	// This is useful for ERC-721 and ERC-1155 contracts to get the list of valid tokenIDs.
	GetTokenIDs(ctx context.Context, contractAddress string, page *Page) (*Page, ContractType, []string, error)
	// GetTokenSupplies returns the set of tokenIDs used by a contract address, supporting ERC-20, ERC-721, and ERC-1155
	// contracts, and their respective supply as well.
	GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error)
	// GetTokenSuppliesMap returns the token supplies of ERC-20 and ERC-1155 tokens as requested in the `tokenMap`
	// represented as a map of contractAddress :: []tokenIDs.
	//
	// For an ERC-20 specify tokenIDs as an empty array or [0], for example, { '0xdef': [] } or { '0xdef': [0] }
	// For ERC-1155 pass the array of tokens are strings, ie. { '0xabc': ['1', '2', '3'] }
	GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error)
	// History of mined transactions for the account which includes a list of token transfers (sent/recieved)
	// and sent transactions from a Sequence wallet
	GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error)
	GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	PauseAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	// Ping the indexer
	Ping(ctx context.Context) (bool, error)
	RemoveAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error)
	ResumeAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	// Get the current runtime health status of the indexer
	RuntimeStatus(ctx context.Context) (*RuntimeStatus, error)
	// SubscribeBalanceUpdates listens to balance updates for a specific contract address
	SubscribeBalanceUpdates(ctx context.Context, contractAddress string, stream SubscribeBalanceUpdatesStreamWriter) error
	// SubscribeEvents listens to events on-chain based on the filter criteria
	//
	// TODO: some additional options can be passed such as block, reorg true, etc.
	// or stay behind, etc.
	SubscribeEvents(ctx context.Context, filter *EventFilter, stream SubscribeEventsStreamWriter) error
	// Listen to transaction receipts on-chain based on the filter criteria
	SubscribeReceipts(ctx context.Context, filter *TransactionFilter, stream SubscribeReceiptsStreamWriter) error
	// Re-sync an incorrect token balance with the correct on-chain balance
	// NOTE: this method is almost never used, but we've marked it internal in case
	// we ever want to use it again. This method was written a very long time ago in
	// scenarios when the indexer had little bugs, but now its solid.
	SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error
	ToggleWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error)
	// Get the current version of the indexer
	Version(ctx context.Context) (*Version, error)
}

type SubscribeBalanceUpdatesStreamWriter interface {
	Write(balance *TokenBalance) error
}

type SubscribeEventsStreamWriter interface {
	Write(log *EventLog) error
}

type SubscribeReceiptsStreamWriter interface {
	Write(receipt *TransactionReceipt) error
}

type subscribeBalanceUpdatesStreamWriter struct {
	streamWriter
}

func (w *subscribeBalanceUpdatesStreamWriter) Write(balance *TokenBalance) error {
	out := struct {
		Ret0 *TokenBalance `json:"balance"`
	}{
		Ret0: balance,
	}

	return w.streamWriter.write(out)
}

type subscribeEventsStreamWriter struct {
	streamWriter
}

func (w *subscribeEventsStreamWriter) Write(log *EventLog) error {
	out := struct {
		Ret0 *EventLog `json:"log"`
	}{
		Ret0: log,
	}

	return w.streamWriter.write(out)
}

type subscribeReceiptsStreamWriter struct {
	streamWriter
}

func (w *subscribeReceiptsStreamWriter) Write(receipt *TransactionReceipt) error {
	out := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{
		Ret0: receipt,
	}

	return w.streamWriter.write(out)
}

type IndexerGateway interface {
	// GetTokenBalances returns a balance summary/details for an specific account
	// on all indexer nodes. By default if accountAddress is left empty, it will
	// use the account from the jwt session.
	GetBalanceUpdates(ctx context.Context, chainIds []uint64, networks []string, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetNativeTokenBalance queries indexer nodes for the latest native token
	// account balance.
	GetNativeTokenBalance(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, omitPrices *bool) ([]*GatewayNativeTokenBalance, error)
	// GetTokenBalances returns a balance summary/details for a specific account
	// on all indexer nodes. By default if accountAddress is left empty, it will
	// use the account from the jwt session.
	//
	// Deprecated: Use GetTokenBalancesSummary or GetTokenBalancesDetails instead.
	GetTokenBalances(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetTokenBalancesByContract returns a balances for specific accounts and
	// contracts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as individual balances.
	GetTokenBalancesByContract(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetTokenBalancesDetails returns a detailed balance summary for the given
	// accounts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as individual balances.
	GetTokenBalancesDetails(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error)
	// GetTokenBalancesSummary returns a summary of token balances for the given
	// accounts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as a single aggregated balance.
	GetTokenBalancesSummary(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error)
	// Ping the indexer
	Ping(ctx context.Context) (bool, error)
	// Get the current runtime health status of the indexer gatewya
	RuntimeStatus(ctx context.Context) (*GatewayRuntimeStatus, error)
	// Get the current version of the indexer
	Version(ctx context.Context) (*Version, error)
}

type streamWriter struct {
	mu sync.Mutex // Guards concurrent writes to w.
	w  http.ResponseWriter
	f  http.Flusher
	e  *json.Encoder

	sendError func(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError)
}

const StreamKeepAliveInterval = 10 * time.Second

func (w *streamWriter) keepAlive(ctx context.Context) {
	for {
		select {
		case <-time.After(StreamKeepAliveInterval):
			err := w.ping()
			if err != nil {
				return
			}
		case <-ctx.Done():
			return
		}
	}
}

func (w *streamWriter) ping() error {
	defer w.f.Flush()

	w.mu.Lock()
	defer w.mu.Unlock()

	_, err := w.w.Write([]byte("\n"))
	return err
}

func (w *streamWriter) write(respPayload interface{}) error {
	defer w.f.Flush()

	w.mu.Lock()
	defer w.mu.Unlock()

	return w.e.Encode(respPayload)
}

//
// Client types
//

type IndexerClient interface {
	AddWebhookListener(ctx context.Context, url string, filters *EventFilter, projectId *uint64) (bool, *WebhookListener, error)
	// Fetches a single receipt and then will stop the subscription
	FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error)
	// Fetches a single receipt with filter and then will stop the subscription
	FetchTransactionReceiptWithFilter(ctx context.Context, filter *TransactionFilter, maxBlockWait *int) (*TransactionReceipt, error)
	// Webhooks
	GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error)
	// Get balance update aggregate values -- useful for syncing balance details of a contract, ie. from Skyweaver.
	// Also consider using SubscribeBalanceUpdates or SubscribeEvents as other alternatives.
	GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error)
	// Get the chain ID of the indexer
	GetChainID(ctx context.Context) (uint64, error)
	// Queries an ethereum node for the latest and confirm ETH balances
	// DEPRECATED: use GetNativeTokenBalance instead
	//
	// Deprecated: GetNativeTokenBalance
	GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error)
	// GetMarketplaceOrders queries marketplace orders with filtering and pagination.
	//
	// Retrieves buy orders (offers) and sell orders (listings) from a specific marketplace
	// and collection with comprehensive filtering options.
	//
	// Parameters:
	// marketplaceContractAddress: Target marketplace contract (required)
	// collectionAddress: NFT collection contract (required)
	// filter: MarketplaceOrderFilter with options:
	// - isListing: true=listings, false=offers, omit=both
	// - userAddresses: Include specific users
	// - currencyAddresses: Filter by currencies (empty=all)
	// - orderIds: Filter by specific order ids (empty=all)
	// - tokenIds: Filter by specific tokens (empty=all)
	// - excludeUserAddresses: Exclude specific users
	// - blockNumberGt: Orders greater than block number
	// - createdAtAfter: Orders after timestamp
	// - orderStatuses: Filter by status (OPEN, CLOSED, CANCELLED)
	// - returnExpired: Include expired orders
	// page: Pagination control (optional)
	//
	// Returns: Updated pagination info and array of matching orders
	GetMarketplaceOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceOrderFilter, page *Page) (*Page, []*MarketplaceOrder, error)
	// GetMarketplaceTopOrders finds the most competitive orders for specific tokens.
	//
	// Optimized for price discovery, returns the best available orders for each token.
	// Useful for displaying current market prices and finding trading opportunities.
	//
	// Parameters:
	// marketplaceContractAddress: Target marketplace contract (required)
	// collectionAddress: NFT collection contract (required)
	// filter: MarketplaceTopOrdersFilter with options:
	// - currencyAddresses: Consider specific currencies (empty=all)
	// - tokenIds: Target token IDs (required, non-empty)
	// - isListing: true=listings/sell orders, false=offers/buy orders
	// - priceSort: ASC=lowest first, DESC=highest first
	// - excludeUser: Hide orders from specific user
	//
	// Returns: Array of top-priced active orders, sorted by priceSort preference
	GetMarketplaceTopOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceTopOrdersFilter) ([]*MarketplaceOrder, error)
	// GetNativeTokenBalance queries an ethereum node for the latest native token account balance.
	// The native token is the token of the chain the indexer is connected to, for example, ETH on Ethereum
	// and POL on Polygon.
	GetNativeTokenBalance(ctx context.Context, accountAddress *string, omitPrices *bool) (*NativeTokenBalance, error)
	GetPrices(ctx context.Context, page *Page) (*Page, []*Price, error)
	// GetTokenBalances returns a balance summary/details for a specific account. By default
	// if accountAddress is left empty, it will use the account from the jwt session.
	//
	// Also, if contractAddress is undefined, then it will list all current user coins/collectibles.
	// But, if contractAddress is provided, then it will return the token balances for the contract, this is
	// only useful for 1155, but for other tokens, it can act as a filter for the single balance.
	//
	// DEPRECATED: use GetTokenBalancesSummary / GetTokenBalancesDetails
	//
	// Deprecated: GetTokenBalancesSummary
	GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error)
	// GetTokenBalancesByContract returns a balances for a specific accounts and
	// contracts. The collection ERC721 & ERC1155 tokens are represented as
	// individual balances.
	//
	// If `filter` is not provided, it will error out as it requires at least
	// contract address.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesByContract(ctx context.Context, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*TokenBalance, error)
	// GetTokenBalancesDetails returns a detailed balance summary for a specific
	// accounts. The collection ERC721 & ERC1155 tokens are represented as
	// individual balances.
	//
	// If `filter` is not provided, it will use the filter with account from the
	// jwt session.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesDetails(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error)
	// GetTokenBalancesSummary returns a summary of token balances for a specific
	// accounts. The collection ERC721 & ERC1155 tokens are represented as a
	// single aggregated balance.
	//
	// If `filter` is not provided, it will use the filter with account from the
	// jwt session.
	//
	// If `filter.contractStatus` is not provided, it will include verified only
	// tokens.
	GetTokenBalancesSummary(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error)
	// GetTokenIDRanges returns the range of tokenIDs for a token collection contract.
	// This is useful for ERC-721 and ERC-1155 contracts to get the range of valid tokenIDs. It is similar to
	// GetTokenIDs, but returns the range of tokenIDs instead of the list of tokenIDs, which is more efficient
	// for large collections and very easy to the caller to expand the range into a list of tokenIDs.
	//
	// NOTE: this method will only return up to 15,000 ranges, if there are more ranges, it will return
	// a boolean to indicate there are more ranges beyond the first 15,000. Therefore, if `moreRanges` is
	// false then you have all the ranges, but if true, you need to make a follow up call to fetch the next
	// page of ranges.
	//
	// As an example, if a NFT collection of 100,000 tokens uses ids from 1,2,3,...,100_000 then this endpoint
	// will return just a single range from [1,100_000], but if there are gaps between the sequence, then
	// those will be broken into separate range entries.
	GetTokenIDRanges(ctx context.Context, contractAddress string, lastTokenID *string) (ContractType, []*TokenIDRange, bool, error)
	// GetTokenIDs returns the list of each individual token id for a token collection contract.
	// This is useful for ERC-721 and ERC-1155 contracts to get the list of valid tokenIDs.
	GetTokenIDs(ctx context.Context, contractAddress string, page *Page) (*Page, ContractType, []string, error)
	// GetTokenSupplies returns the set of tokenIDs used by a contract address, supporting ERC-20, ERC-721, and ERC-1155
	// contracts, and their respective supply as well.
	GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error)
	// GetTokenSuppliesMap returns the token supplies of ERC-20 and ERC-1155 tokens as requested in the `tokenMap`
	// represented as a map of contractAddress :: []tokenIDs.
	//
	// For an ERC-20 specify tokenIDs as an empty array or [0], for example, { '0xdef': [] } or { '0xdef': [0] }
	// For ERC-1155 pass the array of tokens are strings, ie. { '0xabc': ['1', '2', '3'] }
	GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error)
	// History of mined transactions for the account which includes a list of token transfers (sent/recieved)
	// and sent transactions from a Sequence wallet
	GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error)
	GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	PauseAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	// Ping the indexer
	Ping(ctx context.Context) (bool, error)
	RemoveAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error)
	ResumeAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error)
	// Get the current runtime health status of the indexer
	RuntimeStatus(ctx context.Context) (*RuntimeStatus, error)
	// SubscribeBalanceUpdates listens to balance updates for a specific contract address
	SubscribeBalanceUpdates(ctx context.Context, contractAddress string) (SubscribeBalanceUpdatesStreamReader, error)
	// SubscribeEvents listens to events on-chain based on the filter criteria
	//
	// TODO: some additional options can be passed such as block, reorg true, etc.
	// or stay behind, etc.
	SubscribeEvents(ctx context.Context, filter *EventFilter) (SubscribeEventsStreamReader, error)
	// Listen to transaction receipts on-chain based on the filter criteria
	SubscribeReceipts(ctx context.Context, filter *TransactionFilter) (SubscribeReceiptsStreamReader, error)
	// Re-sync an incorrect token balance with the correct on-chain balance
	// NOTE: this method is almost never used, but we've marked it internal in case
	// we ever want to use it again. This method was written a very long time ago in
	// scenarios when the indexer had little bugs, but now its solid.
	SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error
	ToggleWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error)
	UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error)
	// Get the current version of the indexer
	Version(ctx context.Context) (*Version, error)
}

type SubscribeBalanceUpdatesStreamReader interface {
	Read() (balance *TokenBalance, err error)
}

type SubscribeEventsStreamReader interface {
	Read() (log *EventLog, err error)
}

type SubscribeReceiptsStreamReader interface {
	Read() (receipt *TransactionReceipt, err error)
}

type IndexerGatewayClient interface {
	// GetTokenBalances returns a balance summary/details for an specific account
	// on all indexer nodes. By default if accountAddress is left empty, it will
	// use the account from the jwt session.
	GetBalanceUpdates(ctx context.Context, chainIds []uint64, networks []string, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetNativeTokenBalance queries indexer nodes for the latest native token
	// account balance.
	GetNativeTokenBalance(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, omitPrices *bool) ([]*GatewayNativeTokenBalance, error)
	// GetTokenBalances returns a balance summary/details for a specific account
	// on all indexer nodes. By default if accountAddress is left empty, it will
	// use the account from the jwt session.
	//
	// Deprecated: Use GetTokenBalancesSummary or GetTokenBalancesDetails instead.
	GetTokenBalances(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetTokenBalancesByContract returns a balances for specific accounts and
	// contracts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as individual balances.
	GetTokenBalancesByContract(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayTokenBalance, error)
	// GetTokenBalancesDetails returns a detailed balance summary for the given
	// accounts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as individual balances.
	GetTokenBalancesDetails(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error)
	// GetTokenBalancesSummary returns a summary of token balances for the given
	// accounts on all indexer nodes. The collection ERC721 & ERC1155 tokens are
	// represented as a single aggregated balance.
	GetTokenBalancesSummary(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error)
	// Ping the indexer
	Ping(ctx context.Context) (bool, error)
	// Get the current runtime health status of the indexer gatewya
	RuntimeStatus(ctx context.Context) (*GatewayRuntimeStatus, error)
	// Get the current version of the indexer
	Version(ctx context.Context) (*Version, error)
}

//
// Client
//

const IndexerPathPrefix = "/rpc/Indexer/"
const IndexerGatewayPathPrefix = "/rpc/IndexerGateway/"

type indexerClient struct {
	client HTTPClient
	urls   [34]string
}

func NewIndexerClient(addr string, client HTTPClient) IndexerClient {
	prefix := urlBase(addr) + IndexerPathPrefix
	urls := [34]string{
		prefix + "AddWebhookListener",
		prefix + "FetchTransactionReceipt",
		prefix + "FetchTransactionReceiptWithFilter",
		prefix + "GetAllWebhookListeners",
		prefix + "GetBalanceUpdates",
		prefix + "GetChainID",
		prefix + "GetEtherBalance",
		prefix + "GetMarketplaceOrders",
		prefix + "GetMarketplaceTopOrders",
		prefix + "GetNativeTokenBalance",
		prefix + "GetPrices",
		prefix + "GetTokenBalances",
		prefix + "GetTokenBalancesByContract",
		prefix + "GetTokenBalancesDetails",
		prefix + "GetTokenBalancesSummary",
		prefix + "GetTokenIDRanges",
		prefix + "GetTokenIDs",
		prefix + "GetTokenSupplies",
		prefix + "GetTokenSuppliesMap",
		prefix + "GetTransactionHistory",
		prefix + "GetWebhookListener",
		prefix + "PauseAllWebhookListeners",
		prefix + "Ping",
		prefix + "RemoveAllWebhookListeners",
		prefix + "RemoveWebhookListener",
		prefix + "ResumeAllWebhookListeners",
		prefix + "RuntimeStatus",
		prefix + "SubscribeBalanceUpdates",
		prefix + "SubscribeEvents",
		prefix + "SubscribeReceipts",
		prefix + "SyncBalance",
		prefix + "ToggleWebhookListener",
		prefix + "UpdateWebhookListener",
		prefix + "Version",
	}
	return &indexerClient{
		client: client,
		urls:   urls,
	}
}

func (c *indexerClient) AddWebhookListener(ctx context.Context, url string, filters *EventFilter, projectId *uint64) (bool, *WebhookListener, error) {
	in := struct {
		Arg0 string       `json:"url"`
		Arg1 *EventFilter `json:"filters"`
		Arg2 *uint64      `json:"projectId"`
	}{url, filters, projectId}
	out := struct {
		Ret0 bool             `json:"status"`
		Ret1 *WebhookListener `json:"listener"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) FetchTransactionReceipt(ctx context.Context, txnHash string, maxBlockWait *int) (*TransactionReceipt, error) {
	in := struct {
		Arg0 string `json:"txnHash"`
		Arg1 *int   `json:"maxBlockWait"`
	}{txnHash, maxBlockWait}
	out := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) FetchTransactionReceiptWithFilter(ctx context.Context, filter *TransactionFilter, maxBlockWait *int) (*TransactionReceipt, error) {
	in := struct {
		Arg0 *TransactionFilter `json:"filter"`
		Arg1 *int               `json:"maxBlockWait"`
	}{filter, maxBlockWait}
	out := struct {
		Ret0 *TransactionReceipt `json:"receipt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetAllWebhookListeners(ctx context.Context, projectId *uint64) ([]*WebhookListener, error) {
	in := struct {
		Arg0 *uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 []*WebhookListener `json:"listeners"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetBalanceUpdates(ctx context.Context, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*TokenBalance, error) {
	in := struct {
		Arg0 string  `json:"contractAddress"`
		Arg1 uint64  `json:"lastBlockNumber"`
		Arg2 *string `json:"lastBlockHash"`
		Arg3 *Page   `json:"page"`
	}{contractAddress, lastBlockNumber, lastBlockHash, page}
	out := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetChainID(ctx context.Context) (uint64, error) {
	out := struct {
		Ret0 uint64 `json:"chainID"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetEtherBalance(ctx context.Context, accountAddress *string) (*EtherBalance, error) {
	in := struct {
		Arg0 *string `json:"accountAddress"`
	}{accountAddress}
	out := struct {
		Ret0 *EtherBalance `json:"balance"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetMarketplaceOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceOrderFilter, page *Page) (*Page, []*MarketplaceOrder, error) {
	in := struct {
		Arg0 string                  `json:"marketplaceContractAddress"`
		Arg1 string                  `json:"collectionAddress"`
		Arg2 *MarketplaceOrderFilter `json:"filter"`
		Arg3 *Page                   `json:"page"`
	}{marketplaceContractAddress, collectionAddress, filter, page}
	out := struct {
		Ret0 *Page               `json:"page"`
		Ret1 []*MarketplaceOrder `json:"orders"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetMarketplaceTopOrders(ctx context.Context, marketplaceContractAddress string, collectionAddress string, filter *MarketplaceTopOrdersFilter) ([]*MarketplaceOrder, error) {
	in := struct {
		Arg0 string                      `json:"marketplaceContractAddress"`
		Arg1 string                      `json:"collectionAddress"`
		Arg2 *MarketplaceTopOrdersFilter `json:"filter"`
	}{marketplaceContractAddress, collectionAddress, filter}
	out := struct {
		Ret0 []*MarketplaceOrder `json:"orders"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetNativeTokenBalance(ctx context.Context, accountAddress *string, omitPrices *bool) (*NativeTokenBalance, error) {
	in := struct {
		Arg0 *string `json:"accountAddress"`
		Arg1 *bool   `json:"omitPrices"`
	}{accountAddress, omitPrices}
	out := struct {
		Ret0 *NativeTokenBalance `json:"balance"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[9], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetPrices(ctx context.Context, page *Page) (*Page, []*Price, error) {
	in := struct {
		Arg0 *Page `json:"page"`
	}{page}
	out := struct {
		Ret0 *Page    `json:"page"`
		Ret1 []*Price `json:"prices"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[10], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTokenBalances(ctx context.Context, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*TokenBalance, error) {
	in := struct {
		Arg0 *string          `json:"accountAddress"`
		Arg1 *string          `json:"contractAddress"`
		Arg2 *string          `json:"tokenID"`
		Arg3 *bool            `json:"includeMetadata"`
		Arg4 *MetadataOptions `json:"metadataOptions"`
		Arg5 *bool            `json:"includeCollectionTokens"`
		Arg6 *Page            `json:"page"`
	}{accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page}
	out := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[11], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTokenBalancesByContract(ctx context.Context, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*TokenBalance, error) {
	in := struct {
		Arg0 *TokenBalancesByContractFilter `json:"filter"`
		Arg1 *bool                          `json:"omitMetadata"`
		Arg2 *Page                          `json:"page"`
	}{filter, omitMetadata, page}
	out := struct {
		Ret0 *Page           `json:"page"`
		Ret1 []*TokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[12], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetTokenBalancesDetails(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error) {
	in := struct {
		Arg0 *TokenBalancesFilter `json:"filter"`
		Arg1 *bool                `json:"omitMetadata"`
		Arg2 *Page                `json:"page"`
	}{filter, omitMetadata, page}
	out := struct {
		Ret0 *Page                 `json:"page"`
		Ret1 []*NativeTokenBalance `json:"nativeBalances"`
		Ret2 []*TokenBalance       `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[13], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenBalancesSummary(ctx context.Context, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*NativeTokenBalance, []*TokenBalance, error) {
	in := struct {
		Arg0 *TokenBalancesFilter `json:"filter"`
		Arg1 *bool                `json:"omitMetadata"`
		Arg2 *Page                `json:"page"`
	}{filter, omitMetadata, page}
	out := struct {
		Ret0 *Page                 `json:"page"`
		Ret1 []*NativeTokenBalance `json:"nativeBalances"`
		Ret2 []*TokenBalance       `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[14], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenIDRanges(ctx context.Context, contractAddress string, lastTokenID *string) (ContractType, []*TokenIDRange, bool, error) {
	in := struct {
		Arg0 string  `json:"contractAddress"`
		Arg1 *string `json:"lastTokenID"`
	}{contractAddress, lastTokenID}
	out := struct {
		Ret0 ContractType    `json:"contractType"`
		Ret1 []*TokenIDRange `json:"tokenIDRanges"`
		Ret2 bool            `json:"moreRanges"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[15], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenIDs(ctx context.Context, contractAddress string, page *Page) (*Page, ContractType, []string, error) {
	in := struct {
		Arg0 string `json:"contractAddress"`
		Arg1 *Page  `json:"page"`
	}{contractAddress, page}
	out := struct {
		Ret0 *Page        `json:"page"`
		Ret1 ContractType `json:"contractType"`
		Ret2 []string     `json:"tokenIDs"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[16], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenSupplies(ctx context.Context, contractAddress string, includeMetadata *bool, metadataOptions *MetadataOptions, page *Page) (*Page, ContractType, []*TokenSupply, error) {
	in := struct {
		Arg0 string           `json:"contractAddress"`
		Arg1 *bool            `json:"includeMetadata"`
		Arg2 *MetadataOptions `json:"metadataOptions"`
		Arg3 *Page            `json:"page"`
	}{contractAddress, includeMetadata, metadataOptions, page}
	out := struct {
		Ret0 *Page          `json:"page"`
		Ret1 ContractType   `json:"contractType"`
		Ret2 []*TokenSupply `json:"tokenIDs"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[17], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerClient) GetTokenSuppliesMap(ctx context.Context, tokenMap map[string][]string, includeMetadata *bool, metadataOptions *MetadataOptions) (map[string][]*TokenSupply, error) {
	in := struct {
		Arg0 map[string][]string `json:"tokenMap"`
		Arg1 *bool               `json:"includeMetadata"`
		Arg2 *MetadataOptions    `json:"metadataOptions"`
	}{tokenMap, includeMetadata, metadataOptions}
	out := struct {
		Ret0 map[string][]*TokenSupply `json:"supplies"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[18], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) GetTransactionHistory(ctx context.Context, filter *TransactionHistoryFilter, page *Page, includeMetadata *bool, metadataOptions *MetadataOptions) (*Page, []*Transaction, error) {
	in := struct {
		Arg0 *TransactionHistoryFilter `json:"filter"`
		Arg1 *Page                     `json:"page"`
		Arg2 *bool                     `json:"includeMetadata"`
		Arg3 *MetadataOptions          `json:"metadataOptions"`
	}{filter, page, includeMetadata, metadataOptions}
	out := struct {
		Ret0 *Page          `json:"page"`
		Ret1 []*Transaction `json:"transactions"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[19], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerClient) GetWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error) {
	in := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{id, projectId}
	out := struct {
		Ret0 *WebhookListener `json:"listener"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[20], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) PauseAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 *uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[21], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) Ping(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[22], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) RemoveAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 *uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[23], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) RemoveWebhookListener(ctx context.Context, id uint64, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{id, projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[24], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) ResumeAllWebhookListeners(ctx context.Context, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 *uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[25], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	out := struct {
		Ret0 *RuntimeStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[26], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) SubscribeBalanceUpdates(ctx context.Context, contractAddress string) (SubscribeBalanceUpdatesStreamReader, error) {
	in := struct {
		Arg0 string `json:"contractAddress"`
	}{contractAddress}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[27], in, nil)
	if err != nil {
		if resp != nil {
			resp.Body.Close()
		}
		return nil, err
	}

	buf := bufio.NewReader(resp.Body)
	return &subscribeBalanceUpdatesStreamReader{streamReader{ctx: ctx, c: resp.Body, r: buf}}, nil
}

type subscribeBalanceUpdatesStreamReader struct {
	streamReader
}

func (r *subscribeBalanceUpdatesStreamReader) Read() (*TokenBalance, error) {
	out := struct {
		Ret0        *TokenBalance `json:"balance"`
		WebRPCError *WebRPCError  `json:"webrpcError"`
	}{}

	err := r.streamReader.read(&out)
	if err != nil {
		return out.Ret0, err
	}

	if out.WebRPCError != nil {
		return out.Ret0, out.WebRPCError
	}

	return out.Ret0, nil
}

func (c *indexerClient) SubscribeEvents(ctx context.Context, filter *EventFilter) (SubscribeEventsStreamReader, error) {
	in := struct {
		Arg0 *EventFilter `json:"filter"`
	}{filter}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[28], in, nil)
	if err != nil {
		if resp != nil {
			resp.Body.Close()
		}
		return nil, err
	}

	buf := bufio.NewReader(resp.Body)
	return &subscribeEventsStreamReader{streamReader{ctx: ctx, c: resp.Body, r: buf}}, nil
}

type subscribeEventsStreamReader struct {
	streamReader
}

func (r *subscribeEventsStreamReader) Read() (*EventLog, error) {
	out := struct {
		Ret0        *EventLog    `json:"log"`
		WebRPCError *WebRPCError `json:"webrpcError"`
	}{}

	err := r.streamReader.read(&out)
	if err != nil {
		return out.Ret0, err
	}

	if out.WebRPCError != nil {
		return out.Ret0, out.WebRPCError
	}

	return out.Ret0, nil
}

func (c *indexerClient) SubscribeReceipts(ctx context.Context, filter *TransactionFilter) (SubscribeReceiptsStreamReader, error) {
	in := struct {
		Arg0 *TransactionFilter `json:"filter"`
	}{filter}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[29], in, nil)
	if err != nil {
		if resp != nil {
			resp.Body.Close()
		}
		return nil, err
	}

	buf := bufio.NewReader(resp.Body)
	return &subscribeReceiptsStreamReader{streamReader{ctx: ctx, c: resp.Body, r: buf}}, nil
}

type subscribeReceiptsStreamReader struct {
	streamReader
}

func (r *subscribeReceiptsStreamReader) Read() (*TransactionReceipt, error) {
	out := struct {
		Ret0        *TransactionReceipt `json:"receipt"`
		WebRPCError *WebRPCError        `json:"webrpcError"`
	}{}

	err := r.streamReader.read(&out)
	if err != nil {
		return out.Ret0, err
	}

	if out.WebRPCError != nil {
		return out.Ret0, out.WebRPCError
	}

	return out.Ret0, nil
}

func (c *indexerClient) SyncBalance(ctx context.Context, accountAddress string, contractAddress string, tokenID *string) error {
	in := struct {
		Arg0 string  `json:"accountAddress"`
		Arg1 string  `json:"contractAddress"`
		Arg2 *string `json:"tokenID"`
	}{accountAddress, contractAddress, tokenID}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[30], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *indexerClient) ToggleWebhookListener(ctx context.Context, id uint64, projectId *uint64) (*WebhookListener, error) {
	in := struct {
		Arg0 uint64  `json:"id"`
		Arg1 *uint64 `json:"projectId"`
	}{id, projectId}
	out := struct {
		Ret0 *WebhookListener `json:"webhookListener"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[31], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) UpdateWebhookListener(ctx context.Context, listener *WebhookListener, projectId *uint64) (bool, error) {
	in := struct {
		Arg0 *WebhookListener `json:"listener"`
		Arg1 *uint64          `json:"projectId"`
	}{listener, projectId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[32], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerClient) Version(ctx context.Context) (*Version, error) {
	out := struct {
		Ret0 *Version `json:"version"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[33], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type indexerGatewayClient struct {
	client HTTPClient
	urls   [9]string
}

func NewIndexerGatewayClient(addr string, client HTTPClient) IndexerGatewayClient {
	prefix := urlBase(addr) + IndexerGatewayPathPrefix
	urls := [9]string{
		prefix + "GetBalanceUpdates",
		prefix + "GetNativeTokenBalance",
		prefix + "GetTokenBalances",
		prefix + "GetTokenBalancesByContract",
		prefix + "GetTokenBalancesDetails",
		prefix + "GetTokenBalancesSummary",
		prefix + "Ping",
		prefix + "RuntimeStatus",
		prefix + "Version",
	}
	return &indexerGatewayClient{
		client: client,
		urls:   urls,
	}
}

func (c *indexerGatewayClient) GetBalanceUpdates(ctx context.Context, chainIds []uint64, networks []string, contractAddress string, lastBlockNumber uint64, lastBlockHash *string, page *Page) (*Page, []*GatewayTokenBalance, error) {
	in := struct {
		Arg0 []uint64 `json:"chainIds"`
		Arg1 []string `json:"networks"`
		Arg2 string   `json:"contractAddress"`
		Arg3 uint64   `json:"lastBlockNumber"`
		Arg4 *string  `json:"lastBlockHash"`
		Arg5 *Page    `json:"page"`
	}{chainIds, networks, contractAddress, lastBlockNumber, lastBlockHash, page}
	out := struct {
		Ret0 *Page                  `json:"page"`
		Ret1 []*GatewayTokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerGatewayClient) GetNativeTokenBalance(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, omitPrices *bool) ([]*GatewayNativeTokenBalance, error) {
	in := struct {
		Arg0 []uint64 `json:"chainIds"`
		Arg1 []string `json:"networks"`
		Arg2 *string  `json:"accountAddress"`
		Arg3 *bool    `json:"omitPrices"`
	}{chainIds, networks, accountAddress, omitPrices}
	out := struct {
		Ret0 []*GatewayNativeTokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerGatewayClient) GetTokenBalances(ctx context.Context, chainIds []uint64, networks []string, accountAddress *string, contractAddress *string, tokenID *string, includeMetadata *bool, metadataOptions *MetadataOptions, includeCollectionTokens *bool, page *Page) (*Page, []*GatewayTokenBalance, error) {
	in := struct {
		Arg0 []uint64         `json:"chainIds"`
		Arg1 []string         `json:"networks"`
		Arg2 *string          `json:"accountAddress"`
		Arg3 *string          `json:"contractAddress"`
		Arg4 *string          `json:"tokenID"`
		Arg5 *bool            `json:"includeMetadata"`
		Arg6 *MetadataOptions `json:"metadataOptions"`
		Arg7 *bool            `json:"includeCollectionTokens"`
		Arg8 *Page            `json:"page"`
	}{chainIds, networks, accountAddress, contractAddress, tokenID, includeMetadata, metadataOptions, includeCollectionTokens, page}
	out := struct {
		Ret0 *Page                  `json:"page"`
		Ret1 []*GatewayTokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerGatewayClient) GetTokenBalancesByContract(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesByContractFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayTokenBalance, error) {
	in := struct {
		Arg0 []uint64                       `json:"chainIds"`
		Arg1 []string                       `json:"networks"`
		Arg2 *TokenBalancesByContractFilter `json:"filter"`
		Arg3 *bool                          `json:"omitMetadata"`
		Arg4 *Page                          `json:"page"`
	}{chainIds, networks, filter, omitMetadata, page}
	out := struct {
		Ret0 *Page                  `json:"page"`
		Ret1 []*GatewayTokenBalance `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *indexerGatewayClient) GetTokenBalancesDetails(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error) {
	in := struct {
		Arg0 []uint64             `json:"chainIds"`
		Arg1 []string             `json:"networks"`
		Arg2 *TokenBalancesFilter `json:"filter"`
		Arg3 *bool                `json:"omitMetadata"`
		Arg4 *Page                `json:"page"`
	}{chainIds, networks, filter, omitMetadata, page}
	out := struct {
		Ret0 *Page                         `json:"page"`
		Ret1 []*GatewayNativeTokenBalances `json:"nativeBalances"`
		Ret2 []*GatewayTokenBalance        `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerGatewayClient) GetTokenBalancesSummary(ctx context.Context, chainIds []uint64, networks []string, filter *TokenBalancesFilter, omitMetadata *bool, page *Page) (*Page, []*GatewayNativeTokenBalances, []*GatewayTokenBalance, error) {
	in := struct {
		Arg0 []uint64             `json:"chainIds"`
		Arg1 []string             `json:"networks"`
		Arg2 *TokenBalancesFilter `json:"filter"`
		Arg3 *bool                `json:"omitMetadata"`
		Arg4 *Page                `json:"page"`
	}{chainIds, networks, filter, omitMetadata, page}
	out := struct {
		Ret0 *Page                         `json:"page"`
		Ret1 []*GatewayNativeTokenBalances `json:"nativeBalances"`
		Ret2 []*GatewayTokenBalance        `json:"balances"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *indexerGatewayClient) Ping(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerGatewayClient) RuntimeStatus(ctx context.Context) (*GatewayRuntimeStatus, error) {
	out := struct {
		Ret0 *GatewayRuntimeStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *indexerGatewayClient) Version(ctx context.Context) (*Version, error) {
	out := struct {
		Ret0 *Version `json:"version"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type streamReader struct {
	ctx context.Context
	c   io.Closer
	r   *bufio.Reader
}

func (r *streamReader) read(v interface{}) error {
	for {
		select {
		case <-r.ctx.Done():
			r.c.Close()
			return ErrWebrpcClientDisconnected.WithCause(r.ctx.Err())
		default:
		}

		line, err := r.r.ReadBytes('\n')
		if err != nil {
			return r.handleReadError(err)
		}

		// Eat newlines (keep-alive pings).
		if len(line) == 1 && line[0] == '\n' {
			continue
		}

		if err := json.Unmarshal(line, &v); err != nil {
			return r.handleReadError(err)
		}
		return nil
	}
}

func (r *streamReader) handleReadError(err error) error {
	defer r.c.Close()
	if errors.Is(err, io.EOF) {
		return ErrWebrpcStreamFinished.WithCause(err)
	}
	if errors.Is(err, io.ErrUnexpectedEOF) {
		return ErrWebrpcStreamLost.WithCause(err)
	}
	if errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {
		return ErrWebrpcClientDisconnected.WithCause(err)
	}
	return ErrWebrpcBadResponse.WithCausef("reading stream: %w", err)
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequestWithContext(ctx, "POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set(WebrpcHeader, WebrpcHeaderValue)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doHTTPRequest is common code to make a request to the remote service.
func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("failed to marshal JSON body: %w", err)
	}
	if err = ctx.Err(); err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("aborted because context was done: %w", err)
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("could not build request: %w", err)
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(err)
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to read server error response body: %w", err)
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to unmarshal server error: %w", err)
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return nil, rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to read response body: %w", err)
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to unmarshal JSON response body: %w", err)
		}
	}

	return resp, nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type method struct {
	Name        string
	Service     string
	Annotations map[string]string
}

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPRequestCtxKey              = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}

func MethodCtx(ctx context.Context) (method, bool) {
	req := RequestFromContext(ctx)
	if req == nil {
		return method{}, false
	}

	m, ok := methods[req.URL.Path]
	if !ok {
		return method{}, false
	}

	return m, true
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

func (e WebRPCError) WithCausef(format string, args ...interface{}) WebRPCError {
	cause := fmt.Errorf(format, args...)
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint           = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed      = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute           = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod          = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest         = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse        = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic        = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError      = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
	ErrWebrpcClientDisconnected = WebRPCError{Code: -8, Name: "WebrpcClientDisconnected", Message: "client disconnected", HTTPStatus: 400}
	ErrWebrpcStreamLost         = WebRPCError{Code: -9, Name: "WebrpcStreamLost", Message: "stream lost", HTTPStatus: 400}
	ErrWebrpcStreamFinished     = WebRPCError{Code: -10, Name: "WebrpcStreamFinished", Message: "stream finished", HTTPStatus: 200}
)

// Schema errors
var (
	ErrAborted            = WebRPCError{Code: 1005, Name: "Aborted", Message: "Request aborted", HTTPStatus: 400}
	ErrAccessKeyMismatch  = WebRPCError{Code: 1102, Name: "AccessKeyMismatch", Message: "Access key mismatch", HTTPStatus: 409}
	ErrAccessKeyNotFound  = WebRPCError{Code: 1101, Name: "AccessKeyNotFound", Message: "Access key not found", HTTPStatus: 401}
	ErrAtLeastOneKey      = WebRPCError{Code: 1302, Name: "AtLeastOneKey", Message: "You need at least one Access Key", HTTPStatus: 403}
	ErrGeoblocked         = WebRPCError{Code: 1006, Name: "Geoblocked", Message: "Geoblocked region", HTTPStatus: 451}
	ErrInvalidArgument    = WebRPCError{Code: 2001, Name: "InvalidArgument", Message: "Invalid argument", HTTPStatus: 400}
	ErrInvalidOrigin      = WebRPCError{Code: 1103, Name: "InvalidOrigin", Message: "Invalid origin for Access Key", HTTPStatus: 403}
	ErrInvalidService     = WebRPCError{Code: 1104, Name: "InvalidService", Message: "Service not enabled for Access key", HTTPStatus: 403}
	ErrMaxAccessKeys      = WebRPCError{Code: 1301, Name: "MaxAccessKeys", Message: "Access keys limit reached", HTTPStatus: 403}
	ErrMetadataCallFailed = WebRPCError{Code: 3003, Name: "MetadataCallFailed", Message: "Metadata service call failed", HTTPStatus: 400}
	ErrMethodNotFound     = WebRPCError{Code: 1003, Name: "MethodNotFound", Message: "Method not found", HTTPStatus: 404}
	ErrNoDefaultKey       = WebRPCError{Code: 1300, Name: "NoDefaultKey", Message: "No default access key found", HTTPStatus: 403}
	ErrNotFound           = WebRPCError{Code: 3000, Name: "NotFound", Message: "Resource not found", HTTPStatus: 400}
	ErrPermissionDenied   = WebRPCError{Code: 1001, Name: "PermissionDenied", Message: "Permission denied", HTTPStatus: 403}
	ErrProjectNotFound    = WebRPCError{Code: 1100, Name: "ProjectNotFound", Message: "Project not found", HTTPStatus: 401}
	ErrQueryFailed        = WebRPCError{Code: 2003, Name: "QueryFailed", Message: "Query failed", HTTPStatus: 400}
	ErrQuotaExceeded      = WebRPCError{Code: 1200, Name: "QuotaExceeded", Message: "Quota exceeded", HTTPStatus: 429}
	ErrRateLimit          = WebRPCError{Code: 1201, Name: "RateLimit", Message: "Rate limit exceeded", HTTPStatus: 429}
	ErrRateLimited        = WebRPCError{Code: 1007, Name: "RateLimited", Message: "Rate-limited. Please slow down.", HTTPStatus: 429}
	ErrRequestConflict    = WebRPCError{Code: 1004, Name: "RequestConflict", Message: "Conflict with target resource", HTTPStatus: 409}
	ErrResourceExhausted  = WebRPCError{Code: 2004, Name: "ResourceExhausted", Message: "Resource exhausted", HTTPStatus: 400}
	ErrSessionExpired     = WebRPCError{Code: 1002, Name: "SessionExpired", Message: "Session expired", HTTPStatus: 403}
	ErrTimeout            = WebRPCError{Code: 1900, Name: "Timeout", Message: "Request timed out", HTTPStatus: 408}
	ErrUnauthorized       = WebRPCError{Code: 1000, Name: "Unauthorized", Message: "Unauthorized access", HTTPStatus: 401}
	ErrUnauthorizedUser   = WebRPCError{Code: 1105, Name: "UnauthorizedUser", Message: "Unauthorized user", HTTPStatus: 403}
	ErrUnavailable        = WebRPCError{Code: 2002, Name: "Unavailable", Message: "Unavailable resource", HTTPStatus: 400}
)
