// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0xsequence/go-sequence/metadata (interfaces: Metadata)
//
// Generated by this command:
//
//	mockgen -destination metadata.mock.go -package metadata . Metadata
//

// Package metadata is a generated GoMock package.
package metadata

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetadata is a mock of Metadata interface.
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
	isgomock struct{}
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata.
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance.
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return m.recorder
}

// AbortContractSync mocks base method.
func (m *MockMetadata) AbortContractSync(ctx context.Context, taskID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortContractSync", ctx, taskID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortContractSync indicates an expected call of AbortContractSync.
func (mr *MockMetadataMockRecorder) AbortContractSync(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortContractSync", reflect.TypeOf((*MockMetadata)(nil).AbortContractSync), ctx, taskID)
}

// AddContractToMintMonitor mocks base method.
func (m *MockMetadata) AddContractToMintMonitor(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContractToMintMonitor", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContractToMintMonitor indicates an expected call of AddContractToMintMonitor.
func (mr *MockMetadataMockRecorder) AddContractToMintMonitor(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContractToMintMonitor", reflect.TypeOf((*MockMetadata)(nil).AddContractToMintMonitor), ctx, chainID, contractAddress)
}

// CancelRefreshJob mocks base method.
func (m *MockMetadata) CancelRefreshJob(ctx context.Context, taskId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRefreshJob", ctx, taskId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRefreshJob indicates an expected call of CancelRefreshJob.
func (mr *MockMetadataMockRecorder) CancelRefreshJob(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRefreshJob", reflect.TypeOf((*MockMetadata)(nil).CancelRefreshJob), ctx, taskId)
}

// ContractSyncJobStatus mocks base method.
func (m *MockMetadata) ContractSyncJobStatus(ctx context.Context, taskID uint64) (*Task, *Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractSyncJobStatus", ctx, taskID)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(*Task)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContractSyncJobStatus indicates an expected call of ContractSyncJobStatus.
func (mr *MockMetadataMockRecorder) ContractSyncJobStatus(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractSyncJobStatus", reflect.TypeOf((*MockMetadata)(nil).ContractSyncJobStatus), ctx, taskID)
}

// DirectoryGetCollections mocks base method.
func (m *MockMetadata) DirectoryGetCollections(ctx context.Context, chainId *uint64, includeTestnets, onlyFeatured *bool, page *Page) ([]*ContractInfo, *Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectoryGetCollections", ctx, chainId, includeTestnets, onlyFeatured, page)
	ret0, _ := ret[0].([]*ContractInfo)
	ret1, _ := ret[1].(*Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DirectoryGetCollections indicates an expected call of DirectoryGetCollections.
func (mr *MockMetadataMockRecorder) DirectoryGetCollections(ctx, chainId, includeTestnets, onlyFeatured, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryGetCollections", reflect.TypeOf((*MockMetadata)(nil).DirectoryGetCollections), ctx, chainId, includeTestnets, onlyFeatured, page)
}

// DirectoryGetNetworks mocks base method.
func (m *MockMetadata) DirectoryGetNetworks(ctx context.Context, includeTestnets, onlyFeatured *bool) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectoryGetNetworks", ctx, includeTestnets, onlyFeatured)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirectoryGetNetworks indicates an expected call of DirectoryGetNetworks.
func (mr *MockMetadataMockRecorder) DirectoryGetNetworks(ctx, includeTestnets, onlyFeatured any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryGetNetworks", reflect.TypeOf((*MockMetadata)(nil).DirectoryGetNetworks), ctx, includeTestnets, onlyFeatured)
}

// DirectorySearchCollections mocks base method.
func (m *MockMetadata) DirectorySearchCollections(ctx context.Context, query string, chainId *uint64, includeTestnets, onlyFeatured *bool, page *Page) ([]*ContractInfo, *Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectorySearchCollections", ctx, query, chainId, includeTestnets, onlyFeatured, page)
	ret0, _ := ret[0].([]*ContractInfo)
	ret1, _ := ret[1].(*Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DirectorySearchCollections indicates an expected call of DirectorySearchCollections.
func (mr *MockMetadataMockRecorder) DirectorySearchCollections(ctx, query, chainId, includeTestnets, onlyFeatured, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectorySearchCollections", reflect.TypeOf((*MockMetadata)(nil).DirectorySearchCollections), ctx, query, chainId, includeTestnets, onlyFeatured, page)
}

// EnqueueTokensForRefresh mocks base method.
func (m *MockMetadata) EnqueueTokensForRefresh(ctx context.Context, chainID, contractAddress string, tokenIDs []string, refreshAll *bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTokensForRefresh", ctx, chainID, contractAddress, tokenIDs, refreshAll)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueTokensForRefresh indicates an expected call of EnqueueTokensForRefresh.
func (mr *MockMetadataMockRecorder) EnqueueTokensForRefresh(ctx, chainID, contractAddress, tokenIDs, refreshAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTokensForRefresh", reflect.TypeOf((*MockMetadata)(nil).EnqueueTokensForRefresh), ctx, chainID, contractAddress, tokenIDs, refreshAll)
}

// GetContractInfo mocks base method.
func (m *MockMetadata) GetContractInfo(ctx context.Context, chainID, contractAddress string) (*ContractInfo, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfo", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(*ContractInfo)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractInfo indicates an expected call of GetContractInfo.
func (mr *MockMetadataMockRecorder) GetContractInfo(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfo", reflect.TypeOf((*MockMetadata)(nil).GetContractInfo), ctx, chainID, contractAddress)
}

// GetContractInfoBatch mocks base method.
func (m *MockMetadata) GetContractInfoBatch(ctx context.Context, chainID string, contractAddresses []string) (map[string]*ContractInfo, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfoBatch", ctx, chainID, contractAddresses)
	ret0, _ := ret[0].(map[string]*ContractInfo)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractInfoBatch indicates an expected call of GetContractInfoBatch.
func (mr *MockMetadataMockRecorder) GetContractInfoBatch(ctx, chainID, contractAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfoBatch", reflect.TypeOf((*MockMetadata)(nil).GetContractInfoBatch), ctx, chainID, contractAddresses)
}

// GetNiftyswapTokenQuantity mocks base method.
func (m *MockMetadata) GetNiftyswapTokenQuantity(ctx context.Context, chainID, contractAddress string, tokenIDs []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapTokenQuantity", ctx, chainID, contractAddress, tokenIDs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapTokenQuantity indicates an expected call of GetNiftyswapTokenQuantity.
func (mr *MockMetadataMockRecorder) GetNiftyswapTokenQuantity(ctx, chainID, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapTokenQuantity", reflect.TypeOf((*MockMetadata)(nil).GetNiftyswapTokenQuantity), ctx, chainID, contractAddress, tokenIDs)
}

// GetNiftyswapUnitPrices mocks base method.
func (m *MockMetadata) GetNiftyswapUnitPrices(ctx context.Context, chainID, contractAddress string, req *GetNiftyswapUnitPricesRequest, fresh bool) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapUnitPrices", ctx, chainID, contractAddress, req, fresh)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapUnitPrices indicates an expected call of GetNiftyswapUnitPrices.
func (mr *MockMetadataMockRecorder) GetNiftyswapUnitPrices(ctx, chainID, contractAddress, req, fresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapUnitPrices", reflect.TypeOf((*MockMetadata)(nil).GetNiftyswapUnitPrices), ctx, chainID, contractAddress, req, fresh)
}

// GetNiftyswapUnitPricesWithQuantities mocks base method.
func (m *MockMetadata) GetNiftyswapUnitPricesWithQuantities(ctx context.Context, chainID, contractAddress string, req *GetNiftyswapUnitPricesRequest, fresh bool) (map[string]*GetNiftyswapUnitPricesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNiftyswapUnitPricesWithQuantities", ctx, chainID, contractAddress, req, fresh)
	ret0, _ := ret[0].(map[string]*GetNiftyswapUnitPricesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNiftyswapUnitPricesWithQuantities indicates an expected call of GetNiftyswapUnitPricesWithQuantities.
func (mr *MockMetadataMockRecorder) GetNiftyswapUnitPricesWithQuantities(ctx, chainID, contractAddress, req, fresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNiftyswapUnitPricesWithQuantities", reflect.TypeOf((*MockMetadata)(nil).GetNiftyswapUnitPricesWithQuantities), ctx, chainID, contractAddress, req, fresh)
}

// GetTask mocks base method.
func (m *MockMetadata) GetTask(ctx context.Context, taskId uint64) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskId)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockMetadataMockRecorder) GetTask(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockMetadata)(nil).GetTask), ctx, taskId)
}

// GetTaskStatus mocks base method.
func (m *MockMetadata) GetTaskStatus(ctx context.Context, taskId uint64) (*TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, taskId)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockMetadataMockRecorder) GetTaskStatus(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockMetadata)(nil).GetTaskStatus), ctx, taskId)
}

// GetTokenMetadata mocks base method.
func (m *MockMetadata) GetTokenMetadata(ctx context.Context, chainID, contractAddress string, tokenIDs []string) ([]*TokenMetadata, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadata", ctx, chainID, contractAddress, tokenIDs)
	ret0, _ := ret[0].([]*TokenMetadata)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenMetadata indicates an expected call of GetTokenMetadata.
func (mr *MockMetadataMockRecorder) GetTokenMetadata(ctx, chainID, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadata", reflect.TypeOf((*MockMetadata)(nil).GetTokenMetadata), ctx, chainID, contractAddress, tokenIDs)
}

// GetTokenMetadataBatch mocks base method.
func (m *MockMetadata) GetTokenMetadataBatch(ctx context.Context, chainID string, contractTokenMap map[string][]string) (map[string][]*TokenMetadata, *uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadataBatch", ctx, chainID, contractTokenMap)
	ret0, _ := ret[0].(map[string][]*TokenMetadata)
	ret1, _ := ret[1].(*uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenMetadataBatch indicates an expected call of GetTokenMetadataBatch.
func (mr *MockMetadataMockRecorder) GetTokenMetadataBatch(ctx, chainID, contractTokenMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadataBatch", reflect.TypeOf((*MockMetadata)(nil).GetTokenMetadataBatch), ctx, chainID, contractTokenMap)
}

// GetTokenRefreshResult mocks base method.
func (m *MockMetadata) GetTokenRefreshResult(ctx context.Context, taskId uint64) (*TaskStatus, map[string]bool, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRefreshResult", ctx, taskId)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(map[string]bool)
	ret2, _ := ret[2].(map[string]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTokenRefreshResult indicates an expected call of GetTokenRefreshResult.
func (mr *MockMetadataMockRecorder) GetTokenRefreshResult(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRefreshResult", reflect.TypeOf((*MockMetadata)(nil).GetTokenRefreshResult), ctx, taskId)
}

// GetTokenRefreshStatus mocks base method.
func (m *MockMetadata) GetTokenRefreshStatus(ctx context.Context, taskId uint64) (*TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRefreshStatus", ctx, taskId)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenRefreshStatus indicates an expected call of GetTokenRefreshStatus.
func (mr *MockMetadataMockRecorder) GetTokenRefreshStatus(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRefreshStatus", reflect.TypeOf((*MockMetadata)(nil).GetTokenRefreshStatus), ctx, taskId)
}

// MintMonitorJobStatus mocks base method.
func (m *MockMetadata) MintMonitorJobStatus(ctx context.Context, chainID, contractAddress string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintMonitorJobStatus", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintMonitorJobStatus indicates an expected call of MintMonitorJobStatus.
func (mr *MockMetadataMockRecorder) MintMonitorJobStatus(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintMonitorJobStatus", reflect.TypeOf((*MockMetadata)(nil).MintMonitorJobStatus), ctx, chainID, contractAddress)
}

// MintMonitorTriggerJob mocks base method.
func (m *MockMetadata) MintMonitorTriggerJob(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintMonitorTriggerJob", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintMonitorTriggerJob indicates an expected call of MintMonitorTriggerJob.
func (mr *MockMetadataMockRecorder) MintMonitorTriggerJob(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintMonitorTriggerJob", reflect.TypeOf((*MockMetadata)(nil).MintMonitorTriggerJob), ctx, chainID, contractAddress)
}

// Ping mocks base method.
func (m *MockMetadata) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMetadataMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetadata)(nil).Ping), ctx)
}

// RefreshAllContractTokens mocks base method.
func (m *MockMetadata) RefreshAllContractTokens(ctx context.Context, chainHandle, contractAddress string) (*uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAllContractTokens", ctx, chainHandle, contractAddress)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshAllContractTokens indicates an expected call of RefreshAllContractTokens.
func (mr *MockMetadataMockRecorder) RefreshAllContractTokens(ctx, chainHandle, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAllContractTokens", reflect.TypeOf((*MockMetadata)(nil).RefreshAllContractTokens), ctx, chainHandle, contractAddress)
}

// RefreshContractInfo mocks base method.
func (m *MockMetadata) RefreshContractInfo(ctx context.Context, chainHandle, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshContractInfo", ctx, chainHandle, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshContractInfo indicates an expected call of RefreshContractInfo.
func (mr *MockMetadataMockRecorder) RefreshContractInfo(ctx, chainHandle, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshContractInfo", reflect.TypeOf((*MockMetadata)(nil).RefreshContractInfo), ctx, chainHandle, contractAddress)
}

// RefreshContractTokens mocks base method.
func (m *MockMetadata) RefreshContractTokens(ctx context.Context, chainHandle, contractAddress string, tokenIDs []string) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshContractTokens", ctx, chainHandle, contractAddress, tokenIDs)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshContractTokens indicates an expected call of RefreshContractTokens.
func (mr *MockMetadataMockRecorder) RefreshContractTokens(ctx, chainHandle, contractAddress, tokenIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshContractTokens", reflect.TypeOf((*MockMetadata)(nil).RefreshContractTokens), ctx, chainHandle, contractAddress, tokenIDs)
}

// RefreshTokenMetadata mocks base method.
func (m *MockMetadata) RefreshTokenMetadata(ctx context.Context, chainID, contractAddress string, tokenIDs []string, refreshAll *bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenMetadata", ctx, chainID, contractAddress, tokenIDs, refreshAll)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenMetadata indicates an expected call of RefreshTokenMetadata.
func (mr *MockMetadataMockRecorder) RefreshTokenMetadata(ctx, chainID, contractAddress, tokenIDs, refreshAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenMetadata", reflect.TypeOf((*MockMetadata)(nil).RefreshTokenMetadata), ctx, chainID, contractAddress, tokenIDs, refreshAll)
}

// RemoveContractFromMintMonitor mocks base method.
func (m *MockMetadata) RemoveContractFromMintMonitor(ctx context.Context, chainID, contractAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContractFromMintMonitor", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveContractFromMintMonitor indicates an expected call of RemoveContractFromMintMonitor.
func (mr *MockMetadataMockRecorder) RemoveContractFromMintMonitor(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContractFromMintMonitor", reflect.TypeOf((*MockMetadata)(nil).RemoveContractFromMintMonitor), ctx, chainID, contractAddress)
}

// RuntimeStatus mocks base method.
func (m *MockMetadata) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeStatus", ctx)
	ret0, _ := ret[0].(*RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeStatus indicates an expected call of RuntimeStatus.
func (mr *MockMetadataMockRecorder) RuntimeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeStatus", reflect.TypeOf((*MockMetadata)(nil).RuntimeStatus), ctx)
}

// SearchContractInfo mocks base method.
func (m *MockMetadata) SearchContractInfo(ctx context.Context, contractAddress string) ([]*ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContractInfo", ctx, contractAddress)
	ret0, _ := ret[0].([]*ContractInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContractInfo indicates an expected call of SearchContractInfo.
func (mr *MockMetadataMockRecorder) SearchContractInfo(ctx, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContractInfo", reflect.TypeOf((*MockMetadata)(nil).SearchContractInfo), ctx, contractAddress)
}

// SearchContractInfoBatch mocks base method.
func (m *MockMetadata) SearchContractInfoBatch(ctx context.Context, contractAddresses []string) (map[string][]*ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContractInfoBatch", ctx, contractAddresses)
	ret0, _ := ret[0].(map[string][]*ContractInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContractInfoBatch indicates an expected call of SearchContractInfoBatch.
func (mr *MockMetadataMockRecorder) SearchContractInfoBatch(ctx, contractAddresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContractInfoBatch", reflect.TypeOf((*MockMetadata)(nil).SearchContractInfoBatch), ctx, contractAddresses)
}

// SearchContracts mocks base method.
func (m *MockMetadata) SearchContracts(ctx context.Context, q string, chainID *string, chainIDs []string, types []ContractType, page *Page) ([]*ContractInfo, *Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContracts", ctx, q, chainID, chainIDs, types, page)
	ret0, _ := ret[0].([]*ContractInfo)
	ret1, _ := ret[1].(*Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchContracts indicates an expected call of SearchContracts.
func (mr *MockMetadataMockRecorder) SearchContracts(ctx, q, chainID, chainIDs, types, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContracts", reflect.TypeOf((*MockMetadata)(nil).SearchContracts), ctx, q, chainID, chainIDs, types, page)
}

// SearchMetadata mocks base method.
func (m *MockMetadata) SearchMetadata(ctx context.Context, filter string, chainID *string, types []ContractType, excludeTokenMetadata *bool) ([]*TokenMetadata, []*ContractInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMetadata", ctx, filter, chainID, types, excludeTokenMetadata)
	ret0, _ := ret[0].([]*TokenMetadata)
	ret1, _ := ret[1].([]*ContractInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMetadata indicates an expected call of SearchMetadata.
func (mr *MockMetadataMockRecorder) SearchMetadata(ctx, filter, chainID, types, excludeTokenMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMetadata", reflect.TypeOf((*MockMetadata)(nil).SearchMetadata), ctx, filter, chainID, types, excludeTokenMetadata)
}

// SearchTokenIDs mocks base method.
func (m *MockMetadata) SearchTokenIDs(ctx context.Context, chainID, contractAddress string, filter *Filter, page *Page) (*Page, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokenIDs", ctx, chainID, contractAddress, filter, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokenIDs indicates an expected call of SearchTokenIDs.
func (mr *MockMetadataMockRecorder) SearchTokenIDs(ctx, chainID, contractAddress, filter, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokenIDs", reflect.TypeOf((*MockMetadata)(nil).SearchTokenIDs), ctx, chainID, contractAddress, filter, page)
}

// SearchTokenMetadata mocks base method.
func (m *MockMetadata) SearchTokenMetadata(ctx context.Context, chainID, contractAddress string, filter *Filter, page *Page) (*Page, []*TokenMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokenMetadata", ctx, chainID, contractAddress, filter, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*TokenMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokenMetadata indicates an expected call of SearchTokenMetadata.
func (mr *MockMetadataMockRecorder) SearchTokenMetadata(ctx, chainID, contractAddress, filter, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokenMetadata", reflect.TypeOf((*MockMetadata)(nil).SearchTokenMetadata), ctx, chainID, contractAddress, filter, page)
}

// SearchTokens mocks base method.
func (m *MockMetadata) SearchTokens(ctx context.Context, q string, chainID *string, page *Page) ([]*TokenMetadata, *Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTokens", ctx, q, chainID, page)
	ret0, _ := ret[0].([]*TokenMetadata)
	ret1, _ := ret[1].(*Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTokens indicates an expected call of SearchTokens.
func (mr *MockMetadataMockRecorder) SearchTokens(ctx, q, chainID, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTokens", reflect.TypeOf((*MockMetadata)(nil).SearchTokens), ctx, q, chainID, page)
}

// SyncContractTokens mocks base method.
func (m *MockMetadata) SyncContractTokens(ctx context.Context, chainID, contractAddress string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncContractTokens", ctx, chainID, contractAddress)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncContractTokens indicates an expected call of SyncContractTokens.
func (mr *MockMetadataMockRecorder) SyncContractTokens(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncContractTokens", reflect.TypeOf((*MockMetadata)(nil).SyncContractTokens), ctx, chainID, contractAddress)
}

// TokenCollectionFilters mocks base method.
func (m *MockMetadata) TokenCollectionFilters(ctx context.Context, chainID, contractAddress string) ([]*PropertyFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenCollectionFilters", ctx, chainID, contractAddress)
	ret0, _ := ret[0].([]*PropertyFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenCollectionFilters indicates an expected call of TokenCollectionFilters.
func (mr *MockMetadataMockRecorder) TokenCollectionFilters(ctx, chainID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenCollectionFilters", reflect.TypeOf((*MockMetadata)(nil).TokenCollectionFilters), ctx, chainID, contractAddress)
}

// Version mocks base method.
func (m *MockMetadata) Version(ctx context.Context) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockMetadataMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockMetadata)(nil).Version), ctx)
}
