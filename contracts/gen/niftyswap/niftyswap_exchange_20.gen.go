// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package niftyswap

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/0xsequence/ethkit/go-ethereum"
	"github.com/0xsequence/ethkit/go-ethereum/accounts/abi"
	"github.com/0xsequence/ethkit/go-ethereum/accounts/abi/bind"
	"github.com/0xsequence/ethkit/go-ethereum/common"
	"github.com/0xsequence/ethkit/go-ethereum/core/types"
	"github.com/0xsequence/ethkit/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NiftyswapExchange20MetaData contains all meta data concerning the NiftyswapExchange20 contract.
var NiftyswapExchange20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currencyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensSoldAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencyBoughtAmounts\",\"type\":\"uint256[]\"}],\"name\":\"CurrencyPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensBoughtIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensBoughtAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"currencySoldAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TokensPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokensBoughtAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetBoughtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetSoldReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetBoughtReserve\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrencyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getCurrencyReserves\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokensBought\",\"type\":\"uint256[]\"}],\"name\":\"getPrice_currencyToToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokensSold\",\"type\":\"uint256[]\"}],\"name\":\"getPrice_tokenToCurrency\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetSoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetSoldReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetBoughtReserve\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "",
}

// NiftyswapExchange20ABI is the input ABI used to generate the binding from.
// Deprecated: Use NiftyswapExchange20MetaData.ABI instead.
var NiftyswapExchange20ABI = NiftyswapExchange20MetaData.ABI

// NiftyswapExchange20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NiftyswapExchange20MetaData.Bin instead.
var NiftyswapExchange20Bin = NiftyswapExchange20MetaData.Bin

// DeployNiftyswapExchange20 deploys a new Ethereum contract, binding an instance of NiftyswapExchange20 to it.
func DeployNiftyswapExchange20(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenAddr common.Address, _currencyAddr common.Address) (common.Address, *types.Transaction, *NiftyswapExchange20, error) {
	parsed, err := NiftyswapExchange20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NiftyswapExchange20Bin), backend, _tokenAddr, _currencyAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NiftyswapExchange20{NiftyswapExchange20Caller: NiftyswapExchange20Caller{contract: contract}, NiftyswapExchange20Transactor: NiftyswapExchange20Transactor{contract: contract}, NiftyswapExchange20Filterer: NiftyswapExchange20Filterer{contract: contract}}, nil
}

// NiftyswapExchange20 is an auto generated Go binding around an Ethereum contract.
type NiftyswapExchange20 struct {
	NiftyswapExchange20Caller     // Read-only binding to the contract
	NiftyswapExchange20Transactor // Write-only binding to the contract
	NiftyswapExchange20Filterer   // Log filterer for contract events
}

// NiftyswapExchange20Caller is an auto generated read-only Go binding around an Ethereum contract.
type NiftyswapExchange20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NiftyswapExchange20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type NiftyswapExchange20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NiftyswapExchange20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NiftyswapExchange20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NiftyswapExchange20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NiftyswapExchange20Session struct {
	Contract     *NiftyswapExchange20 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NiftyswapExchange20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NiftyswapExchange20CallerSession struct {
	Contract *NiftyswapExchange20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// NiftyswapExchange20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NiftyswapExchange20TransactorSession struct {
	Contract     *NiftyswapExchange20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// NiftyswapExchange20Raw is an auto generated low-level Go binding around an Ethereum contract.
type NiftyswapExchange20Raw struct {
	Contract *NiftyswapExchange20 // Generic contract binding to access the raw methods on
}

// NiftyswapExchange20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NiftyswapExchange20CallerRaw struct {
	Contract *NiftyswapExchange20Caller // Generic read-only contract binding to access the raw methods on
}

// NiftyswapExchange20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NiftyswapExchange20TransactorRaw struct {
	Contract *NiftyswapExchange20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewNiftyswapExchange20 creates a new instance of NiftyswapExchange20, bound to a specific deployed contract.
func NewNiftyswapExchange20(address common.Address, backend bind.ContractBackend) (*NiftyswapExchange20, error) {
	contract, err := bindNiftyswapExchange20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20{NiftyswapExchange20Caller: NiftyswapExchange20Caller{contract: contract}, NiftyswapExchange20Transactor: NiftyswapExchange20Transactor{contract: contract}, NiftyswapExchange20Filterer: NiftyswapExchange20Filterer{contract: contract}}, nil
}

// NewNiftyswapExchange20Caller creates a new read-only instance of NiftyswapExchange20, bound to a specific deployed contract.
func NewNiftyswapExchange20Caller(address common.Address, caller bind.ContractCaller) (*NiftyswapExchange20Caller, error) {
	contract, err := bindNiftyswapExchange20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20Caller{contract: contract}, nil
}

// NewNiftyswapExchange20Transactor creates a new write-only instance of NiftyswapExchange20, bound to a specific deployed contract.
func NewNiftyswapExchange20Transactor(address common.Address, transactor bind.ContractTransactor) (*NiftyswapExchange20Transactor, error) {
	contract, err := bindNiftyswapExchange20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20Transactor{contract: contract}, nil
}

// NewNiftyswapExchange20Filterer creates a new log filterer instance of NiftyswapExchange20, bound to a specific deployed contract.
func NewNiftyswapExchange20Filterer(address common.Address, filterer bind.ContractFilterer) (*NiftyswapExchange20Filterer, error) {
	contract, err := bindNiftyswapExchange20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20Filterer{contract: contract}, nil
}

// bindNiftyswapExchange20 binds a generic wrapper to an already deployed contract.
func bindNiftyswapExchange20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NiftyswapExchange20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NiftyswapExchange20 *NiftyswapExchange20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NiftyswapExchange20.Contract.NiftyswapExchange20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NiftyswapExchange20 *NiftyswapExchange20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.NiftyswapExchange20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NiftyswapExchange20 *NiftyswapExchange20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.NiftyswapExchange20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NiftyswapExchange20 *NiftyswapExchange20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NiftyswapExchange20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address _owner, uint256 _id) view returns(uint256)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) BalanceOf(opts *bind.CallOpts, _owner common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "balanceOf", _owner, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address _owner, uint256 _id) view returns(uint256)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) BalanceOf(_owner common.Address, _id *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.BalanceOf(&_NiftyswapExchange20.CallOpts, _owner, _id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address _owner, uint256 _id) view returns(uint256)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) BalanceOf(_owner common.Address, _id *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.BalanceOf(&_NiftyswapExchange20.CallOpts, _owner, _id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) BalanceOfBatch(opts *bind.CallOpts, _owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "balanceOfBatch", _owners, _ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) BalanceOfBatch(_owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.BalanceOfBatch(&_NiftyswapExchange20.CallOpts, _owners, _ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) BalanceOfBatch(_owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.BalanceOfBatch(&_NiftyswapExchange20.CallOpts, _owners, _ids)
}

// GetBuyPrice is a free data retrieval call binding the contract method 0xfca16c3b.
//
// Solidity: function getBuyPrice(uint256 _assetBoughtAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetBuyPrice(opts *bind.CallOpts, _assetBoughtAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getBuyPrice", _assetBoughtAmount, _assetSoldReserve, _assetBoughtReserve)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBuyPrice is a free data retrieval call binding the contract method 0xfca16c3b.
//
// Solidity: function getBuyPrice(uint256 _assetBoughtAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetBuyPrice(_assetBoughtAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetBuyPrice(&_NiftyswapExchange20.CallOpts, _assetBoughtAmount, _assetSoldReserve, _assetBoughtReserve)
}

// GetBuyPrice is a free data retrieval call binding the contract method 0xfca16c3b.
//
// Solidity: function getBuyPrice(uint256 _assetBoughtAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetBuyPrice(_assetBoughtAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetBuyPrice(&_NiftyswapExchange20.CallOpts, _assetBoughtAmount, _assetSoldReserve, _assetBoughtReserve)
}

// GetCurrencyInfo is a free data retrieval call binding the contract method 0x46adf5ca.
//
// Solidity: function getCurrencyInfo() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetCurrencyInfo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getCurrencyInfo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCurrencyInfo is a free data retrieval call binding the contract method 0x46adf5ca.
//
// Solidity: function getCurrencyInfo() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetCurrencyInfo() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetCurrencyInfo(&_NiftyswapExchange20.CallOpts)
}

// GetCurrencyInfo is a free data retrieval call binding the contract method 0x46adf5ca.
//
// Solidity: function getCurrencyInfo() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetCurrencyInfo() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetCurrencyInfo(&_NiftyswapExchange20.CallOpts)
}

// GetCurrencyReserves is a free data retrieval call binding the contract method 0x209b96c5.
//
// Solidity: function getCurrencyReserves(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetCurrencyReserves(opts *bind.CallOpts, _ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getCurrencyReserves", _ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetCurrencyReserves is a free data retrieval call binding the contract method 0x209b96c5.
//
// Solidity: function getCurrencyReserves(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetCurrencyReserves(_ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetCurrencyReserves(&_NiftyswapExchange20.CallOpts, _ids)
}

// GetCurrencyReserves is a free data retrieval call binding the contract method 0x209b96c5.
//
// Solidity: function getCurrencyReserves(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetCurrencyReserves(_ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetCurrencyReserves(&_NiftyswapExchange20.CallOpts, _ids)
}

// GetFactoryAddress is a free data retrieval call binding the contract method 0xa9c2e36c.
//
// Solidity: function getFactoryAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetFactoryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getFactoryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFactoryAddress is a free data retrieval call binding the contract method 0xa9c2e36c.
//
// Solidity: function getFactoryAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetFactoryAddress() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetFactoryAddress(&_NiftyswapExchange20.CallOpts)
}

// GetFactoryAddress is a free data retrieval call binding the contract method 0xa9c2e36c.
//
// Solidity: function getFactoryAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetFactoryAddress() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetFactoryAddress(&_NiftyswapExchange20.CallOpts)
}

// GetPriceCurrencyToToken is a free data retrieval call binding the contract method 0xbe571468.
//
// Solidity: function getPrice_currencyToToken(uint256[] _ids, uint256[] _tokensBought) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetPriceCurrencyToToken(opts *bind.CallOpts, _ids []*big.Int, _tokensBought []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getPrice_currencyToToken", _ids, _tokensBought)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetPriceCurrencyToToken is a free data retrieval call binding the contract method 0xbe571468.
//
// Solidity: function getPrice_currencyToToken(uint256[] _ids, uint256[] _tokensBought) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetPriceCurrencyToToken(_ids []*big.Int, _tokensBought []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetPriceCurrencyToToken(&_NiftyswapExchange20.CallOpts, _ids, _tokensBought)
}

// GetPriceCurrencyToToken is a free data retrieval call binding the contract method 0xbe571468.
//
// Solidity: function getPrice_currencyToToken(uint256[] _ids, uint256[] _tokensBought) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetPriceCurrencyToToken(_ids []*big.Int, _tokensBought []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetPriceCurrencyToToken(&_NiftyswapExchange20.CallOpts, _ids, _tokensBought)
}

// GetPriceTokenToCurrency is a free data retrieval call binding the contract method 0x863ed300.
//
// Solidity: function getPrice_tokenToCurrency(uint256[] _ids, uint256[] _tokensSold) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetPriceTokenToCurrency(opts *bind.CallOpts, _ids []*big.Int, _tokensSold []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getPrice_tokenToCurrency", _ids, _tokensSold)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetPriceTokenToCurrency is a free data retrieval call binding the contract method 0x863ed300.
//
// Solidity: function getPrice_tokenToCurrency(uint256[] _ids, uint256[] _tokensSold) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetPriceTokenToCurrency(_ids []*big.Int, _tokensSold []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetPriceTokenToCurrency(&_NiftyswapExchange20.CallOpts, _ids, _tokensSold)
}

// GetPriceTokenToCurrency is a free data retrieval call binding the contract method 0x863ed300.
//
// Solidity: function getPrice_tokenToCurrency(uint256[] _ids, uint256[] _tokensSold) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetPriceTokenToCurrency(_ids []*big.Int, _tokensSold []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetPriceTokenToCurrency(&_NiftyswapExchange20.CallOpts, _ids, _tokensSold)
}

// GetSellPrice is a free data retrieval call binding the contract method 0x6ee8e134.
//
// Solidity: function getSellPrice(uint256 _assetSoldAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetSellPrice(opts *bind.CallOpts, _assetSoldAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getSellPrice", _assetSoldAmount, _assetSoldReserve, _assetBoughtReserve)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSellPrice is a free data retrieval call binding the contract method 0x6ee8e134.
//
// Solidity: function getSellPrice(uint256 _assetSoldAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetSellPrice(_assetSoldAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetSellPrice(&_NiftyswapExchange20.CallOpts, _assetSoldAmount, _assetSoldReserve, _assetBoughtReserve)
}

// GetSellPrice is a free data retrieval call binding the contract method 0x6ee8e134.
//
// Solidity: function getSellPrice(uint256 _assetSoldAmount, uint256 _assetSoldReserve, uint256 _assetBoughtReserve) pure returns(uint256 price)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetSellPrice(_assetSoldAmount *big.Int, _assetSoldReserve *big.Int, _assetBoughtReserve *big.Int) (*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetSellPrice(&_NiftyswapExchange20.CallOpts, _assetSoldAmount, _assetSoldReserve, _assetBoughtReserve)
}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetTokenAddress() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetTokenAddress(&_NiftyswapExchange20.CallOpts)
}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetTokenAddress() (common.Address, error) {
	return _NiftyswapExchange20.Contract.GetTokenAddress(&_NiftyswapExchange20.CallOpts)
}

// GetTotalSupply is a free data retrieval call binding the contract method 0x2bef5e38.
//
// Solidity: function getTotalSupply(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) GetTotalSupply(opts *bind.CallOpts, _ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "getTotalSupply", _ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTotalSupply is a free data retrieval call binding the contract method 0x2bef5e38.
//
// Solidity: function getTotalSupply(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) GetTotalSupply(_ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetTotalSupply(&_NiftyswapExchange20.CallOpts, _ids)
}

// GetTotalSupply is a free data retrieval call binding the contract method 0x2bef5e38.
//
// Solidity: function getTotalSupply(uint256[] _ids) view returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) GetTotalSupply(_ids []*big.Int) ([]*big.Int, error) {
	return _NiftyswapExchange20.Contract.GetTotalSupply(&_NiftyswapExchange20.CallOpts, _ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool isOperator)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "isApprovedForAll", _owner, _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool isOperator)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _NiftyswapExchange20.Contract.IsApprovedForAll(&_NiftyswapExchange20.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool isOperator)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _NiftyswapExchange20.Contract.IsApprovedForAll(&_NiftyswapExchange20.CallOpts, _owner, _operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_NiftyswapExchange20 *NiftyswapExchange20Caller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _NiftyswapExchange20.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _NiftyswapExchange20.Contract.SupportsInterface(&_NiftyswapExchange20.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_NiftyswapExchange20 *NiftyswapExchange20CallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _NiftyswapExchange20.Contract.SupportsInterface(&_NiftyswapExchange20.CallOpts, interfaceID)
}

// BuyTokens is a paid mutator transaction binding the contract method 0xa7220bec.
//
// Solidity: function buyTokens(uint256[] _tokenIds, uint256[] _tokensBoughtAmounts, uint256 _maxCurrency, uint256 _deadline, address _recipient) returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) BuyTokens(opts *bind.TransactOpts, _tokenIds []*big.Int, _tokensBoughtAmounts []*big.Int, _maxCurrency *big.Int, _deadline *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "buyTokens", _tokenIds, _tokensBoughtAmounts, _maxCurrency, _deadline, _recipient)
}

// BuyTokens is a paid mutator transaction binding the contract method 0xa7220bec.
//
// Solidity: function buyTokens(uint256[] _tokenIds, uint256[] _tokensBoughtAmounts, uint256 _maxCurrency, uint256 _deadline, address _recipient) returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20Session) BuyTokens(_tokenIds []*big.Int, _tokensBoughtAmounts []*big.Int, _maxCurrency *big.Int, _deadline *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.BuyTokens(&_NiftyswapExchange20.TransactOpts, _tokenIds, _tokensBoughtAmounts, _maxCurrency, _deadline, _recipient)
}

// BuyTokens is a paid mutator transaction binding the contract method 0xa7220bec.
//
// Solidity: function buyTokens(uint256[] _tokenIds, uint256[] _tokensBoughtAmounts, uint256 _maxCurrency, uint256 _deadline, address _recipient) returns(uint256[])
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) BuyTokens(_tokenIds []*big.Int, _tokensBoughtAmounts []*big.Int, _maxCurrency *big.Int, _deadline *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.BuyTokens(&_NiftyswapExchange20.TransactOpts, _tokenIds, _tokensBoughtAmounts, _maxCurrency, _deadline, _recipient)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address _from, uint256[] _ids, uint256[] _amounts, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, _from common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "onERC1155BatchReceived", arg0, _from, _ids, _amounts, _data)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address _from, uint256[] _ids, uint256[] _amounts, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) OnERC1155BatchReceived(arg0 common.Address, _from common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.OnERC1155BatchReceived(&_NiftyswapExchange20.TransactOpts, arg0, _from, _ids, _amounts, _data)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address _from, uint256[] _ids, uint256[] _amounts, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) OnERC1155BatchReceived(arg0 common.Address, _from common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.OnERC1155BatchReceived(&_NiftyswapExchange20.TransactOpts, arg0, _from, _ids, _amounts, _data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) OnERC1155Received(opts *bind.TransactOpts, _operator common.Address, _from common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "onERC1155Received", _operator, _from, _id, _amount, _data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20Session) OnERC1155Received(_operator common.Address, _from common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.OnERC1155Received(&_NiftyswapExchange20.TransactOpts, _operator, _from, _id, _amount, _data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes _data) returns(bytes4)
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) OnERC1155Received(_operator common.Address, _from common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.OnERC1155Received(&_NiftyswapExchange20.TransactOpts, _operator, _from, _id, _amount, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _amounts, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "safeBatchTransferFrom", _from, _to, _ids, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _amounts, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Session) SafeBatchTransferFrom(_from common.Address, _to common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SafeBatchTransferFrom(&_NiftyswapExchange20.TransactOpts, _from, _to, _ids, _amounts, _data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _amounts, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) SafeBatchTransferFrom(_from common.Address, _to common.Address, _ids []*big.Int, _amounts []*big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SafeBatchTransferFrom(&_NiftyswapExchange20.TransactOpts, _from, _to, _ids, _amounts, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "safeTransferFrom", _from, _to, _id, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Session) SafeTransferFrom(_from common.Address, _to common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SafeTransferFrom(&_NiftyswapExchange20.TransactOpts, _from, _to, _id, _amount, _data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes _data) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _id *big.Int, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SafeTransferFrom(&_NiftyswapExchange20.TransactOpts, _from, _to, _id, _amount, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Session) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SetApprovalForAll(&_NiftyswapExchange20.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.SetApprovalForAll(&_NiftyswapExchange20.TransactOpts, _operator, _approved)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Transactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_NiftyswapExchange20 *NiftyswapExchange20Session) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.Fallback(&_NiftyswapExchange20.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_NiftyswapExchange20 *NiftyswapExchange20TransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NiftyswapExchange20.Contract.Fallback(&_NiftyswapExchange20.TransactOpts, calldata)
}

// NiftyswapExchange20ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20ApprovalForAllIterator struct {
	Event *NiftyswapExchange20ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20ApprovalForAll represents a ApprovalForAll event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*NiftyswapExchange20ApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20ApprovalForAllIterator{contract: _NiftyswapExchange20.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20ApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20ApprovalForAll)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseApprovalForAll(log types.Log) (*NiftyswapExchange20ApprovalForAll, error) {
	event := new(NiftyswapExchange20ApprovalForAll)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20CurrencyPurchaseIterator is returned from FilterCurrencyPurchase and is used to iterate over the raw logs and unpacked data for CurrencyPurchase events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20CurrencyPurchaseIterator struct {
	Event *NiftyswapExchange20CurrencyPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20CurrencyPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20CurrencyPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20CurrencyPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20CurrencyPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20CurrencyPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20CurrencyPurchase represents a CurrencyPurchase event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20CurrencyPurchase struct {
	Buyer                 common.Address
	Recipient             common.Address
	TokensSoldIds         []*big.Int
	TokensSoldAmounts     []*big.Int
	CurrencyBoughtAmounts []*big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterCurrencyPurchase is a free log retrieval operation binding the contract event 0x89e4dbdd48f69e7920342e9ad9691b9a7150f254e6a0af177ccfd2556aab8bcd.
//
// Solidity: event CurrencyPurchase(address indexed buyer, address indexed recipient, uint256[] tokensSoldIds, uint256[] tokensSoldAmounts, uint256[] currencyBoughtAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterCurrencyPurchase(opts *bind.FilterOpts, buyer []common.Address, recipient []common.Address) (*NiftyswapExchange20CurrencyPurchaseIterator, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "CurrencyPurchase", buyerRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20CurrencyPurchaseIterator{contract: _NiftyswapExchange20.contract, event: "CurrencyPurchase", logs: logs, sub: sub}, nil
}

// WatchCurrencyPurchase is a free log subscription operation binding the contract event 0x89e4dbdd48f69e7920342e9ad9691b9a7150f254e6a0af177ccfd2556aab8bcd.
//
// Solidity: event CurrencyPurchase(address indexed buyer, address indexed recipient, uint256[] tokensSoldIds, uint256[] tokensSoldAmounts, uint256[] currencyBoughtAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchCurrencyPurchase(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20CurrencyPurchase, buyer []common.Address, recipient []common.Address) (event.Subscription, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "CurrencyPurchase", buyerRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20CurrencyPurchase)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "CurrencyPurchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCurrencyPurchase is a log parse operation binding the contract event 0x89e4dbdd48f69e7920342e9ad9691b9a7150f254e6a0af177ccfd2556aab8bcd.
//
// Solidity: event CurrencyPurchase(address indexed buyer, address indexed recipient, uint256[] tokensSoldIds, uint256[] tokensSoldAmounts, uint256[] currencyBoughtAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseCurrencyPurchase(log types.Log) (*NiftyswapExchange20CurrencyPurchase, error) {
	event := new(NiftyswapExchange20CurrencyPurchase)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "CurrencyPurchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20LiquidityAddedIterator is returned from FilterLiquidityAdded and is used to iterate over the raw logs and unpacked data for LiquidityAdded events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20LiquidityAddedIterator struct {
	Event *NiftyswapExchange20LiquidityAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20LiquidityAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20LiquidityAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20LiquidityAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20LiquidityAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20LiquidityAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20LiquidityAdded represents a LiquidityAdded event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20LiquidityAdded struct {
	Provider        common.Address
	TokenIds        []*big.Int
	TokenAmounts    []*big.Int
	CurrencyAmounts []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLiquidityAdded is a free log retrieval operation binding the contract event 0x403f9dc4582dae52d3eeb4a22d37540ffb13c32d964c92ec5ac0d3d5628da316.
//
// Solidity: event LiquidityAdded(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterLiquidityAdded(opts *bind.FilterOpts, provider []common.Address) (*NiftyswapExchange20LiquidityAddedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "LiquidityAdded", providerRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20LiquidityAddedIterator{contract: _NiftyswapExchange20.contract, event: "LiquidityAdded", logs: logs, sub: sub}, nil
}

// WatchLiquidityAdded is a free log subscription operation binding the contract event 0x403f9dc4582dae52d3eeb4a22d37540ffb13c32d964c92ec5ac0d3d5628da316.
//
// Solidity: event LiquidityAdded(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchLiquidityAdded(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20LiquidityAdded, provider []common.Address) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "LiquidityAdded", providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20LiquidityAdded)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidityAdded is a log parse operation binding the contract event 0x403f9dc4582dae52d3eeb4a22d37540ffb13c32d964c92ec5ac0d3d5628da316.
//
// Solidity: event LiquidityAdded(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseLiquidityAdded(log types.Log) (*NiftyswapExchange20LiquidityAdded, error) {
	event := new(NiftyswapExchange20LiquidityAdded)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "LiquidityAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20LiquidityRemovedIterator is returned from FilterLiquidityRemoved and is used to iterate over the raw logs and unpacked data for LiquidityRemoved events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20LiquidityRemovedIterator struct {
	Event *NiftyswapExchange20LiquidityRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20LiquidityRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20LiquidityRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20LiquidityRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20LiquidityRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20LiquidityRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20LiquidityRemoved represents a LiquidityRemoved event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20LiquidityRemoved struct {
	Provider        common.Address
	TokenIds        []*big.Int
	TokenAmounts    []*big.Int
	CurrencyAmounts []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLiquidityRemoved is a free log retrieval operation binding the contract event 0x711e9bcb94b4cf7bc99c1cb938edc75ac7e85a136838e90abf6ee1f5adebd423.
//
// Solidity: event LiquidityRemoved(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterLiquidityRemoved(opts *bind.FilterOpts, provider []common.Address) (*NiftyswapExchange20LiquidityRemovedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "LiquidityRemoved", providerRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20LiquidityRemovedIterator{contract: _NiftyswapExchange20.contract, event: "LiquidityRemoved", logs: logs, sub: sub}, nil
}

// WatchLiquidityRemoved is a free log subscription operation binding the contract event 0x711e9bcb94b4cf7bc99c1cb938edc75ac7e85a136838e90abf6ee1f5adebd423.
//
// Solidity: event LiquidityRemoved(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchLiquidityRemoved(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20LiquidityRemoved, provider []common.Address) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "LiquidityRemoved", providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20LiquidityRemoved)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidityRemoved is a log parse operation binding the contract event 0x711e9bcb94b4cf7bc99c1cb938edc75ac7e85a136838e90abf6ee1f5adebd423.
//
// Solidity: event LiquidityRemoved(address indexed provider, uint256[] tokenIds, uint256[] tokenAmounts, uint256[] currencyAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseLiquidityRemoved(log types.Log) (*NiftyswapExchange20LiquidityRemoved, error) {
	event := new(NiftyswapExchange20LiquidityRemoved)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "LiquidityRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20TokensPurchaseIterator is returned from FilterTokensPurchase and is used to iterate over the raw logs and unpacked data for TokensPurchase events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TokensPurchaseIterator struct {
	Event *NiftyswapExchange20TokensPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20TokensPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20TokensPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20TokensPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20TokensPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20TokensPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20TokensPurchase represents a TokensPurchase event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TokensPurchase struct {
	Buyer               common.Address
	Recipient           common.Address
	TokensBoughtIds     []*big.Int
	TokensBoughtAmounts []*big.Int
	CurrencySoldAmounts []*big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTokensPurchase is a free log retrieval operation binding the contract event 0xd38bc77e62e239476b3e25620d73f29a4a188e808aad79f4a81aaf44871a7a30.
//
// Solidity: event TokensPurchase(address indexed buyer, address indexed recipient, uint256[] tokensBoughtIds, uint256[] tokensBoughtAmounts, uint256[] currencySoldAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterTokensPurchase(opts *bind.FilterOpts, buyer []common.Address, recipient []common.Address) (*NiftyswapExchange20TokensPurchaseIterator, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "TokensPurchase", buyerRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20TokensPurchaseIterator{contract: _NiftyswapExchange20.contract, event: "TokensPurchase", logs: logs, sub: sub}, nil
}

// WatchTokensPurchase is a free log subscription operation binding the contract event 0xd38bc77e62e239476b3e25620d73f29a4a188e808aad79f4a81aaf44871a7a30.
//
// Solidity: event TokensPurchase(address indexed buyer, address indexed recipient, uint256[] tokensBoughtIds, uint256[] tokensBoughtAmounts, uint256[] currencySoldAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchTokensPurchase(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20TokensPurchase, buyer []common.Address, recipient []common.Address) (event.Subscription, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "TokensPurchase", buyerRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20TokensPurchase)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "TokensPurchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensPurchase is a log parse operation binding the contract event 0xd38bc77e62e239476b3e25620d73f29a4a188e808aad79f4a81aaf44871a7a30.
//
// Solidity: event TokensPurchase(address indexed buyer, address indexed recipient, uint256[] tokensBoughtIds, uint256[] tokensBoughtAmounts, uint256[] currencySoldAmounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseTokensPurchase(log types.Log) (*NiftyswapExchange20TokensPurchase, error) {
	event := new(NiftyswapExchange20TokensPurchase)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "TokensPurchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TransferBatchIterator struct {
	Event *NiftyswapExchange20TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20TransferBatch represents a TransferBatch event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Amounts  []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterTransferBatch(opts *bind.FilterOpts, _operator []common.Address, _from []common.Address, _to []common.Address) (*NiftyswapExchange20TransferBatchIterator, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "TransferBatch", _operatorRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20TransferBatchIterator{contract: _NiftyswapExchange20.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20TransferBatch, _operator []common.Address, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "TransferBatch", _operatorRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20TransferBatch)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseTransferBatch(log types.Log) (*NiftyswapExchange20TransferBatch, error) {
	event := new(NiftyswapExchange20TransferBatch)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NiftyswapExchange20TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TransferSingleIterator struct {
	Event *NiftyswapExchange20TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NiftyswapExchange20TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NiftyswapExchange20TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NiftyswapExchange20TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NiftyswapExchange20TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NiftyswapExchange20TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NiftyswapExchange20TransferSingle represents a TransferSingle event raised by the NiftyswapExchange20 contract.
type NiftyswapExchange20TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) FilterTransferSingle(opts *bind.FilterOpts, _operator []common.Address, _from []common.Address, _to []common.Address) (*NiftyswapExchange20TransferSingleIterator, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.FilterLogs(opts, "TransferSingle", _operatorRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &NiftyswapExchange20TransferSingleIterator{contract: _NiftyswapExchange20.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *NiftyswapExchange20TransferSingle, _operator []common.Address, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _NiftyswapExchange20.contract.WatchLogs(opts, "TransferSingle", _operatorRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NiftyswapExchange20TransferSingle)
				if err := _NiftyswapExchange20.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount)
func (_NiftyswapExchange20 *NiftyswapExchange20Filterer) ParseTransferSingle(log types.Log) (*NiftyswapExchange20TransferSingle, error) {
	event := new(NiftyswapExchange20TransferSingle)
	if err := _NiftyswapExchange20.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
