// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0xsequence/go-sequence/api (interfaces: API)
//
// Generated by this command:
//
//	mockgen -destination api.mock.go -package api . API
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *MockAPI) AddFriend(ctx context.Context, friendAddress string, optionalNickname *string) (bool, *Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", ctx, friendAddress, optionalNickname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockAPIMockRecorder) AddFriend(ctx, friendAddress, optionalNickname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockAPI)(nil).AddFriend), ctx, friendAddress, optionalNickname)
}

// AddOffchainInventory mocks base method.
func (m *MockAPI) AddOffchainInventory(ctx context.Context, inventory *OffchainInventory) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffchainInventory", ctx, inventory)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOffchainInventory indicates an expected call of AddOffchainInventory.
func (mr *MockAPIMockRecorder) AddOffchainInventory(ctx, inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffchainInventory", reflect.TypeOf((*MockAPI)(nil).AddOffchainInventory), ctx, inventory)
}

// BlockNumberAtTime mocks base method.
func (m *MockAPI) BlockNumberAtTime(ctx context.Context, chainId uint64, timestamps []uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumberAtTime", ctx, chainId, timestamps)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumberAtTime indicates an expected call of BlockNumberAtTime.
func (mr *MockAPIMockRecorder) BlockNumberAtTime(ctx, chainId, timestamps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumberAtTime", reflect.TypeOf((*MockAPI)(nil).BlockNumberAtTime), ctx, chainId, timestamps)
}

// Clock mocks base method.
func (m *MockAPI) Clock(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clock", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clock indicates an expected call of Clock.
func (mr *MockAPIMockRecorder) Clock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockAPI)(nil).Clock), ctx)
}

// ContractCall mocks base method.
func (m *MockAPI) ContractCall(ctx context.Context, chainID, contract, inputExpr, outputExpr string, args []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCall", ctx, chainID, contract, inputExpr, outputExpr, args)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractCall indicates an expected call of ContractCall.
func (mr *MockAPIMockRecorder) ContractCall(ctx, chainID, contract, inputExpr, outputExpr, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCall", reflect.TypeOf((*MockAPI)(nil).ContractCall), ctx, chainID, contract, inputExpr, outputExpr, args)
}

// DecodeContractCall mocks base method.
func (m *MockAPI) DecodeContractCall(ctx context.Context, callData string) (*ContractCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeContractCall", ctx, callData)
	ret0, _ := ret[0].(*ContractCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeContractCall indicates an expected call of DecodeContractCall.
func (mr *MockAPIMockRecorder) DecodeContractCall(ctx, callData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeContractCall", reflect.TypeOf((*MockAPI)(nil).DecodeContractCall), ctx, callData)
}

// DeleteOffchainInventory mocks base method.
func (m *MockAPI) DeleteOffchainInventory(ctx context.Context, inventoryId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffchainInventory", ctx, inventoryId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOffchainInventory indicates an expected call of DeleteOffchainInventory.
func (mr *MockAPIMockRecorder) DeleteOffchainInventory(ctx, inventoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffchainInventory", reflect.TypeOf((*MockAPI)(nil).DeleteOffchainInventory), ctx, inventoryId)
}

// DeletePack mocks base method.
func (m *MockAPI) DeletePack(ctx context.Context, contractAddress string, chainId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePack", ctx, contractAddress, chainId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePack indicates an expected call of DeletePack.
func (mr *MockAPIMockRecorder) DeletePack(ctx, contractAddress, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePack", reflect.TypeOf((*MockAPI)(nil).DeletePack), ctx, contractAddress, chainId)
}

// FriendList mocks base method.
func (m *MockAPI) FriendList(ctx context.Context, nickname *string, page *Page) (*Page, []*Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FriendList", ctx, nickname, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FriendList indicates an expected call of FriendList.
func (mr *MockAPIMockRecorder) FriendList(ctx, nickname, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendList", reflect.TypeOf((*MockAPI)(nil).FriendList), ctx, nickname, page)
}

// GenerateWaaSVerificationURL mocks base method.
func (m *MockAPI) GenerateWaaSVerificationURL(ctx context.Context, walletAddress string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWaaSVerificationURL", ctx, walletAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateWaaSVerificationURL indicates an expected call of GenerateWaaSVerificationURL.
func (mr *MockAPIMockRecorder) GenerateWaaSVerificationURL(ctx, walletAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWaaSVerificationURL", reflect.TypeOf((*MockAPI)(nil).GenerateWaaSVerificationURL), ctx, walletAddress)
}

// GetAuthToken mocks base method.
func (m *MockAPI) GetAuthToken(ctx context.Context, ewtString string, testnetMode *bool) (bool, string, string, *User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", ctx, ewtString, testnetMode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(*User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockAPIMockRecorder) GetAuthToken(ctx, ewtString, testnetMode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockAPI)(nil).GetAuthToken), ctx, ewtString, testnetMode)
}

// GetAuthToken2 mocks base method.
func (m *MockAPI) GetAuthToken2(ctx context.Context, ewtString, chainID string) (bool, string, string, *User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken2", ctx, ewtString, chainID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(*User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAuthToken2 indicates an expected call of GetAuthToken2.
func (mr *MockAPIMockRecorder) GetAuthToken2(ctx, ewtString, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken2", reflect.TypeOf((*MockAPI)(nil).GetAuthToken2), ctx, ewtString, chainID)
}

// GetCoinPrices mocks base method.
func (m *MockAPI) GetCoinPrices(ctx context.Context, tokens []*Token) ([]*TokenPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinPrices", ctx, tokens)
	ret0, _ := ret[0].([]*TokenPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinPrices indicates an expected call of GetCoinPrices.
func (mr *MockAPIMockRecorder) GetCoinPrices(ctx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinPrices", reflect.TypeOf((*MockAPI)(nil).GetCoinPrices), ctx, tokens)
}

// GetCollectiblePrices mocks base method.
func (m *MockAPI) GetCollectiblePrices(ctx context.Context, tokens []*Token) ([]*TokenPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectiblePrices", ctx, tokens)
	ret0, _ := ret[0].([]*TokenPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectiblePrices indicates an expected call of GetCollectiblePrices.
func (mr *MockAPIMockRecorder) GetCollectiblePrices(ctx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectiblePrices", reflect.TypeOf((*MockAPI)(nil).GetCollectiblePrices), ctx, tokens)
}

// GetExchangeRate mocks base method.
func (m *MockAPI) GetExchangeRate(ctx context.Context, toCurrency string) (*ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, toCurrency)
	ret0, _ := ret[0].(*ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockAPIMockRecorder) GetExchangeRate(ctx, toCurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockAPI)(nil).GetExchangeRate), ctx, toCurrency)
}

// GetFriendByAddress mocks base method.
func (m *MockAPI) GetFriendByAddress(ctx context.Context, friendAddress string) (bool, *Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendByAddress", ctx, friendAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendByAddress indicates an expected call of GetFriendByAddress.
func (mr *MockAPIMockRecorder) GetFriendByAddress(ctx, friendAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendByAddress", reflect.TypeOf((*MockAPI)(nil).GetFriendByAddress), ctx, friendAddress)
}

// GetInviteInfo mocks base method.
func (m *MockAPI) GetInviteInfo(ctx context.Context) (*InviteInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteInfo", ctx)
	ret0, _ := ret[0].(*InviteInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteInfo indicates an expected call of GetInviteInfo.
func (mr *MockAPIMockRecorder) GetInviteInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteInfo", reflect.TypeOf((*MockAPI)(nil).GetInviteInfo), ctx)
}

// GetLinkedWallets mocks base method.
func (m *MockAPI) GetLinkedWallets(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId string) ([]*LinkedWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedWallets", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId)
	ret0, _ := ret[0].([]*LinkedWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedWallets indicates an expected call of GetLinkedWallets.
func (mr *MockAPIMockRecorder) GetLinkedWallets(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedWallets", reflect.TypeOf((*MockAPI)(nil).GetLinkedWallets), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, signatureChainId)
}

// GetMoonpayLink mocks base method.
func (m *MockAPI) GetMoonpayLink(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoonpayLink", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoonpayLink indicates an expected call of GetMoonpayLink.
func (mr *MockAPIMockRecorder) GetMoonpayLink(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoonpayLink", reflect.TypeOf((*MockAPI)(nil).GetMoonpayLink), ctx, url)
}

// GetOffchainInventory mocks base method.
func (m *MockAPI) GetOffchainInventory(ctx context.Context, inventoryId uint64) (*OffchainInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffchainInventory", ctx, inventoryId)
	ret0, _ := ret[0].(*OffchainInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffchainInventory indicates an expected call of GetOffchainInventory.
func (mr *MockAPIMockRecorder) GetOffchainInventory(ctx, inventoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffchainInventory", reflect.TypeOf((*MockAPI)(nil).GetOffchainInventory), ctx, inventoryId)
}

// GetPack mocks base method.
func (m *MockAPI) GetPack(ctx context.Context, contractAddress string, chainId uint64) (*Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPack", ctx, contractAddress, chainId)
	ret0, _ := ret[0].(*Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPack indicates an expected call of GetPack.
func (mr *MockAPIMockRecorder) GetPack(ctx, contractAddress, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPack", reflect.TypeOf((*MockAPI)(nil).GetPack), ctx, contractAddress, chainId)
}

// GetPublicKey mocks base method.
func (m *MockAPI) GetPublicKey(ctx context.Context, id string) (*PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, id)
	ret0, _ := ret[0].(*PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockAPIMockRecorder) GetPublicKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAPI)(nil).GetPublicKey), ctx, id)
}

// GetSardineClientToken mocks base method.
func (m *MockAPI) GetSardineClientToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineClientToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineClientToken indicates an expected call of GetSardineClientToken.
func (mr *MockAPIMockRecorder) GetSardineClientToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineClientToken", reflect.TypeOf((*MockAPI)(nil).GetSardineClientToken), ctx)
}

// GetSardineNFTCheckoutOrderStatus mocks base method.
func (m *MockAPI) GetSardineNFTCheckoutOrderStatus(ctx context.Context, orderId string) (*SardineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineNFTCheckoutOrderStatus", ctx, orderId)
	ret0, _ := ret[0].(*SardineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineNFTCheckoutOrderStatus indicates an expected call of GetSardineNFTCheckoutOrderStatus.
func (mr *MockAPIMockRecorder) GetSardineNFTCheckoutOrderStatus(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineNFTCheckoutOrderStatus", reflect.TypeOf((*MockAPI)(nil).GetSardineNFTCheckoutOrderStatus), ctx, orderId)
}

// GetSardineNFTCheckoutToken mocks base method.
func (m *MockAPI) GetSardineNFTCheckoutToken(ctx context.Context, params *SardineNFTCheckoutParams) (*SardineNFTCheckout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSardineNFTCheckoutToken", ctx, params)
	ret0, _ := ret[0].(*SardineNFTCheckout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSardineNFTCheckoutToken indicates an expected call of GetSardineNFTCheckoutToken.
func (mr *MockAPIMockRecorder) GetSardineNFTCheckoutToken(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSardineNFTCheckoutToken", reflect.TypeOf((*MockAPI)(nil).GetSardineNFTCheckoutToken), ctx, params)
}

// GetSequenceContext mocks base method.
func (m *MockAPI) GetSequenceContext(ctx context.Context) (*SequenceContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceContext", ctx)
	ret0, _ := ret[0].(*SequenceContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequenceContext indicates an expected call of GetSequenceContext.
func (mr *MockAPIMockRecorder) GetSequenceContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceContext", reflect.TypeOf((*MockAPI)(nil).GetSequenceContext), ctx)
}

// GetSwapPermit2Price mocks base method.
func (m *MockAPI) GetSwapPermit2Price(ctx context.Context, buyCurrencyAddress, sellCurrencyAddress, buyAmount string, chainId uint64, slippagePercentage *uint64) (*SwapPermit2Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapPermit2Price", ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage)
	ret0, _ := ret[0].(*SwapPermit2Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapPermit2Price indicates an expected call of GetSwapPermit2Price.
func (mr *MockAPIMockRecorder) GetSwapPermit2Price(ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapPermit2Price", reflect.TypeOf((*MockAPI)(nil).GetSwapPermit2Price), ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage)
}

// GetSwapPermit2Prices mocks base method.
func (m *MockAPI) GetSwapPermit2Prices(ctx context.Context, userAddress, buyCurrencyAddress, buyAmount string, chainId uint64, slippagePercentage *uint64) ([]*SwapPermit2Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapPermit2Prices", ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage)
	ret0, _ := ret[0].([]*SwapPermit2Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapPermit2Prices indicates an expected call of GetSwapPermit2Prices.
func (mr *MockAPIMockRecorder) GetSwapPermit2Prices(ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapPermit2Prices", reflect.TypeOf((*MockAPI)(nil).GetSwapPermit2Prices), ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage)
}

// GetSwapPermit2Quote mocks base method.
func (m *MockAPI) GetSwapPermit2Quote(ctx context.Context, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount string, chainId uint64, includeApprove bool, slippagePercentage *uint64) (*SwapPermit2Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapPermit2Quote", ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
	ret0, _ := ret[0].(*SwapPermit2Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapPermit2Quote indicates an expected call of GetSwapPermit2Quote.
func (mr *MockAPIMockRecorder) GetSwapPermit2Quote(ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapPermit2Quote", reflect.TypeOf((*MockAPI)(nil).GetSwapPermit2Quote), ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
}

// GetSwapPrice mocks base method.
func (m *MockAPI) GetSwapPrice(ctx context.Context, buyCurrencyAddress, sellCurrencyAddress, buyAmount string, chainId uint64, slippagePercentage *uint64) (*SwapPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapPrice", ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage)
	ret0, _ := ret[0].(*SwapPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapPrice indicates an expected call of GetSwapPrice.
func (mr *MockAPIMockRecorder) GetSwapPrice(ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapPrice", reflect.TypeOf((*MockAPI)(nil).GetSwapPrice), ctx, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, slippagePercentage)
}

// GetSwapPrices mocks base method.
func (m *MockAPI) GetSwapPrices(ctx context.Context, userAddress, buyCurrencyAddress, buyAmount string, chainId uint64, slippagePercentage *uint64) ([]*SwapPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapPrices", ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage)
	ret0, _ := ret[0].([]*SwapPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapPrices indicates an expected call of GetSwapPrices.
func (mr *MockAPIMockRecorder) GetSwapPrices(ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapPrices", reflect.TypeOf((*MockAPI)(nil).GetSwapPrices), ctx, userAddress, buyCurrencyAddress, buyAmount, chainId, slippagePercentage)
}

// GetSwapQuote mocks base method.
func (m *MockAPI) GetSwapQuote(ctx context.Context, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount string, chainId uint64, includeApprove bool, slippagePercentage *uint64) (*SwapQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapQuote", ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
	ret0, _ := ret[0].(*SwapQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapQuote indicates an expected call of GetSwapQuote.
func (mr *MockAPIMockRecorder) GetSwapQuote(ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapQuote", reflect.TypeOf((*MockAPI)(nil).GetSwapQuote), ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
}

// GetSwapQuoteV2 mocks base method.
func (m *MockAPI) GetSwapQuoteV2(ctx context.Context, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount string, chainId uint64, includeApprove bool, slippagePercentage *uint64) (*SwapQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapQuoteV2", ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
	ret0, _ := ret[0].(*SwapQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapQuoteV2 indicates an expected call of GetSwapQuoteV2.
func (mr *MockAPIMockRecorder) GetSwapQuoteV2(ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapQuoteV2", reflect.TypeOf((*MockAPI)(nil).GetSwapQuoteV2), ctx, userAddress, buyCurrencyAddress, sellCurrencyAddress, buyAmount, chainId, includeApprove, slippagePercentage)
}

// IntentQuery mocks base method.
func (m *MockAPI) IntentQuery(ctx context.Context, wallet string, preconditions []*IntentPrecondition) ([]*IntentSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentQuery", ctx, wallet, preconditions)
	ret0, _ := ret[0].([]*IntentSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntentQuery indicates an expected call of IntentQuery.
func (mr *MockAPIMockRecorder) IntentQuery(ctx, wallet, preconditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentQuery", reflect.TypeOf((*MockAPI)(nil).IntentQuery), ctx, wallet, preconditions)
}

// InternalClaimAccessCode mocks base method.
func (m *MockAPI) InternalClaimAccessCode(ctx context.Context, address, accessCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalClaimAccessCode", ctx, address, accessCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalClaimAccessCode indicates an expected call of InternalClaimAccessCode.
func (mr *MockAPIMockRecorder) InternalClaimAccessCode(ctx, address, accessCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalClaimAccessCode", reflect.TypeOf((*MockAPI)(nil).InternalClaimAccessCode), ctx, address, accessCode)
}

// IsValidAccessCode mocks base method.
func (m *MockAPI) IsValidAccessCode(ctx context.Context, accessCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidAccessCode", ctx, accessCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidAccessCode indicates an expected call of IsValidAccessCode.
func (mr *MockAPIMockRecorder) IsValidAccessCode(ctx, accessCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidAccessCode", reflect.TypeOf((*MockAPI)(nil).IsValidAccessCode), ctx, accessCode)
}

// IsValidETHAuthProof mocks base method.
func (m *MockAPI) IsValidETHAuthProof(ctx context.Context, chainId, walletAddress, ethAuthProofString string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidETHAuthProof", ctx, chainId, walletAddress, ethAuthProofString)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidETHAuthProof indicates an expected call of IsValidETHAuthProof.
func (mr *MockAPIMockRecorder) IsValidETHAuthProof(ctx, chainId, walletAddress, ethAuthProofString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidETHAuthProof", reflect.TypeOf((*MockAPI)(nil).IsValidETHAuthProof), ctx, chainId, walletAddress, ethAuthProofString)
}

// IsValidMessageSignature mocks base method.
func (m *MockAPI) IsValidMessageSignature(ctx context.Context, chainId, walletAddress, message, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidMessageSignature", ctx, chainId, walletAddress, message, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidMessageSignature indicates an expected call of IsValidMessageSignature.
func (mr *MockAPIMockRecorder) IsValidMessageSignature(ctx, chainId, walletAddress, message, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidMessageSignature", reflect.TypeOf((*MockAPI)(nil).IsValidMessageSignature), ctx, chainId, walletAddress, message, signature)
}

// IsValidSignature mocks base method.
func (m *MockAPI) IsValidSignature(ctx context.Context, chainId, walletAddress, digest, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidSignature", ctx, chainId, walletAddress, digest, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidSignature indicates an expected call of IsValidSignature.
func (mr *MockAPIMockRecorder) IsValidSignature(ctx, chainId, walletAddress, digest, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidSignature", reflect.TypeOf((*MockAPI)(nil).IsValidSignature), ctx, chainId, walletAddress, digest, signature)
}

// IsValidTypedDataSignature mocks base method.
func (m *MockAPI) IsValidTypedDataSignature(ctx context.Context, chainId, walletAddress string, typedData any, signature string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidTypedDataSignature", ctx, chainId, walletAddress, typedData, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidTypedDataSignature indicates an expected call of IsValidTypedDataSignature.
func (mr *MockAPIMockRecorder) IsValidTypedDataSignature(ctx, chainId, walletAddress, typedData, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidTypedDataSignature", reflect.TypeOf((*MockAPI)(nil).IsValidTypedDataSignature), ctx, chainId, walletAddress, typedData, signature)
}

// LinkWallet mocks base method.
func (m *MockAPI) LinkWallet(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId string, linkedWalletType *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkWallet", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkWallet indicates an expected call of LinkWallet.
func (mr *MockAPIMockRecorder) LinkWallet(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkWallet", reflect.TypeOf((*MockAPI)(nil).LinkWallet), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, linkedWalletMessage, linkedWalletSignature, signatureChainId, linkedWalletType)
}

// ListAdoptedWallets mocks base method.
func (m *MockAPI) ListAdoptedWallets(ctx context.Context, page *Page) (*Page, []*AdoptedChildWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdoptedWallets", ctx, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*AdoptedChildWallet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAdoptedWallets indicates an expected call of ListAdoptedWallets.
func (mr *MockAPIMockRecorder) ListAdoptedWallets(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdoptedWallets", reflect.TypeOf((*MockAPI)(nil).ListAdoptedWallets), ctx, page)
}

// ListCurrencyGroups mocks base method.
func (m *MockAPI) ListCurrencyGroups(ctx context.Context) ([]*CurrencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencyGroups", ctx)
	ret0, _ := ret[0].([]*CurrencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrencyGroups indicates an expected call of ListCurrencyGroups.
func (mr *MockAPIMockRecorder) ListCurrencyGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencyGroups", reflect.TypeOf((*MockAPI)(nil).ListCurrencyGroups), ctx)
}

// ListOffchainInventories mocks base method.
func (m *MockAPI) ListOffchainInventories(ctx context.Context, projectId uint64) ([]*OffchainInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffchainInventories", ctx, projectId)
	ret0, _ := ret[0].([]*OffchainInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffchainInventories indicates an expected call of ListOffchainInventories.
func (mr *MockAPIMockRecorder) ListOffchainInventories(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffchainInventories", reflect.TypeOf((*MockAPI)(nil).ListOffchainInventories), ctx, projectId)
}

// ListOffchainPayments mocks base method.
func (m *MockAPI) ListOffchainPayments(ctx context.Context, inventoryId uint64, page *Page) (*Page, []*OffchainPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffchainPayments", ctx, inventoryId, page)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].([]*OffchainPayment)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOffchainPayments indicates an expected call of ListOffchainPayments.
func (mr *MockAPIMockRecorder) ListOffchainPayments(ctx, inventoryId, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffchainPayments", reflect.TypeOf((*MockAPI)(nil).ListOffchainPayments), ctx, inventoryId, page)
}

// LookupContractCallSelectors mocks base method.
func (m *MockAPI) LookupContractCallSelectors(ctx context.Context, selectors []string) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupContractCallSelectors", ctx, selectors)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupContractCallSelectors indicates an expected call of LookupContractCallSelectors.
func (mr *MockAPIMockRecorder) LookupContractCallSelectors(ctx, selectors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupContractCallSelectors", reflect.TypeOf((*MockAPI)(nil).LookupContractCallSelectors), ctx, selectors)
}

// MemoryLoad mocks base method.
func (m *MockAPI) MemoryLoad(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryLoad", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryLoad indicates an expected call of MemoryLoad.
func (mr *MockAPIMockRecorder) MemoryLoad(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryLoad", reflect.TypeOf((*MockAPI)(nil).MemoryLoad), ctx, key)
}

// MemoryStore mocks base method.
func (m *MockAPI) MemoryStore(ctx context.Context, key, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryStore", ctx, key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryStore indicates an expected call of MemoryStore.
func (mr *MockAPIMockRecorder) MemoryStore(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryStore", reflect.TypeOf((*MockAPI)(nil).MemoryStore), ctx, key, value)
}

// PaperSessionSecret mocks base method.
func (m *MockAPI) PaperSessionSecret(ctx context.Context, chainName, contractAddress, paramsJson, contractType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaperSessionSecret", ctx, chainName, contractAddress, paramsJson, contractType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaperSessionSecret indicates an expected call of PaperSessionSecret.
func (mr *MockAPIMockRecorder) PaperSessionSecret(ctx, chainName, contractAddress, paramsJson, contractType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaperSessionSecret", reflect.TypeOf((*MockAPI)(nil).PaperSessionSecret), ctx, chainName, contractAddress, paramsJson, contractType)
}

// PaperSessionSecret2 mocks base method.
func (m *MockAPI) PaperSessionSecret2(ctx context.Context, chainName, contractAddress, paramsJson, abi string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaperSessionSecret2", ctx, chainName, contractAddress, paramsJson, abi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaperSessionSecret2 indicates an expected call of PaperSessionSecret2.
func (mr *MockAPIMockRecorder) PaperSessionSecret2(ctx, chainName, contractAddress, paramsJson, abi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaperSessionSecret2", reflect.TypeOf((*MockAPI)(nil).PaperSessionSecret2), ctx, chainName, contractAddress, paramsJson, abi)
}

// Ping mocks base method.
func (m *MockAPI) Ping(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAPIMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAPI)(nil).Ping), ctx)
}

// RegisterPublicKey mocks base method.
func (m *MockAPI) RegisterPublicKey(ctx context.Context, publicKey *PublicKey) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPublicKey", ctx, publicKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPublicKey indicates an expected call of RegisterPublicKey.
func (mr *MockAPIMockRecorder) RegisterPublicKey(ctx, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublicKey", reflect.TypeOf((*MockAPI)(nil).RegisterPublicKey), ctx, publicKey)
}

// RemoveFriend mocks base method.
func (m *MockAPI) RemoveFriend(ctx context.Context, friendAddress string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriend", ctx, friendAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFriend indicates an expected call of RemoveFriend.
func (mr *MockAPIMockRecorder) RemoveFriend(ctx, friendAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriend", reflect.TypeOf((*MockAPI)(nil).RemoveFriend), ctx, friendAddress)
}

// RemoveLinkedWallet mocks base method.
func (m *MockAPI) RemoveLinkedWallet(ctx context.Context, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLinkedWallet", ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLinkedWallet indicates an expected call of RemoveLinkedWallet.
func (mr *MockAPIMockRecorder) RemoveLinkedWallet(ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLinkedWallet", reflect.TypeOf((*MockAPI)(nil).RemoveLinkedWallet), ctx, parentWalletAddress, parentWalletMessage, parentWalletSignature, linkedWalletAddress, signatureChainId)
}

// RequestOffchainPayment mocks base method.
func (m *MockAPI) RequestOffchainPayment(ctx context.Context, inventoryId uint64, recipient string, chainId *uint64, tokenAddress *string) (*PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOffchainPayment", ctx, inventoryId, recipient, chainId, tokenAddress)
	ret0, _ := ret[0].(*PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOffchainPayment indicates an expected call of RequestOffchainPayment.
func (mr *MockAPIMockRecorder) RequestOffchainPayment(ctx, inventoryId, recipient, chainId, tokenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOffchainPayment", reflect.TypeOf((*MockAPI)(nil).RequestOffchainPayment), ctx, inventoryId, recipient, chainId, tokenAddress)
}

// ResolveENSAddress mocks base method.
func (m *MockAPI) ResolveENSAddress(ctx context.Context, ens string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveENSAddress", ctx, ens)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveENSAddress indicates an expected call of ResolveENSAddress.
func (mr *MockAPIMockRecorder) ResolveENSAddress(ctx, ens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveENSAddress", reflect.TypeOf((*MockAPI)(nil).ResolveENSAddress), ctx, ens)
}

// RuntimeStatus mocks base method.
func (m *MockAPI) RuntimeStatus(ctx context.Context) (*RuntimeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeStatus", ctx)
	ret0, _ := ret[0].(*RuntimeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeStatus indicates an expected call of RuntimeStatus.
func (mr *MockAPIMockRecorder) RuntimeStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeStatus", reflect.TypeOf((*MockAPI)(nil).RuntimeStatus), ctx)
}

// SardineGetClientToken mocks base method.
func (m *MockAPI) SardineGetClientToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetClientToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetClientToken indicates an expected call of SardineGetClientToken.
func (mr *MockAPIMockRecorder) SardineGetClientToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetClientToken", reflect.TypeOf((*MockAPI)(nil).SardineGetClientToken), ctx)
}

// SardineGetEnabledTokens mocks base method.
func (m *MockAPI) SardineGetEnabledTokens(ctx context.Context) ([]*SardineEnabledToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetEnabledTokens", ctx)
	ret0, _ := ret[0].([]*SardineEnabledToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetEnabledTokens indicates an expected call of SardineGetEnabledTokens.
func (mr *MockAPIMockRecorder) SardineGetEnabledTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetEnabledTokens", reflect.TypeOf((*MockAPI)(nil).SardineGetEnabledTokens), ctx)
}

// SardineGetNFTCheckoutOrderStatus mocks base method.
func (m *MockAPI) SardineGetNFTCheckoutOrderStatus(ctx context.Context, orderId string) (*SardineOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetNFTCheckoutOrderStatus", ctx, orderId)
	ret0, _ := ret[0].(*SardineOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetNFTCheckoutOrderStatus indicates an expected call of SardineGetNFTCheckoutOrderStatus.
func (mr *MockAPIMockRecorder) SardineGetNFTCheckoutOrderStatus(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetNFTCheckoutOrderStatus", reflect.TypeOf((*MockAPI)(nil).SardineGetNFTCheckoutOrderStatus), ctx, orderId)
}

// SardineGetNFTCheckoutToken mocks base method.
func (m *MockAPI) SardineGetNFTCheckoutToken(ctx context.Context, params *SardineNFTCheckoutParams) (*SardineNFTCheckout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetNFTCheckoutToken", ctx, params)
	ret0, _ := ret[0].(*SardineNFTCheckout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetNFTCheckoutToken indicates an expected call of SardineGetNFTCheckoutToken.
func (mr *MockAPIMockRecorder) SardineGetNFTCheckoutToken(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetNFTCheckoutToken", reflect.TypeOf((*MockAPI)(nil).SardineGetNFTCheckoutToken), ctx, params)
}

// SardineGetQuote mocks base method.
func (m *MockAPI) SardineGetQuote(ctx context.Context, params *SardineGetQuoteParams) (*SardineQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetQuote", ctx, params)
	ret0, _ := ret[0].(*SardineQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetQuote indicates an expected call of SardineGetQuote.
func (mr *MockAPIMockRecorder) SardineGetQuote(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetQuote", reflect.TypeOf((*MockAPI)(nil).SardineGetQuote), ctx, params)
}

// SardineGetSupportedFiatCurrencies mocks base method.
func (m *MockAPI) SardineGetSupportedFiatCurrencies(ctx context.Context) ([]*SardineFiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedFiatCurrencies", ctx)
	ret0, _ := ret[0].([]*SardineFiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedFiatCurrencies indicates an expected call of SardineGetSupportedFiatCurrencies.
func (mr *MockAPIMockRecorder) SardineGetSupportedFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedFiatCurrencies", reflect.TypeOf((*MockAPI)(nil).SardineGetSupportedFiatCurrencies), ctx)
}

// SardineGetSupportedRegions mocks base method.
func (m *MockAPI) SardineGetSupportedRegions(ctx context.Context) ([]*SardineRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedRegions", ctx)
	ret0, _ := ret[0].([]*SardineRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedRegions indicates an expected call of SardineGetSupportedRegions.
func (mr *MockAPIMockRecorder) SardineGetSupportedRegions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedRegions", reflect.TypeOf((*MockAPI)(nil).SardineGetSupportedRegions), ctx)
}

// SardineGetSupportedTokenForSwap mocks base method.
func (m *MockAPI) SardineGetSupportedTokenForSwap(ctx context.Context, network, tokenAddress string) (*SardineSupportedTokenForSwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedTokenForSwap", ctx, network, tokenAddress)
	ret0, _ := ret[0].(*SardineSupportedTokenForSwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedTokenForSwap indicates an expected call of SardineGetSupportedTokenForSwap.
func (mr *MockAPIMockRecorder) SardineGetSupportedTokenForSwap(ctx, network, tokenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedTokenForSwap", reflect.TypeOf((*MockAPI)(nil).SardineGetSupportedTokenForSwap), ctx, network, tokenAddress)
}

// SardineGetSupportedTokens mocks base method.
func (m *MockAPI) SardineGetSupportedTokens(ctx context.Context) ([]*SardineSupportedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SardineGetSupportedTokens", ctx)
	ret0, _ := ret[0].([]*SardineSupportedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SardineGetSupportedTokens indicates an expected call of SardineGetSupportedTokens.
func (mr *MockAPIMockRecorder) SardineGetSupportedTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SardineGetSupportedTokens", reflect.TypeOf((*MockAPI)(nil).SardineGetSupportedTokens), ctx)
}

// SavePack mocks base method.
func (m *MockAPI) SavePack(ctx context.Context, pack *Pack) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePack", ctx, pack)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePack indicates an expected call of SavePack.
func (mr *MockAPIMockRecorder) SavePack(ctx, pack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePack", reflect.TypeOf((*MockAPI)(nil).SavePack), ctx, pack)
}

// SearchFriends mocks base method.
func (m *MockAPI) SearchFriends(ctx context.Context, filterUsername string, page *Page) ([]*Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFriends", ctx, filterUsername, page)
	ret0, _ := ret[0].([]*Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFriends indicates an expected call of SearchFriends.
func (mr *MockAPIMockRecorder) SearchFriends(ctx, filterUsername, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFriends", reflect.TypeOf((*MockAPI)(nil).SearchFriends), ctx, filterUsername, page)
}

// SendPasswordlessLink mocks base method.
func (m *MockAPI) SendPasswordlessLink(ctx context.Context, email, redirectUri, intent string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordlessLink", ctx, email, redirectUri, intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordlessLink indicates an expected call of SendPasswordlessLink.
func (mr *MockAPIMockRecorder) SendPasswordlessLink(ctx, email, redirectUri, intent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordlessLink", reflect.TypeOf((*MockAPI)(nil).SendPasswordlessLink), ctx, email, redirectUri, intent)
}

// TransakGetCountries mocks base method.
func (m *MockAPI) TransakGetCountries(ctx context.Context) ([]*TransakCountry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetCountries", ctx)
	ret0, _ := ret[0].([]*TransakCountry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetCountries indicates an expected call of TransakGetCountries.
func (mr *MockAPIMockRecorder) TransakGetCountries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetCountries", reflect.TypeOf((*MockAPI)(nil).TransakGetCountries), ctx)
}

// TransakGetCryptoCurrencies mocks base method.
func (m *MockAPI) TransakGetCryptoCurrencies(ctx context.Context) ([]*TransakCryptoCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetCryptoCurrencies", ctx)
	ret0, _ := ret[0].([]*TransakCryptoCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetCryptoCurrencies indicates an expected call of TransakGetCryptoCurrencies.
func (mr *MockAPIMockRecorder) TransakGetCryptoCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetCryptoCurrencies", reflect.TypeOf((*MockAPI)(nil).TransakGetCryptoCurrencies), ctx)
}

// TransakGetFiatCurrencies mocks base method.
func (m *MockAPI) TransakGetFiatCurrencies(ctx context.Context) ([]*TransakFiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetFiatCurrencies", ctx)
	ret0, _ := ret[0].([]*TransakFiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetFiatCurrencies indicates an expected call of TransakGetFiatCurrencies.
func (mr *MockAPIMockRecorder) TransakGetFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetFiatCurrencies", reflect.TypeOf((*MockAPI)(nil).TransakGetFiatCurrencies), ctx)
}

// TransakGetPrice mocks base method.
func (m *MockAPI) TransakGetPrice(ctx context.Context, params *TransakGetPriceParams) (*TransakPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetPrice", ctx, params)
	ret0, _ := ret[0].(*TransakPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetPrice indicates an expected call of TransakGetPrice.
func (mr *MockAPIMockRecorder) TransakGetPrice(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetPrice", reflect.TypeOf((*MockAPI)(nil).TransakGetPrice), ctx, params)
}

// TransakGetSupportedNFTCheckoutChains mocks base method.
func (m *MockAPI) TransakGetSupportedNFTCheckoutChains(ctx context.Context) ([]*TransakChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransakGetSupportedNFTCheckoutChains", ctx)
	ret0, _ := ret[0].([]*TransakChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransakGetSupportedNFTCheckoutChains indicates an expected call of TransakGetSupportedNFTCheckoutChains.
func (mr *MockAPIMockRecorder) TransakGetSupportedNFTCheckoutChains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransakGetSupportedNFTCheckoutChains", reflect.TypeOf((*MockAPI)(nil).TransakGetSupportedNFTCheckoutChains), ctx)
}

// UpdateFriendNickname mocks base method.
func (m *MockAPI) UpdateFriendNickname(ctx context.Context, friendAddress, nickname string) (bool, *Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendNickname", ctx, friendAddress, nickname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*Friend)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFriendNickname indicates an expected call of UpdateFriendNickname.
func (mr *MockAPIMockRecorder) UpdateFriendNickname(ctx, friendAddress, nickname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendNickname", reflect.TypeOf((*MockAPI)(nil).UpdateFriendNickname), ctx, friendAddress, nickname)
}

// UpdateOffchainInventory mocks base method.
func (m *MockAPI) UpdateOffchainInventory(ctx context.Context, inventory *OffchainInventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffchainInventory", ctx, inventory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffchainInventory indicates an expected call of UpdateOffchainInventory.
func (mr *MockAPIMockRecorder) UpdateOffchainInventory(ctx, inventory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffchainInventory", reflect.TypeOf((*MockAPI)(nil).UpdateOffchainInventory), ctx, inventory)
}

// UpdatePackContent mocks base method.
func (m *MockAPI) UpdatePackContent(ctx context.Context, pack *Pack) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackContent", ctx, pack)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackContent indicates an expected call of UpdatePackContent.
func (mr *MockAPIMockRecorder) UpdatePackContent(ctx, pack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackContent", reflect.TypeOf((*MockAPI)(nil).UpdatePackContent), ctx, pack)
}

// UserStorageDelete mocks base method.
func (m *MockAPI) UserStorageDelete(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageDelete", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageDelete indicates an expected call of UserStorageDelete.
func (mr *MockAPIMockRecorder) UserStorageDelete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageDelete", reflect.TypeOf((*MockAPI)(nil).UserStorageDelete), ctx, key)
}

// UserStorageFetch mocks base method.
func (m *MockAPI) UserStorageFetch(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageFetch", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageFetch indicates an expected call of UserStorageFetch.
func (mr *MockAPIMockRecorder) UserStorageFetch(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageFetch", reflect.TypeOf((*MockAPI)(nil).UserStorageFetch), ctx, key)
}

// UserStorageFetchAll mocks base method.
func (m *MockAPI) UserStorageFetchAll(ctx context.Context, keys []string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageFetchAll", ctx, keys)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageFetchAll indicates an expected call of UserStorageFetchAll.
func (mr *MockAPIMockRecorder) UserStorageFetchAll(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageFetchAll", reflect.TypeOf((*MockAPI)(nil).UserStorageFetchAll), ctx, keys)
}

// UserStorageSave mocks base method.
func (m *MockAPI) UserStorageSave(ctx context.Context, key string, object any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStorageSave", ctx, key, object)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserStorageSave indicates an expected call of UserStorageSave.
func (mr *MockAPIMockRecorder) UserStorageSave(ctx, key, object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStorageSave", reflect.TypeOf((*MockAPI)(nil).UserStorageSave), ctx, key, object)
}

// ValidateWaaSVerificationNonce mocks base method.
func (m *MockAPI) ValidateWaaSVerificationNonce(ctx context.Context, nonce, signature, sessionId, chainId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWaaSVerificationNonce", ctx, nonce, signature, sessionId, chainId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateWaaSVerificationNonce indicates an expected call of ValidateWaaSVerificationNonce.
func (mr *MockAPIMockRecorder) ValidateWaaSVerificationNonce(ctx, nonce, signature, sessionId, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWaaSVerificationNonce", reflect.TypeOf((*MockAPI)(nil).ValidateWaaSVerificationNonce), ctx, nonce, signature, sessionId, chainId)
}

// Version mocks base method.
func (m *MockAPI) Version(ctx context.Context) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockAPIMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAPI)(nil).Version), ctx)
}
